<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[输入「神秘代码」解锁「隐藏类目」]]></title>
      <url>/posts/netflix-guide.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/netflix_v2-1024x576.png?imageslim" alt="Netflix"></p><blockquote><p>翻译: <a href="https://netflix-codes.com/?ref=digitalimmigrant.org" target="_blank" rel="noopener">Netflix-Codes</a></p></blockquote><p>Netflix使用一个非常奇怪的系统来对电影和电视节目进行分类，网站上并没有分类的导航tab，不过你可以通过下面的分类CODE直达您想看的影片。您只需用CODE替换掉下面链接中<code>xx</code>即可：</p><blockquote><p><code>https://netflix.com/browse/genre/xx</code></p></blockquote><a id="more"></a><h2 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h2><ul><li>有一个可以解锁Netflix的VPN，这里推荐rixcloud（<a href="https://wangwei.one/posts/build-your-own-vpn-by-shadowsocks-or-rixcloud.html">指南</a>）</li><li>双币（全币）VISA信用卡💳</li></ul><h2 id="动作和冒险-1365"><a href="#动作和冒险-1365" class="headerlink" title="动作和冒险 1365"></a>动作和冒险 <a href="https://netflix.com/browse/genre/1365" target="_blank" rel="noopener"><code>1365</code></a></h2><ul><li>军事行动和冒险 Military action &amp; adventure <a href="https://netflix.com/browse/genre/2125" target="_blank" rel="noopener"><code>2125</code></a></li><li>动作喜剧 Action comedies <a href="https://netflix.com/browse/genre/43040" target="_blank" rel="noopener"><code>43040</code></a></li><li>间谍行动和冒险 Spy action &amp; adventure <a href="https://netflix.com/browse/genre/10702" target="_blank" rel="noopener"><code>10702</code></a></li><li>犯罪行动和冒险 Crime action &amp; adventure <a href="https://netflix.com/browse/genre/9584" target="_blank" rel="noopener"><code>9584</code></a></li><li>动作类科幻和奇幻 Action Sci-Fi &amp; fantasy <a href="https://netflix.com/browse/genre/1568" target="_blank" rel="noopener"><code>1568</code></a></li><li>动作惊悚片 Action thrillers <a href="https://netflix.com/browse/genre/43048" target="_blank" rel="noopener"><code>43048</code></a></li><li>亚洲动作片 Asian action movies <a href="https://netflix.com/browse/genre/77232" target="_blank" rel="noopener"><code>77232</code></a></li><li>冒险片 Adventures <a href="https://netflix.com/browse/genre/7442" target="_blank" rel="noopener"><code>7442</code></a></li><li>漫画书和超级英雄电影 Comic book and superhero movies <a href="https://netflix.com/browse/genre/10118" target="_blank" rel="noopener"><code>10118</code></a></li><li>武侠电影 Martial arts movies <a href="https://netflix.com/browse/genre/8985" target="_blank" rel="noopener"><code>8985</code></a></li><li>外国动作和冒险 Foreign action &amp; adventure <a href="https://netflix.com/browse/genre/11828" target="_blank" rel="noopener"><code>11828</code></a></li><li>西部片 Westerns <a href="https://netflix.com/browse/genre/7700" target="_blank" rel="noopener"><code>7700</code></a></li><li>劫持电影 Hijacking Movies <a href="https://netflix.com/browse/genre/20541" target="_blank" rel="noopener"><code>20541</code></a></li></ul><h2 id="经典电影-31574"><a href="#经典电影-31574" class="headerlink" title="经典电影 31574"></a>经典电影 <a href="https://netflix.com/browse/genre/31574" target="_blank" rel="noopener"><code>31574</code></a></h2><ul><li>经典动作和冒险 Classic action &amp; adventure <a href="https://netflix.com/browse/genre/46576" target="_blank" rel="noopener"><code>46576</code></a></li><li>经典喜剧 Classic comedies <a href="https://netflix.com/browse/genre/31694" target="_blank" rel="noopener"><code>31694</code></a></li><li>经典剧集 Classic dramas <a href="https://netflix.com/browse/genre/29809" target="_blank" rel="noopener"><code>29809</code></a></li><li>经典音乐喜剧 Classic musical comedy <a href="https://netflix.com/browse/genre/32392" target="_blank" rel="noopener"><code>32392</code></a></li><li>经典浪漫电影 Classic romantic movies <a href="https://netflix.com/browse/genre/31273" target="_blank" rel="noopener"><code>31273</code></a></li><li>经典科幻和奇幻电影 Classic SF &amp; fantasy <a href="https://netflix.com/browse/genre/47147" target="_blank" rel="noopener"><code>47147</code></a></li><li>经典惊悚片 Classic thrillers <a href="https://netflix.com/browse/genre/46588" target="_blank" rel="noopener"><code>46588</code></a></li><li>经典战争题材电影 Classic war movies <a href="https://netflix.com/browse/genre/48744" target="_blank" rel="noopener"><code>48744</code></a></li><li>经典电视节目 Classic TV shows <a href="https://netflix.com/browse/genre/46553" target="_blank" rel="noopener"><code>46553</code></a></li><li>经典西部片 Classic westerns <a href="https://netflix.com/browse/genre/47465" target="_blank" rel="noopener"><code>47465</code></a></li></ul><h2 id="喜剧-6548"><a href="#喜剧-6548" class="headerlink" title="喜剧 6548"></a>喜剧 <a href="https://netflix.com/browse/genre/6548" target="_blank" rel="noopener"><code>6548</code></a></h2><ul><li>动漫喜剧 Animes comedies <a href="https://netflix.com/browse/genre/9302" target="_blank" rel="noopener"><code>9302</code></a></li><li>恶搞喜剧 Slapstick comedies <a href="https://netflix.com/browse/genre/10256" target="_blank" rel="noopener"><code>10256</code></a></li><li>恐怖喜剧 Horror comedies <a href="https://netflix.com/browse/genre/89585" target="_blank" rel="noopener"><code>89585</code></a></li><li>黑色幽默 Dark comedies <a href="https://netflix.com/browse/genre/869" target="_blank" rel="noopener"><code>869</code></a></li><li>音乐剧喜剧 Musicals comedies <a href="https://netflix.com/browse/genre/13335" target="_blank" rel="noopener"><code>13335</code></a></li><li>政治题材喜剧 Political comedies <a href="https://netflix.com/browse/genre/2700" target="_blank" rel="noopener"><code>2700</code></a></li><li>体育题材喜剧 Sports comedies <a href="https://netflix.com/browse/genre/5286" target="_blank" rel="noopener"><code>5286</code></a></li></ul><h2 id="戏剧-5763"><a href="#戏剧-5763" class="headerlink" title="戏剧 5763"></a>戏剧 <a href="https://netflix.com/browse/genre/5763" target="_blank" rel="noopener"><code>5763</code></a></h2><ul><li>传记剧情片 Biographical dramas <a href="https://netflix.com/browse/genre/3179" target="_blank" rel="noopener"><code>3179</code></a></li><li>原著改编的剧情片 Dramas based on books <a href="https://netflix.com/browse/genre/4961" target="_blank" rel="noopener"><code>4961</code></a></li><li>真实故事改编的剧情片 Dramas based on real life <a href="https://netflix.com/browse/genre/3653" target="_blank" rel="noopener"><code>3653</code></a></li><li><a href="https://www.wikiwand.com/zh-hk/LGBT%E6%96%87%E5%8C%96" target="_blank" rel="noopener">同性恋</a> 题材剧情片 LGBT Dramas <a href="https://netflix.com/browse/genre/500" target="_blank" rel="noopener"><code>500</code></a></li><li>犯罪题材剧情片 Crime dramas <a href="https://netflix.com/browse/genre/6889" target="_blank" rel="noopener"><code>6889</code></a></li><li>政治题材剧情片 Political Dramas <a href="https://netflix.com/browse/genre/6616" target="_blank" rel="noopener"><code>6616</code></a></li><li>浪漫爱情剧情片 Romantical dramas <a href="https://netflix.com/browse/genre/1255" target="_blank" rel="noopener"><code>1255</code></a></li><li>涉及社会问题的剧情片 Social issues dramas <a href="https://netflix.com/browse/genre/3947" target="_blank" rel="noopener"><code>3947</code></a></li><li>军事题材剧情片 Army dramas <a href="https://netflix.com/browse/genre/11" target="_blank" rel="noopener"><code>11</code></a></li><li>体育类剧情片 Sports drama <a href="https://netflix.com/browse/genre/7243" target="_blank" rel="noopener"><code>7243</code></a></li><li>演艺界电视剧 Showbiz dramas <a href="https://netflix.com/browse/genre/5012" target="_blank" rel="noopener"><code>5012</code></a></li></ul><h2 id="恐怖电影-8711"><a href="#恐怖电影-8711" class="headerlink" title="恐怖电影 8711"></a>恐怖电影 <a href="https://netflix.com/browse/genre/8711" target="_blank" rel="noopener"><code>8711</code></a></h2><ul><li>深海恐怖片 Deep sea horror movies <a href="https://netflix.com/browse/genre/45028" target="_blank" rel="noopener"><code>45028</code></a></li><li>吸血鬼恐怖片 Vampire horror movies <a href="https://netflix.com/browse/genre/75804" target="_blank" rel="noopener"><code>75804</code></a></li><li>狼人恐怖片 Werewolf horror movies <a href="https://netflix.com/browse/genre/75930" target="_blank" rel="noopener"><code>75930</code></a></li><li>僵尸恐怖片 Zombie horror movies <a href="https://netflix.com/browse/genre/75405" target="_blank" rel="noopener"><code>75405</code></a></li><li>撒旦的故事 Satanic stories <a href="https://netflix.com/browse/genre/6998" target="_blank" rel="noopener"><code>6998</code></a></li><li>青少年恐怖片 Teen screams <a href="https://netflix.com/browse/genre/52147" target="_blank" rel="noopener"><code>52147</code></a></li><li>超自然恐怖题材恐怖片 Supernatural horror movies <a href="https://netflix.com/browse/genre/42023" target="_blank" rel="noopener"><code>42023</code></a></li><li>血腥暴力和连环杀手题材恐怖片 Slasher and serial killer movies <a href="https://netflix.com/browse/genre/8646" target="_blank" rel="noopener"><code>8646</code></a></li><li>怪兽题材恐怖片 Monster movies <a href="https://netflix.com/browse/genre/947" target="_blank" rel="noopener"><code>947</code></a></li><li>恐怖类喜剧片 Horror comedy <a href="https://netflix.com/browse/genre/89585" target="_blank" rel="noopener"><code>89585</code></a></li><li>外国恐怖片 Foreign horror movies <a href="https://netflix.com/browse/genre/8654" target="_blank" rel="noopener"><code>8654</code></a></li><li>小众恐怖电影 Cult horror movies <a href="https://netflix.com/browse/genre/10944" target="_blank" rel="noopener"><code>10944</code></a></li></ul><h2 id="浪漫爱情电影-8883"><a href="#浪漫爱情电影-8883" class="headerlink" title="浪漫爱情电影 8883"></a>浪漫爱情电影 <a href="https://netflix.com/browse/genre/8883" target="_blank" rel="noopener"><code>8883</code></a></h2><ul><li>浪漫爱情喜剧 Romantic Comedies <a href="https://netflix.com/browse/genre/5475" target="_blank" rel="noopener"><code>5475</code></a></li><li>最受喜爱的爱情片 Romantic favorites <a href="https://netflix.com/browse/genre/502675" target="_blank" rel="noopener"><code>502675</code></a></li><li>国外爱情电影 Romantic foreign movies <a href="https://netflix.com/browse/genre/7153" target="_blank" rel="noopener"><code>7153</code></a></li><li>热辣爱情电影 Steamy romantic movies <a href="https://netflix.com/browse/genre/35800" target="_blank" rel="noopener"><code>35800</code></a></li><li>新奇的爱情片 Quirky romance <a href="https://netflix.com/browse/genre/36103" target="_blank" rel="noopener"><code>36103</code></a></li><li>爱情题材独立电影 Romantic independent movies <a href="https://netflix.com/browse/genre/9916" target="_blank" rel="noopener"><code>9916</code></a></li><li>浪漫爱情剧情片 Romantic dramas <a href="https://netflix.com/browse/genre/1255" target="_blank" rel="noopener"><code>1255</code></a></li><li>经典爱情电影 Classic romantic movies <a href="https://netflix.com/browse/genre/31273" target="_blank" rel="noopener"><code>31273</code></a></li></ul><h2 id="科幻奇幻片-1492"><a href="#科幻奇幻片-1492" class="headerlink" title="科幻奇幻片 1492"></a>科幻奇幻片 <a href="https://netflix.com/browse/genre/1492" target="_blank" rel="noopener"><code>1492</code></a></h2><ul><li>外星人科幻 Alien Sci-Fi <a href="https://netflix.com/browse/genre/3327" target="_blank" rel="noopener"><code>3327</code></a></li><li>科幻冒险片 Sci-Fi adventure <a href="https://netflix.com/browse/genre/6926" target="_blank" rel="noopener"><code>6926</code></a></li><li>科幻剧情类 Sci-Fi dramas <a href="https://netflix.com/browse/genre/3916" target="_blank" rel="noopener"><code>3916</code></a></li><li>科幻惊悚片 Sci-Fi thrillers <a href="https://netflix.com/browse/genre/11014" target="_blank" rel="noopener"><code>11014</code></a></li><li>行动科幻与奇幻片 Action Sci-Fi &amp; fantasy <a href="https://netflix.com/browse/genre/1568" target="_blank" rel="noopener"><code>1568</code></a></li><li>经典科幻与奇幻片 Classic Sci-Fi &amp; fantasy <a href="https://netflix.com/browse/genre/47147" target="_blank" rel="noopener"><code>47147</code></a></li><li>小众科幻与奇幻片 Cult Sci-Fi &amp; fantasy <a href="https://netflix.com/browse/genre/4734" target="_blank" rel="noopener"><code>4734</code></a></li><li>奇幻类电影 Fantasy movies <a href="https://netflix.com/browse/genre/9744" target="_blank" rel="noopener"><code>9744</code></a></li><li>科幻恐怖电影 Sci-Fi horror movies <a href="https://netflix.com/browse/genre/1694" target="_blank" rel="noopener"><code>1694</code></a></li><li>外国科幻奇幻片 Foreign Sci-Fi &amp; fantasy <a href="https://netflix.com/browse/genre/6485" target="_blank" rel="noopener"><code>6485</code></a></li></ul><h2 id="体育题材电影-4370"><a href="#体育题材电影-4370" class="headerlink" title="体育题材电影 4370"></a>体育题材电影 <a href="https://netflix.com/browse/genre/4370" target="_blank" rel="noopener"><code>4370</code></a></h2><ul><li>武侠电影 Martial Arts Movies <a href="https://netflix.com/browse/genre/8985" target="_blank" rel="noopener"><code>8985</code></a></li><li>棒球题材电影 Baseball movies <a href="https://netflix.com/browse/genre/12339" target="_blank" rel="noopener"><code>12339</code></a></li><li>篮球题材电影 Basketball movies <a href="https://netflix.com/browse/genre/12762" target="_blank" rel="noopener"><code>12762</code></a></li><li>武打、拳击与格斗 Martial arts, boxing &amp; wrestling <a href="https://netflix.com/browse/genre/6695" target="_blank" rel="noopener"><code>6695</code></a></li><li>足球题材电影 Soccer movies <a href="https://netflix.com/browse/genre/12549" target="_blank" rel="noopener"><code>12549</code></a></li><li>橄榄球题材电影 Football movies <a href="https://netflix.com/browse/genre/12803" target="_blank" rel="noopener"><code>12803</code></a></li><li>体育题材喜剧 Sports comedies <a href="https://netflix.com/browse/genre/5286" target="_blank" rel="noopener"><code>5286</code></a></li><li>体育题材纪录片 Sports documentaries <a href="https://netflix.com/browse/genre/180" target="_blank" rel="noopener"><code>180</code></a></li><li>体育题材剧情片 Sports dramas <a href="https://netflix.com/browse/genre/7243" target="_blank" rel="noopener"><code>7243</code></a></li><li>拳击题材电影 Boxing movies <a href="https://netflix.com/browse/genre/12443" target="_blank" rel="noopener"><code>12443</code></a></li><li>运动与健身题材 Sports &amp; Fitness <a href="https://netflix.com/browse/genre/9327" target="_blank" rel="noopener"><code>9327</code></a></li></ul><h2 id="惊悚片-8933"><a href="#惊悚片-8933" class="headerlink" title="惊悚片 8933"></a>惊悚片 <a href="https://netflix.com/browse/genre/8933" target="_blank" rel="noopener"><code>8933</code></a></h2><ul><li>间谍惊悚片 Spy thrillers <a href="https://netflix.com/browse/genre/9147" target="_blank" rel="noopener"><code>9147</code></a></li><li>犯罪惊悚片 Crime thrillers <a href="https://netflix.com/browse/genre/10499" target="_blank" rel="noopener"><code>10499</code></a></li><li>政治惊悚片 Political thrillers <a href="https://netflix.com/browse/genre/10504" target="_blank" rel="noopener"><code>10504</code></a></li><li>心理惊悚片 Psychological thrillers <a href="https://netflix.com/browse/genre/5505" target="_blank" rel="noopener"><code>5505</code></a></li><li>科幻惊悚片 Sci-Fi thrillers <a href="https://netflix.com/browse/genre/11014" target="_blank" rel="noopener"><code>11014</code></a></li><li>热辣惊悚片 Steamy thrillers <a href="https://netflix.com/browse/genre/972" target="_blank" rel="noopener"><code>972</code></a></li><li>动作惊悚片 Action thrillers <a href="https://netflix.com/browse/genre/43048" target="_blank" rel="noopener"><code>43048</code></a></li><li>经典惊悚片 Classic thrillers <a href="https://netflix.com/browse/genre/46588" target="_blank" rel="noopener"><code>46588</code></a></li><li>外国惊悚片 Foreign thrillers <a href="https://netflix.com/browse/genre/10306" target="_blank" rel="noopener"><code>10306</code></a></li><li>惊悚题材独立电影 Independent thrillers <a href="https://netflix.com/browse/genre/3269" target="_blank" rel="noopener"><code>3269</code></a></li><li>黑帮电影 Gangster movies <a href="https://netflix.com/browse/genre/31851" target="_blank" rel="noopener"><code>31851</code></a></li><li>神秘惊悚片 Mysteries <a href="https://netflix.com/browse/genre/9994" target="_blank" rel="noopener"><code>9994</code></a></li><li>超自然题材惊悚片 Supernatural thrillers <a href="https://netflix.com/browse/genre/11140" target="_blank" rel="noopener"><code>11140</code></a></li></ul><h2 id="纪录片-6839"><a href="#纪录片-6839" class="headerlink" title="纪录片 6839"></a>纪录片 <a href="https://netflix.com/browse/genre/6839" target="_blank" rel="noopener"><code>6839</code></a></h2><ul><li>传记纪录片 Biographical documentaries <a href="https://netflix.com/browse/genre/3652" target="_blank" rel="noopener"><code>3652</code></a></li><li>历史题材纪录片 Historical documentaries <a href="https://netflix.com/browse/genre/5349" target="_blank" rel="noopener"><code>5349</code></a></li><li>音乐和音乐会纪录片 Music &amp; concert documentaries <a href="https://netflix.com/browse/genre/90361" target="_blank" rel="noopener"><code>90361</code></a></li><li>犯罪题材纪录片 Crime documentaries <a href="https://netflix.com/browse/genre/9875" target="_blank" rel="noopener"><code>9875</code></a></li><li>政治题材纪录片 Political documentaries <a href="https://netflix.com/browse/genre/7018" target="_blank" rel="noopener"><code>7018</code></a></li><li>科学航海题材纪录片 Science &amp; navature documentaries <a href="https://netflix.com/browse/genre/2595" target="_blank" rel="noopener"><code>2595</code></a></li><li>社会文化题材纪录片 Social &amp; cultural documentaries <a href="https://netflix.com/browse/genre/3675" target="_blank" rel="noopener"><code>3675</code></a></li><li>信仰与精神题材纪录片 Documentaires spirituels <a href="https://netflix.com/browse/genre/2760" target="_blank" rel="noopener"><code>2760</code></a></li><li>军事题材纪录片 Military documentaries <a href="https://netflix.com/browse/genre/4006" target="_blank" rel="noopener"><code>4006</code></a></li><li>体育题材纪录片 Sports documentaries <a href="https://netflix.com/browse/genre/180" target="_blank" rel="noopener"><code>180</code></a></li><li>旅游冒险题材纪录片 Travel &amp; adventure documentaries <a href="https://netflix.com/browse/genre/1159" target="_blank" rel="noopener"><code>1159</code></a></li><li>外国纪录片 Foreign documentaries <a href="https://netflix.com/browse/genre/5161" target="_blank" rel="noopener"><code>5161</code></a></li><li>宗教题材纪录片 Religious documentaries <a href="https://netflix.com/browse/genre/10005" target="_blank" rel="noopener"><code>10005</code></a></li></ul><h2 id="电视节目-剧集-83"><a href="#电视节目-剧集-83" class="headerlink" title="电视节目/剧集 83"></a>电视节目/剧集 <a href="https://netflix.com/browse/genre/83" target="_blank" rel="noopener"><code>83</code></a></h2><ul><li>美食和旅行类电视节目 Food &amp; travel TV <a href="https://netflix.com/browse/genre/72436" target="_blank" rel="noopener"><code>72436</code></a></li><li>科学与自然类电视节目 Science &amp; nature TV <a href="https://netflix.com/browse/genre/52780" target="_blank" rel="noopener"><code>52780</code></a></li><li>英剧 British TV shows <a href="https://netflix.com/browse/genre/52117" target="_blank" rel="noopener"><code>52117</code></a></li><li>经典电视节目 Classic TV shows <a href="https://netflix.com/browse/genre/46553" target="_blank" rel="noopener"><code>46553</code></a></li><li>犯罪电视节目 Crime TV shows <a href="https://netflix.com/browse/genre/26146" target="_blank" rel="noopener"><code>26146</code></a></li><li>小众电视节目 Cult TV shows <a href="https://netflix.com/browse/genre/74652" target="_blank" rel="noopener"><code>74652</code></a></li><li>少儿电视节目 Kids’ TV <a href="https://netflix.com/browse/genre/27346" target="_blank" rel="noopener"><code>27346</code></a></li><li>韩剧 Korean TV shows <a href="https://netflix.com/browse/genre/67879" target="_blank" rel="noopener"><code>67879</code></a></li><li>迷你剧 Miniseries <a href="https://netflix.com/browse/genre/4814" target="_blank" rel="noopener"><code>4814</code></a></li><li>军事题材电视节目 Military TV shows <a href="https://netflix.com/browse/genre/25804" target="_blank" rel="noopener"><code>25804</code></a></li><li>动作冒险类电视节目 TV action &amp; adventure <a href="https://netflix.com/browse/genre/10673" target="_blank" rel="noopener"><code>10673</code></a></li><li>喜剧类电视节目 TV comedies <a href="https://netflix.com/browse/genre/10375" target="_blank" rel="noopener"><code>10375</code></a></li><li>系列纪录片 TV documentaries <a href="https://netflix.com/browse/genre/10105" target="_blank" rel="noopener"><code>10105</code></a></li><li>电视剧 TV dramas <a href="https://netflix.com/browse/genre/11714" target="_blank" rel="noopener"><code>11714</code></a></li><li>恐怖电视节目 TV horror <a href="https://netflix.com/browse/genre/83059" target="_blank" rel="noopener"><code>83059</code></a></li><li>悬疑电视节目 TV mysteries <a href="https://netflix.com/browse/genre/4366" target="_blank" rel="noopener"><code>4366</code></a></li><li>科幻奇幻题材电视剧 TV Sci-Fi &amp; fantasy <a href="https://netflix.com/browse/genre/1372" target="_blank" rel="noopener"><code>1372</code></a></li><li>真人秀电视节目 Reality TV <a href="https://netflix.com/browse/genre/9833" target="_blank" rel="noopener"><code>9833</code></a></li></ul><h2 id="青少年电视剧-60951"><a href="#青少年电视剧-60951" class="headerlink" title="青少年电视剧 60951"></a>青少年电视剧 <a href="https://netflix.com/browse/genre/60951" target="_blank" rel="noopener"><code>60951</code></a></h2><ul><li>青少年喜剧 Teen comedies <a href="https://netflix.com/browse/genre/3519" target="_blank" rel="noopener"><code>3519</code></a></li><li>青少年剧情片 Teen dramas <a href="https://netflix.com/browse/genre/9299" target="_blank" rel="noopener"><code>9299</code></a></li><li>青少年恐怖片 Teen screams <a href="https://netflix.com/browse/genre/52147" target="_blank" rel="noopener"><code>52147</code></a></li></ul><h2 id="儿童-家庭电影-783"><a href="#儿童-家庭电影-783" class="headerlink" title="儿童 家庭电影 783"></a>儿童 家庭电影 <a href="https://netflix.com/browse/genre/783" target="_blank" rel="noopener"><code>783</code></a></h2><ul><li>迪士尼 Disney <a href="https://netflix.com/browse/genre/67673" target="_blank" rel="noopener"><code>67673</code></a></li><li>儿童教育 Education for kids <a href="https://netflix.com/browse/genre/10659" target="_blank" rel="noopener"><code>10659</code></a></li><li>电影灵感来自青年书籍 Films inspirés de livres jeunesse <a href="https://netflix.com/browse/genre/10056" target="_blank" rel="noopener"><code>10056</code></a></li><li>0~2岁电影 Movies for ages 0 to 2 <a href="https://netflix.com/browse/genre/6796" target="_blank" rel="noopener"><code>6796</code></a></li><li>2~4岁电影 Movies for ages 2 to 4 <a href="https://netflix.com/browse/genre/6218" target="_blank" rel="noopener"><code>6218</code></a></li><li>5~7岁电影 Movies for ages 5 to 7 <a href="https://netflix.com/browse/genre/5455" target="_blank" rel="noopener"><code>5455</code></a></li><li>8~10岁电影 Movies for ages 8 to 10 <a href="https://netflix.com/browse/genre/561" target="_blank" rel="noopener"><code>561</code></a></li><li>11~12岁电影 Movies for ages 11 to 12 <a href="https://netflix.com/browse/genre/6962" target="_blank" rel="noopener"><code>6962</code></a></li><li>儿童书籍电影 Movies based on children’s books <a href="https://netflix.com/browse/genre/10056" target="_blank" rel="noopener"><code>10056</code></a></li><li>家庭特色 Family Features <a href="https://netflix.com/browse/genre/51056" target="_blank" rel="noopener"><code>51056</code></a></li><li>电视卡通片 TV Cartoons <a href="https://netflix.com/browse/genre/11177" target="_blank" rel="noopener"><code>11177</code></a></li><li>儿童电视 Kids’ TV <a href="https://netflix.com/browse/genre/27346" target="_blank" rel="noopener"><code>27346</code></a></li><li>儿童音乐 Kids Music <a href="https://netflix.com/browse/genre/52843" target="_blank" rel="noopener"><code>52843</code></a></li><li>动物故事 Animal tales <a href="https://netflix.com/browse/genre/5507" target="_blank" rel="noopener"><code>5507</code></a></li></ul><h2 id="动漫-7424"><a href="#动漫-7424" class="headerlink" title="动漫 7424"></a>动漫 <a href="https://netflix.com/browse/genre/7424" target="_blank" rel="noopener"><code>7424</code></a></h2><ul><li>动漫动作 Anime action <a href="https://netflix.com/browse/genre/2653" target="_blank" rel="noopener"><code>2653</code></a></li><li>动漫剧 Anime dramas <a href="https://netflix.com/browse/genre/452" target="_blank" rel="noopener"><code>452</code></a></li><li>成人动画 Adult animation <a href="https://netflix.com/browse/genre/11881" target="_blank" rel="noopener"><code>11881</code></a></li><li>动物故事 Animal tales <a href="https://netflix.com/browse/genre/5507" target="_blank" rel="noopener"><code>5507</code></a></li><li>幻想动漫 Anime fantasy <a href="https://netflix.com/browse/genre/11146" target="_blank" rel="noopener"><code>11146</code></a></li><li>动漫特色 Anime features <a href="https://netflix.com/browse/genre/3063" target="_blank" rel="noopener"><code>3063</code></a></li><li>动漫恐怖 Anime horror <a href="https://netflix.com/browse/genre/10695" target="_blank" rel="noopener"><code>10695</code></a></li><li>动漫科幻 Anime Sci-Fi <a href="https://netflix.com/browse/genre/2729" target="_blank" rel="noopener"><code>2729</code></a></li><li>动漫系列 Anime series <a href="https://netflix.com/browse/genre/6721" target="_blank" rel="noopener"><code>6721</code></a></li><li>动漫喜剧 Anime comedies <a href="https://netflix.com/browse/genre/9302" target="_blank" rel="noopener"><code>9302</code></a></li></ul><h2 id="独立电影-7077"><a href="#独立电影-7077" class="headerlink" title="独立电影 7077"></a>独立电影 <a href="https://netflix.com/browse/genre/7077" target="_blank" rel="noopener"><code>7077</code></a></h2><ul><li>独立行动和冒险 Independent action &amp; adventure <a href="https://netflix.com/browse/genre/11804" target="_blank" rel="noopener"><code>11804</code></a></li><li>独立喜剧 Independent comedies <a href="https://netflix.com/browse/genre/4195" target="_blank" rel="noopener"><code>4195</code></a></li><li>独立戏剧 Independent dramas <a href="https://netflix.com/browse/genre/384" target="_blank" rel="noopener"><code>384</code></a></li><li>浪漫的独立电影 Romantic independent movies <a href="https://netflix.com/browse/genre/9916" target="_blank" rel="noopener"><code>9916</code></a></li><li>独立惊悚片 Independent thrillers <a href="https://netflix.com/browse/genre/3269" target="_blank" rel="noopener"><code>3269</code></a></li><li>前卫电影 Experimental movies <a href="https://netflix.com/browse/genre/11079" target="_blank" rel="noopener"><code>11079</code></a></li></ul><h2 id="外国电影-7462"><a href="#外国电影-7462" class="headerlink" title="外国电影 7462"></a>外国电影 <a href="https://netflix.com/browse/genre/7462" target="_blank" rel="noopener"><code>7462</code></a></h2><ul><li>外国独立冒险片 Foreign action &amp; adventure <a href="https://netflix.com/browse/genre/11828" target="_blank" rel="noopener"><code>11828</code></a></li><li>经典外国电影 Classic Foreign Movies <a href="https://netflix.com/browse/genre/32473" target="_blank" rel="noopener"><code>32473</code></a></li><li>外国喜剧 Foreign comedies <a href="https://netflix.com/browse/genre/4426" target="_blank" rel="noopener"><code>4426</code></a></li><li>外国纪录片 Foreign documentaries <a href="https://netflix.com/browse/genre/5161" target="_blank" rel="noopener"><code>5161</code></a></li><li>外国电视剧 Foreign dramas <a href="https://netflix.com/browse/genre/2150" target="_blank" rel="noopener"><code>2150</code></a></li><li>外国同性恋电影 Foreign gay &amp; lesbian movies <a href="https://netflix.com/browse/genre/8243" target="_blank" rel="noopener"><code>8243</code></a></li><li>外国恐怖电影 Foreign horror movies <a href="https://netflix.com/browse/genre/8654" target="_blank" rel="noopener"><code>8654</code></a></li><li>外国科幻奇幻电影 Foreign Sci-Fi &amp; fantasy <a href="https://netflix.com/browse/genre/6485" target="_blank" rel="noopener"><code>6485</code></a></li><li>外国惊悚片 Foreign thrillers <a href="https://netflix.com/browse/genre/10306" target="_blank" rel="noopener"><code>10306</code></a></li><li>外国浪漫爱情电影 Romantic foreign movies <a href="https://netflix.com/browse/genre/7153" target="_blank" rel="noopener"><code>7153</code></a></li><li>亚洲动作片 Asian action movies <a href="https://netflix.com/browse/genre/77232" target="_blank" rel="noopener"><code>77232</code></a></li><li>德国电影 German movies <a href="https://netflix.com/browse/genre/58886" target="_blank" rel="noopener"><code>58886</code></a></li><li>拉丁美洲电影 Latin american movies <a href="https://netflix.com/browse/genre/1613" target="_blank" rel="noopener"><code>1613</code></a></li><li>非洲电影 African Movies <a href="https://netflix.com/browse/genre/3761" target="_blank" rel="noopener"><code>3761</code></a></li><li>英国电影 British movies <a href="https://netflix.com/browse/genre/10757" target="_blank" rel="noopener"><code>10757</code></a></li><li>澳大利亚电影 Australian movies <a href="https://netflix.com/browse/genre/5230" target="_blank" rel="noopener"><code>5230</code></a></li><li>比利时电影 Belgian movies <a href="https://netflix.com/browse/genre/262" target="_blank" rel="noopener"><code>262</code></a></li><li>华语电影 Chinese movies <a href="https://netflix.com/browse/genre/3960" target="_blank" rel="noopener"><code>3960</code></a></li><li>韩国电影 Korean movies <a href="https://netflix.com/browse/genre/5685" target="_blank" rel="noopener"><code>5685</code></a></li><li>西班牙电影 Spanish movies <a href="https://netflix.com/browse/genre/58741" target="_blank" rel="noopener"><code>58741</code></a></li><li>法国电影 French movies <a href="https://netflix.com/browse/genre/58807" target="_blank" rel="noopener"><code>58807</code></a></li><li>希腊电影 Greek movies <a href="https://netflix.com/browse/genre/61115" target="_blank" rel="noopener"><code>61115</code></a></li><li>印度电影 Indian movies <a href="https://netflix.com/browse/genre/10463" target="_blank" rel="noopener"><code>10463</code></a></li><li>爱尔兰电影 Irish movies <a href="https://netflix.com/browse/genre/58750" target="_blank" rel="noopener"><code>58750</code></a></li><li>意大利电影 Italian Movies <a href="https://netflix.com/browse/genre/8221" target="_blank" rel="noopener"><code>8221</code></a></li><li>日本电影 Japanese movies <a href="https://netflix.com/browse/genre/10398" target="_blank" rel="noopener"><code>10398</code></a></li><li>荷兰电影 Dutch movies <a href="https://netflix.com/browse/genre/10606" target="_blank" rel="noopener"><code>10606</code></a></li><li>新西兰电影 New Zealand movies <a href="https://netflix.com/browse/genre/63782" target="_blank" rel="noopener"><code>63782</code></a></li><li>俄罗斯电影 Russian movies <a href="https://netflix.com/browse/genre/11567" target="_blank" rel="noopener"><code>11567</code></a></li><li>斯堪的纳维亚电影 Scandinavian movies <a href="https://netflix.com/browse/genre/9292" target="_blank" rel="noopener"><code>9292</code></a></li><li>中东电影 Middle Eastern movies <a href="https://netflix.com/browse/genre/5875" target="_blank" rel="noopener"><code>5875</code></a></li><li>东南亚电影 Southeast Asian Movies <a href="https://netflix.com/browse/genre/9196" target="_blank" rel="noopener"><code>9196</code></a></li><li>东欧电影 Eastern European movies <a href="https://netflix.com/browse/genre/5254" target="_blank" rel="noopener"><code>5254</code></a></li><li>土耳其电影 Turkish movies <a href="https://netflix.com/browse/genre/1133133" target="_blank" rel="noopener"><code>1133133</code></a></li></ul><h2 id="音乐-1701"><a href="#音乐-1701" class="headerlink" title="音乐 1701"></a>音乐 <a href="https://netflix.com/browse/genre/1701" target="_blank" rel="noopener"><code>1701</code></a></h2><ul><li>世界音乐会 World music concerts <a href="https://netflix.com/browse/genre/2856" target="_blank" rel="noopener"><code>2856</code></a></li><li>摇滚与流行音乐主题 Rock &amp; pop concerts <a href="https://netflix.com/browse/genre/3278" target="_blank" rel="noopener"><code>3278</code></a></li><li>都市与舞蹈音乐主题 Urban &amp; dance concerts <a href="https://netflix.com/browse/genre/9472" target="_blank" rel="noopener"><code>9472</code></a></li><li>少儿音乐主题 Kids music <a href="https://netflix.com/browse/genre/52843" target="_blank" rel="noopener"><code>52843</code></a></li><li>乡村、西部/民谣音乐会 Country &amp; western/folk <a href="https://netflix.com/browse/genre/1105" target="_blank" rel="noopener"><code>1105</code></a></li><li>轻松爵士乐 Jazz &amp; easy listening <a href="https://netflix.com/browse/genre/10271" target="_blank" rel="noopener"><code>10271</code></a></li><li>拉丁美洲音乐 Latin music <a href="https://netflix.com/browse/genre/10741" target="_blank" rel="noopener"><code>10741</code></a></li><li>音乐剧 Musicals <a href="https://netflix.com/browse/genre/13335" target="_blank" rel="noopener"><code>13335</code></a></li><li>经典音乐剧 Classic musicals <a href="https://netflix.com/browse/genre/32392" target="_blank" rel="noopener"><code>32392</code></a></li><li>迪斯尼音乐剧 Disney musicals <a href="https://netflix.com/browse/genre/59433" target="_blank" rel="noopener"><code>59433</code></a></li><li>娱乐业题材音乐剧 Showbiz musicals <a href="https://netflix.com/browse/genre/13573" target="_blank" rel="noopener"><code>13573</code></a></li><li>舞台音乐剧 Stage musicals <a href="https://netflix.com/browse/genre/55774" target="_blank" rel="noopener"><code>55774</code></a></li></ul><h2 id="圣诞节🎅"><a href="#圣诞节🎅" class="headerlink" title="圣诞节🎅"></a>圣诞节🎅</h2><ul><li>适合全家观看的圣诞电影 Family-friendly christmas films <a href="https://netflix.com/browse/genre/1394522" target="_blank" rel="noopener"><code>1394522</code></a></li><li>积极向上的圣诞题材儿童家庭电影 Feel-good christmas children &amp; family films <a href="https://netflix.com/browse/genre/1475066" target="_blank" rel="noopener"><code>1475066</code></a></li><li>浪漫的圣诞电影 Romantic christmas films <a href="https://netflix.com/browse/genre/1394527" target="_blank" rel="noopener"><code>1394527</code></a></li><li>圣诞题材儿童家庭电影 Christmas children &amp; family films <a href="https://netflix.com/browse/genre/1474017" target="_blank" rel="noopener"><code>1474017</code></a></li><li>适合5-7岁的圣诞节少儿家庭电影 Christmas children &amp; family films for ages 5 to 7 <a href="https://netflix.com/browse/genre/1477201" target="_blank" rel="noopener"><code>1477201</code></a></li><li>适合8-10岁的圣诞节少儿家庭电影 Christmas children &amp; family films for ages 8 to 10 <a href="https://netflix.com/browse/genre/1477204" target="_blank" rel="noopener"><code>1477204</code></a></li><li>适合10-12岁的圣诞节少儿家庭电影 Christmas children &amp; family films for ages 11 to 12 <a href="https://netflix.com/browse/genre/1477206" target="_blank" rel="noopener"><code>1477206</code></a></li><li>滑稽的圣诞节少儿家庭电影 Goofy christmas children &amp; family films <a href="https://netflix.com/browse/genre/1475071" target="_blank" rel="noopener"><code>1475071</code></a></li><li>1990年代圣诞节少儿家庭电影 Christmas children &amp; family films from the 1990s <a href="https://netflix.com/browse/genre/1476024" target="_blank" rel="noopener"><code>1476024</code></a></li><li>英国圣诞节少儿家庭电影 British christmas children &amp; family Ffilms <a href="https://netflix.com/browse/genre/1527064" target="_blank" rel="noopener"><code>1527064</code></a></li><li>欧洲圣诞节少儿家庭电影 European christmas children &amp; family films <a href="https://netflix.com/browse/genre/1527063" target="_blank" rel="noopener"><code>1527063</code></a></li><li>加拿大圣诞节少儿家庭电影 Canadian christmas children &amp; family films <a href="https://netflix.com/browse/genre/1721544" target="_blank" rel="noopener"><code>1721544</code></a></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>艺术电影 Art House Movies <a href="https://netflix.com/browse/genre/29764" target="_blank" rel="noopener"><code>29764</code></a></li><li>史诗题材电影 Epics <a href="https://netflix.com/browse/genre/52858" target="_blank" rel="noopener"><code>52858</code></a></li><li>帮派电影 Gangster movies <a href="https://netflix.com/browse/genre/31851" target="_blank" rel="noopener"><code>31851</code></a></li><li>奇幻题材电影 Fantasy movies <a href="https://netflix.com/browse/genre/9744" target="_blank" rel="noopener"><code>9744</code></a></li><li>黑色电影 Film noir <a href="https://netflix.com/browse/genre/7687" target="_blank" rel="noopener"><code>7687</code></a></li><li>前卫电影 Experimental movies <a href="https://netflix.com/browse/genre/11079" target="_blank" rel="noopener"><code>11079</code></a></li><li>信仰与精神题材电影 Faith &amp; spirituality movies <a href="https://netflix.com/browse/genre/52804" target="_blank" rel="noopener"><code>52804</code></a></li><li>魔鬼撒旦题材恐怖片 Satanic stories <a href="https://netflix.com/browse/genre/6998" target="_blank" rel="noopener"><code>6998</code></a></li><li>讽刺滑稽 Satires <a href="https://netflix.com/browse/genre/4922" target="_blank" rel="noopener"><code>4922</code></a></li><li>单口喜剧 Stand-up comedies <a href="https://netflix.com/browse/genre/11559" target="_blank" rel="noopener"><code>11559</code></a></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://digitalimmigrant.org/16" target="_blank" rel="noopener">https://digitalimmigrant.org/16</a></li></ul>]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Netflix </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据移民漂流记——如何进行iCloud转区操作]]></title>
      <url>/posts/How-to-change-icloud-region.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/china-eye.jpg?imageslim" alt="china-eye"></p><a id="more"></a><h2 id="为什么要转区"><a href="#为什么要转区" class="headerlink" title="为什么要转区"></a>为什么要转区</h2><p><img src="https://img.i7years.com/blog/change-region-107.jpg" alt="change-region-107"></p><p>具体原因大家都心知肚明，在天朝，你懂的，个人数据隐私安全一丁点的保障都没有。通过iCloud监控一个人实在太彻底了，你的实时地理位置、你的通讯录联系人、你最新拍的照片、你的备忘录、你的应用程序里记录的数据、你的邮件等等，全都可以实时监控。</p><p>自从云上贵州托管iCloud之后，就暴露出了Apple ID被盗，大量垃圾广告短信等等问题，大家可自行Google一下相关新闻。</p><p>拿着我们的数据在背后还干了哪些不为人知的事情，可能要过很多年之后才能揭晓。</p><h2 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h2><ul><li><a href="https://wangwei.one/posts/How-to-register-and-use-the-US-Apple-ID.html">美区AppleID</a></li><li><a href="https://wangwei.one/posts/How-to-register-for-the-US-PayPal-and-bind-the-US-Apple-ID.html">美区PayPal</a> （非必须，可以购买 <a href="https://www.apple.com/us/shop/gift-cards" target="_blank" rel="noopener">Gift Card</a> 代替充值）</li><li><a href="https://wangwei.one/posts/build-your-own-vpn-by-shadowsocks-or-rixcloud.html">美区VPN</a> ，开启全局代理。</li><li>美区AppleID的iCloud存储空间升级为50GB（$0.99/month）。支付方式可以用美区PayPal或Gift Card，看你哪个方便。（美区PayPal风控较严，账户被限制的几率很大，建议使用Gift Card来充值。）</li></ul><blockquote><p>注意：不建议直接更换国区Apple ID的地域改为美区，建议迁移到新建的美区AppleID上</p></blockquote><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>停用 iCloud 转入新 ID 的过程是痛苦的，在开启新 ID 使用前你需要将老 ID 里的照片、邮件、通讯录、日历、iCloud 云盘、备忘录、提醒事项等等各种数据转移过来，有些不能转移，需要先导出备份到本地，然后同步到新 ID 上才行。</p><p>在 macOS 上「系统偏好设置 - iCloud - 存储管理」可以查看目前iCloud中存储了使用情况，例如：</p><p><img src="https://img.i7years.com/blog/change-region-101.png" alt="change-region-101"></p><p>在进行数据转移、备份等各种工作前，先将国区 ID 的 iCloud 付费方案取消，<a href="https://support.apple.com/zh-cn/HT207594" target="_blank" rel="noopener">降级会免费的 5GB 方案</a> ，这中间还有一个充分的数据转移时间，过了截图中提示的付费方案结束时间，多余的数据会被删除，在 iPhone 上直接选择退出当前 iCloud 账户后，系统会提示是否保留「提醒事项」、「通讯录」、「Safari 浏览器」的数据副本在 iPhone，可以选择保留，这样登录新 ID 时可自动合并进去。</p><p><img src="https://img.i7years.com/blog/change-region-106.png" alt="change-region-106"></p><h2 id="照片"><a href="#照片" class="headerlink" title="照片"></a>照片</h2><h4 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h4><p>在macOS上导出照片最为方便，在「照片」应用上全选所有照片，然后选择「文件 – 导出 – 导出照片」，选择一个本地保存目录后进行导出即可。</p><p>按原文件格式导出</p><p><img src="https://img.i7years.com/blog/change-region-102.png" alt="change-region-102"></p><p><img src="https://img.i7years.com/blog/change-region-103.png" alt="change-region-103"></p><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>将国区Apple ID中的照片全部清空。</p><h5 id="删除iCloud中的照片数据"><a href="#删除iCloud中的照片数据" class="headerlink" title="删除iCloud中的照片数据"></a>删除iCloud中的照片数据</h5><p>在 macOS 上「系统偏好设置 - iCloud - 存储管理」，选择「iCloud Photos」，执行「Disable and Delete」。你有30 天的时间来下载你的照片以及视频。</p><p><img src="https://img.i7years.com/blog/change-region-105.png" alt="change-region-105"></p><p>你会收到如下邮件通知</p><blockquote><p>原格式，全分辨率的照片和视频并未存储在你的设备上。你需要在30天之内下载它们到你本地的设备上。</p></blockquote><p><img src="https://img.i7years.com/blog/change-region-110.png" alt="change-region-110"></p><h5 id="删除本地照片库"><a href="#删除本地照片库" class="headerlink" title="删除本地照片库"></a>删除本地照片库</h5><p>将本地的照片库「Photos Library.photoslibrary」删除掉。</p><p><img src="https://img.i7years.com/blog/change-region-104.png" alt="change-region-104"></p><p>重新打开「Photos 」，会提示你重新创建一个照片库，按照它的指引默认创建一个即可。然后「Photos - Preferences - General」将新创建的照片库设置为系统默认照片库「Use as System Photo Library」。</p><p><img src="https://img.i7years.com/blog/change-region-113.png" alt="change-region-113"></p><h4 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h4><p>进入「System Preferences - iCloud」，登录美区Apple ID。</p><p>导入新 ID 的 iCloud 照片图库时直接选择「导入」，或是直接从本地目录全选导出的图片数据直接拖入「照片」应用，整个过程还是非常流畅的。</p><p><img src="https://img.i7years.com/blog/change-region-111.png" alt="change-region-111"></p><p>在 iPhone、iPad 上操作这些步骤也很简单，在 iCloud 里打开「照片」目录，在关闭「iCloud 照片图库」前选择「下载并保留原件」，这样所有图片会被下载到 iPhone 本地（前提是你的设备容量足够，16GB困难些…），然后到 iCloud 存储空间里进入「照片」一项，选择「停用并删除」。</p><p><img src="https://img.i7years.com/blog/change-region-04.jpg" alt="img"></p><p>操作后你有 30 天的时间在随时下载照片，过后自动删除。最后使用新 ID 登录设备即可，自动会上传本地照片到新 ID（别忘了打开 iCloud 照片图库同步开关）</p><h2 id="iBooks"><a href="#iBooks" class="headerlink" title="iBooks"></a>iBooks</h2><h4 id="备份-1"><a href="#备份-1" class="headerlink" title="备份"></a>备份</h4><p>iBooks上没有类似于「照片」的导出操作，我使用的是手动的方式，将iBooks中的epub全部拖拽到本地进行备份。</p><h4 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h4><p>删除iCloud中的iBooks数据</p><p><img src="https://img.i7years.com/blog/change-region-108.png" alt="change-region-108"></p><h4 id="导入-1"><a href="#导入-1" class="headerlink" title="导入"></a>导入</h4><p>登录美区Apple ID，将备份的epub重新拖拽到iBooks中去。</p><h2 id="邮件"><a href="#邮件" class="headerlink" title="邮件"></a>邮件</h2><p>其实「照片」数据的搬家并不算最麻烦的，最费时间费精力的是「邮件」，国区 iCloud 被接管后，你的 iCloud 邮箱没有任何隐私，用官网的话说就是被「约束」，所以这个邮箱也不能用了，必须将邮件导出后全部删除，只是后续你需要到相关的网站、APP里将订阅邮箱换一下。</p><p>移动、备份 iCloud 邮件需要在 macOS 上操作，需要在 OS X v10.7.5 或更高版本里打开“邮件”应用操作，两种方式可选：</p><h3 id="将电子邮件从-iCloud-移动或拷贝到-Mac-本地（以下步骤摘自官网教程）"><a href="#将电子邮件从-iCloud-移动或拷贝到-Mac-本地（以下步骤摘自官网教程）" class="headerlink" title="将电子邮件从 iCloud 移动或拷贝到 Mac 本地（以下步骤摘自官网教程）"></a>将电子邮件从 iCloud 移动或拷贝到 Mac 本地（以下步骤摘自官网教程）</h3><ul><li>1 在“邮件”中，选取“邮箱”&gt;“新邮箱”。</li><li>2 此时将打开“新邮箱”对话框。从“位置”弹出式菜单中选取“我的 Mac 上”，然后输入新邮箱的名称。点按“好”。</li><li>3 在边栏的邮箱列表中选择您的 iCloud 收件箱，然后选择要移动的邮件。</li><li>4 要移动邮件，请将所选（全选）邮件拖移到新邮箱。或选取“邮件”&gt;“移到”&gt; 您的新邮箱。</li><li>5 要拷贝邮件，请在将所选邮件拖移到新邮箱的同时按住 Option 键。或选取“邮件”&gt;“拷贝到”&gt; 您的新邮箱。</li></ul><h3 id="直接将整个-iCloud-邮箱备份后（包括邮箱中的所有邮件和文件夹），然后导出到本地，形成一个以「INBOX-partial-mbox」命名的备份文件。（以下步骤摘自官网教程）"><a href="#直接将整个-iCloud-邮箱备份后（包括邮箱中的所有邮件和文件夹），然后导出到本地，形成一个以「INBOX-partial-mbox」命名的备份文件。（以下步骤摘自官网教程）" class="headerlink" title="直接将整个 iCloud 邮箱备份后（包括邮箱中的所有邮件和文件夹），然后导出到本地，形成一个以「INBOX.partial.mbox」命名的备份文件。（以下步骤摘自官网教程）"></a>直接将整个 iCloud 邮箱备份后（包括邮箱中的所有邮件和文件夹），然后导出到本地，形成一个以「INBOX.partial.mbox」命名的备份文件。（以下步骤摘自官网教程）</h3><ul><li>1 在边栏的邮箱列表中选择您的 iCloud 收件箱。</li><li>2 选取“邮箱”&gt;“导出邮箱”。</li><li>3 选取该 mbox 归档的目标文件夹，然后点按“选取”以进行存储。</li></ul><p><img src="https://img.i7years.com/blog/change-region-05.jpg" alt="img"></p><h2 id="iTunes-购买项目"><a href="#iTunes-购买项目" class="headerlink" title="iTunes 购买项目"></a>iTunes 购买项目</h2><p>其实官网还提供了 iTunes 购买项目的备份和恢复，但我还是计划依然留在国区 Apple Music，所以这部分就不折腾了。感兴趣的朋友可以看看<a href="https://support.apple.com/zh-cn/HT201625" target="_blank" rel="noopener">官网的教程</a>。</p><h2 id="日历"><a href="#日历" class="headerlink" title="日历"></a>日历</h2><p>Apple 的日历我很少使用，日历的数据导出可以从 Mac 或 iCloud.com 里完成：</p><h3 id="在-Mac-上导出日历"><a href="#在-Mac-上导出日历" class="headerlink" title="在 Mac 上导出日历"></a>在 Mac 上导出日历</h3><ul><li>1 在“日历”中，点按日历的名称。如果您没有看到日历，请点按“日历”。</li><li>2 选取“文件”&gt;“导出”&gt;“导出”。</li><li>3 为文件选取一个位置，然后点按“导出”。</li></ul><h3 id="从-iCloud-com-下载日历"><a href="#从-iCloud-com-下载日历" class="headerlink" title="从 iCloud.com 下载日历"></a>从 iCloud.com 下载日历</h3><ul><li>1 使用 Apple ID 登录 iCloud.com，打开“日历”。</li><li>2 公开共享日历。</li><li>3 拷贝共享日历的 URL，然后将它粘贴到浏览器的地址栏中。请勿按下 Enter 或 Return 键。</li><li>4 将“webcal”更改为“http”，然后按下 Enter 或 Return 键。ICS 文件将下载到您的默认下载位置。</li><li>5 将日历添加到日历客户端，如 Mac 上的“日历”或 Windows 电脑上的 Outlook。</li><li>6 停止共享日历。</li></ul><h2 id="备忘录"><a href="#备忘录" class="headerlink" title="备忘录"></a>备忘录</h2><p>备忘录的情况比较特殊，不会和 Safari 浏览器，通讯录那样自动保存为副本留在设备上，需要从 iCloud 目录里将所有的备忘录全选后移动到「我的 iPhone 」下属文件夹才行，等登录新 ID 后再将其移回 iCloud 目录即可。</p><p><img src="https://img.i7years.com/blog/change-region-06.jpg" alt="img"></p><h2 id="其他项目"><a href="#其他项目" class="headerlink" title="其他项目"></a>其他项目</h2><p>文章开头曾提到了像「提醒事项」、「通讯录」、「Safari 浏览器」这种数据是可以平滑过度到新 iCloud ID 上的，但是如果你想将他们导出到本地设备归档，可以用 Mac 试试：</p><h3 id="提醒事项"><a href="#提醒事项" class="headerlink" title="提醒事项"></a>提醒事项</h3><p>在 Mac 上导出“提醒事项”的副本：</p><ul><li>1 打开“提醒事项”。</li><li>2 前往要导出的提醒事项列表。</li><li>3 选取“文件”&gt;“导出”。</li><li>4 输入名称，选取一个位置，然后点按“导出”。</li></ul><h3 id="通讯录"><a href="#通讯录" class="headerlink" title="通讯录"></a>通讯录</h3><p>通讯录导出有两个方式，一个是在 Mac 上的 「通讯录」应用上操作：</p><h4 id="在-Mac-上导出联系人"><a href="#在-Mac-上导出联系人" class="headerlink" title="在 Mac 上导出联系人"></a>在 Mac 上导出联系人</h4><ul><li>1 打开“通讯录”。</li><li>2 选取“显示”&gt;“显示群组”。</li><li>3 在“群组”列表中选择“所有联系人”。</li><li>4 点按“通讯录”列表中的某个联系人。</li><li>5 选取“编辑”&gt;“全选”以选择要导出的所有名片。</li><li>6 选取“文件”&gt;“导出”&gt;“导出 vCard”。</li><li>7 选取您要存储文件的位置，然后点按“存储”。</li></ul><h4 id="另一个是在-iCloud-com-上的“通讯录”导出虚拟名片，即-vCard："><a href="#另一个是在-iCloud-com-上的“通讯录”导出虚拟名片，即-vCard：" class="headerlink" title="另一个是在 iCloud.com 上的“通讯录”导出虚拟名片，即 vCard："></a>另一个是在 iCloud.com 上的“通讯录”导出虚拟名片，即 vCard：</h4><ul><li>1 从联系人列表中选择一个或多个联系人。</li><li>2 点按边栏中的“操作”弹出式菜单 ￼，然后选取“导出 vCard”；如果您选择多个联系人，“通讯录”会导出一个包含所有联系人的 vCard。</li></ul><h2 id="Safari"><a href="#Safari" class="headerlink" title="Safari"></a>Safari</h2><h3 id="在-Mac-上导出“Safari-浏览器”书签的副本："><a href="#在-Mac-上导出“Safari-浏览器”书签的副本：" class="headerlink" title="在 Mac 上导出“Safari 浏览器”书签的副本："></a>在 Mac 上导出“Safari 浏览器”书签的副本：</h3><ul><li>1 选取“文件”&gt;“导出书签”。</li><li>2 选取您要导出文件的位置，然后点按“存储”。除非您进行更改，否则文件名将为“Safari 浏览器”Bookmarks.html”。</li></ul><h3 id="Safari-密钥"><a href="#Safari-密钥" class="headerlink" title="Safari 密钥"></a>Safari 密钥</h3><p>在 iCloud 里将钥匙串关闭，并选择将数据保留在本机。</p><h2 id="iCloud-云盘"><a href="#iCloud-云盘" class="headerlink" title="iCloud 云盘"></a>iCloud 云盘</h2><p>iCloud 云盘下存储了许多第三方应用接通云盘后保存在其中的数据，在 Mac 上退出国区 iCloud 账户时可将其云盘数据归档到 Mac 本地硬盘，登录新 ID 后再将其移动（或复制）到新 ID 的云盘里即可。</p><h2 id="Apple-Pay-卡片信息"><a href="#Apple-Pay-卡片信息" class="headerlink" title="Apple Pay 卡片信息"></a>Apple Pay 卡片信息</h2><p>在停用国区 iCloud 时别忘了将「钱包」里的 Apple Pay 支付卡片信息，美区 ID 里也可以添加大陆的各种卡哦。</p><h2 id="扫尾工作"><a href="#扫尾工作" class="headerlink" title="扫尾工作"></a>扫尾工作</h2><p>以上照片、邮件、通讯录、日历、iCloud 云盘、备忘录、提醒事项各种数据转移也好，备份导出也好后，还没有完事，仔细想想，看看 iPhone 上的 iCloud 数据还发现里面的「iCloud 储存空间 – 备份」一项里还有各种认证 iDevice 设备的备份数据以及各种第三方应用连接 iCloud 保存的数据都需要一一删除才行。</p><p><img src="https://pix.waerfa.com/ajg8a.jpg" alt="img"></p><p>全部完成后用新的 Apple ID 登录设备，将留在 iPhone 上的国区 ID 各种副本数据合并至新 ID 上即可。说实话，整个转区的工作非常耗费精力，先是数据的备份和转移，而且原来国区 App Store、Apple Music 又用了这么长的时间，许多应用游戏以及专辑都舍不得丢下，美区 Apple ID 下 App Store 用国区 Apple ID 登录与美区 iCloud 并行运行不知道会不会被苹果叫停，如果必须得一致，到时候还得将 Store 迁入美区，真的是感觉自己像一个难民，一个数字时代的难民，为了安全和生存不得不进行迁徙。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.waerfa.com/refugee-migration-of-digital-times" target="_blank" rel="noopener">https://www.waerfa.com/refugee-migration-of-digital-times</a></li><li><a href="https://support.apple.com/zh-cn/HT204055" target="_blank" rel="noopener">https://support.apple.com/zh-cn/HT204055</a></li><li><a href="https://www.douban.com/note/653557027/" target="_blank" rel="noopener">https://www.douban.com/note/653557027/</a></li></ul>]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> freedom </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据移民漂流记——如何注册并使用Google Voice]]></title>
      <url>/posts/How-to-register-and-use-the-Google-Voice.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/sunset-sky-afterglow-dawn-sunrise-red-sky-at-morning-1437371-pxhere.com.jpg?imageslim" alt=""></p><p>获得一个长期可用、完全属于自己的美区手机号十分有必要。<a href="https://wangwei.one/posts/How-to-register-for-the-US-PayPal-and-bind-the-US-Apple-ID.html">注册美区PayPal</a> , <a href="https://wangwei.one/posts/How-to-register-and-use-the-US-Apple-ID.html">注册美区AppleId</a> , 注册Google账号等互联网服务，需要提升账户安全性（账户异常需绑定手机号增加安全性），两步验证也需要手机号。提供美国虚拟号码的服务有很多，但是稳定且方便实惠的只有 Google Voice 一个。本文介绍 Google Voice 的获取，绑定，充值，保留等方案。</p><a id="more"></a><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><ul><li>Google账号</li><li>可以代理到美国的VPN（ <a href="https://wangwei.one/posts/build-your-own-vpn-by-shadowsocks-or-rixcloud.html">指南</a> ），在注册Google Voice时，请保证VPN为<strong>全局代理</strong>模式。</li></ul><h2 id="Google-Voice-简介"><a href="#Google-Voice-简介" class="headerlink" title="Google Voice 简介"></a>Google Voice 简介</h2><p><a href="https://voice.google.com/" target="_blank" rel="noopener">Google Voice</a> 即谷歌之音，是由Google推出的一种电话服务，能够将个人所用的众多电话号码集中成一个美国号码，同时谷歌提供许多增值服务。</p><p>Google Voice的服务就是以一个谷歌提供给你的免费美国电话号码，或是自己付费指定的号码，来整合你生活当中所有会接触到的电话，如家里、办公室、手机等。</p><p>谷歌在官方网站上提供了短片说明：“当有人打电话给你，而且他们不必考虑该打家里的号码、办公室的号码，还是手机。而拥有谷歌号码的你，可以决定哪支电话该响。”</p><h3 id="有哪些功能"><a href="#有哪些功能" class="headerlink" title="有哪些功能"></a>有哪些功能</h3><ol><li>Google Voice语音信箱使用起来就象电子邮件一样，把语音信箱的内容传译成文字，使你可以阅读，并能定制问候。</li><li><strong>美加电话短信均免费</strong>，并提供非常便宜地打国际长途电话。</li><li>收到留言后会发电子邮件或短信通知你，可以下载分享留言。</li><li>使用一个号码管理你所有的电话号码。</li><li>拦截你不想接听的电话，让它直接进语音信箱。</li><li>可以在线录音及保存通话。</li></ol><h3 id="收费吗"><a href="#收费吗" class="headerlink" title="收费吗"></a>收费吗</h3><p>Google Voice正常使用是免费的，不充值的情况下收短信完全免费，向美加打电话和发短信免费。打电话到国际其它区收费，但费用非常低，大家可以到 <a href="https://www.google.com/voice/b/0/rates?hl=zh-CN" target="_blank" rel="noopener">谷歌官网</a> 查询。</p><h2 id="Google-Voice-获取"><a href="#Google-Voice-获取" class="headerlink" title="Google Voice 获取"></a>Google Voice 获取</h2><p>拥有美国实体号码的情况下，可以直接验证获取一个 Google voice 虚拟号码。现在流行使用 <a href="https://www.lycamobile.us/en/" target="_blank" rel="noopener">lycamobile</a> 实体卡注册Google voice。</p><p><strong>推荐</strong>上淘宝购买一个 lycamobile实体卡(美国)，然后用它去绑定一个Google voice。一个lycamobile只能绑定一个Google voice，成功率高，封号风险极低。</p><blockquote><p>我购买的 <a href="https://shop136675829.taobao.com/shop/view_shop.htm?shop_id=136675829" target="_blank" rel="noopener">淘宝店铺</a></p></blockquote><p><strong>不推荐</strong> 方式：</p><blockquote><p>网上的很多教程都是告诉你直接去淘宝购买。购买会获得一个 Google 账号 和其中含有的 Google voice 手机号，推荐购买后转移到自己的 Google 账号下。这种情况很容易导致自己的Google账号被封。</p><p><a href="https://www.googlevoice.cn/transfer-gv-or-questions/" target="_blank" rel="noopener">https://www.googlevoice.cn/transfer-gv-or-questions/</a></p><p>使用一些虚拟号码服务商来生成Google Voice，现在已经基本行不通了。例如：<a href="https://www.textnow.com/" target="_blank" rel="noopener">https://www.textnow.com</a></p></blockquote><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p><img src="https://img.i7years.com/blog/reg-google-voice-01.png" alt="reg-google-voice-01"></p><h3 id="选择号码"><a href="#选择号码" class="headerlink" title="选择号码"></a>选择号码</h3><p>点击 Choose number：</p><p><img src="https://img.i7years.com/blog/reg-google-voice-02.png" alt="reg-google-voice-02"></p><p>输入 <a href="https://simple.wikipedia.org/wiki/List_of_U.S._states" target="_blank" rel="noopener">州及城市</a> ，例如 <code>New York,NY</code>，然后选择一个你喜欢的号码</p><blockquote><p>关于城市的选择，说明一下：</p><ul><li>最好选择美国免税州的城市（ <a href="https://www.thebalance.com/states-without-a-sales-tax-3193305" target="_blank" rel="noopener">免税州</a> ）。</li><li>与 <a href="https://www.fakeaddressgenerator.com/World/us_address_generator" target="_blank" rel="noopener">生成美国虚假身份证明</a> 的城市信息保持一致。这个身份会在 <a href="https://wangwei.one/posts/How-to-register-for-the-US-PayPal-and-bind-the-US-Apple-ID.html">注册美区 PayPal</a> , <a href="https://wangwei.one/posts/How-to-register-and-use-the-US-Apple-ID.html">注册美区AppleId</a> 时用到。</li></ul><p>所谓，造假也要造的真一点。</p></blockquote><p><img src="https://img.i7years.com/blog/reg-google-voice-03.png" alt="reg-google-voice-03"></p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p><img src="https://img.i7years.com/blog/reg-google-voice-04.png" alt="reg-google-voice-04"></p><p>输入你所购买的 lycamobile 号码</p><p><img src="https://img.i7years.com/blog/reg-google-voice-05.png" alt="reg-google-voice-05"></p><p>输入接收到的验证码</p><p><img src="https://img.i7years.com/blog/reg-google-voice-06.png" alt="reg-google-voice-06"></p><p>点击 Finish，大功告成。</p><h2 id="Google-voice-的用处"><a href="#Google-voice-的用处" class="headerlink" title="Google voice 的用处"></a>Google voice 的用处</h2><ul><li><a href="https://digitalimmigrant.org/171" target="_blank" rel="noopener">注册美区 PayPal </a>可用于验证美国手机号。</li><li>使用美国手机号注册 Telegram，可以减少账号被限制的风险。</li><li>绑定 Facebook 和 Twitter，开启两步验证，避免因使用 VPN 账号导致被封。 （使用部分代理服务可能导致社交账号行为 与 机构养号的行为很接近）</li><li>不建议使用 Google voice 号码来拨打美国各种服务的客服电话，连接效果较差，且有可能被系统识别阻拦等。</li></ul><h2 id="Google-Voice-充值"><a href="#Google-Voice-充值" class="headerlink" title="Google Voice 充值"></a>Google Voice 充值</h2><p>Google voice 无法在 iOS 应用中充值。推荐打开 Google voice网页版本（桌面端移动端均可），直接在设置中找到<a href="https://voice.google.com/u/0/settings#payments" target="_blank" rel="noopener">充值页面</a>，单次充值可充10/25/50美元，总余额不能超过70美元。</p><p>因为充值使用的是 Google Pay，需要绑定 Visa/Mastercard 等外币信用卡才能使用，不支持银联信用卡。Google Play 礼品卡冲的余额似乎没法用来充值 Google voice （待确认）。</p><h2 id="Google-voice-保号"><a href="#Google-voice-保号" class="headerlink" title="Google voice 保号"></a>Google voice 保号</h2><p>Google voice 作为一项公共资源，Google 会不定期收回不活跃的手机号，回收前会提前一个月进行邮件通知。推荐使用 <a href="https://ifttt.com/applets/131839p-keep-google-voice-active" target="_blank" rel="noopener">IFTTT </a>服务，定时使用 Google voice 拨打电话以保持活跃度。</p><p>即使充值了，若长期只收短信而不是使用也会有被销号的可能。建议添加提醒，每隔一两个月打个电话，或者发个短信保持活跃度。</p><h4 id="登录注册IFTTT"><a href="#登录注册IFTTT" class="headerlink" title="登录注册IFTTT"></a>登录注册IFTTT</h4><p>官网：<a href="https://ifttt.com/" target="_blank" rel="noopener">IFTTT</a></p><p><img src="/Users/wangwei/Desktop/reg-google-voice-07.png" alt="image-20190415170307686"></p><h4 id="配置-Keep-Gooogle-Voice-Active"><a href="#配置-Keep-Gooogle-Voice-Active" class="headerlink" title="配置 Keep Gooogle Voice Active"></a>配置 Keep Gooogle Voice Active</h4><p>搜索 Keep Gooogle Voice Active，或者直接点击 <a href="https://ifttt.com/applets/131839p-keep-google-voice-active" target="_blank" rel="noopener"><strong>这里</strong></a> 进入相应页面。</p><p><img src="https://img.i7years.com/blog/reg-google-voice-08.png" alt="3334975-f533c062e0b185b7"></p><p><img src="https://img.i7years.com/blog/reg-google-voice-09.png" alt="3334975-142b06b3a99bcde8"></p><p>分别点击设置 “Date &amp; Time” 和 “Phone Call”。</p><p><img src="https://img.i7years.com/blog/reg-google-voice-10.png" alt="3334975-b2561883744214c2"></p><p><strong>设置时区</strong>，北京时间。</p><p><img src="https://img.i7years.com/blog/reg-google-voice-11.png" alt="3334975-6750a6719a357b3c"></p><p><strong>添加号码</strong>，需要接收输入验证码。（不用输入区号）</p><p>点击 “Send PIN”，我们的 GV(Google Voice) 会收到一封语音邮件，将收到的四位验证码填入即可。</p><p><img src="https://img.i7years.com/blog/reg-google-voice-12.png" alt="3334975-6bf529ebfaa8e26d"></p><p><img src="https://img.i7years.com/blog/reg-google-voice-13.png" alt="3334975-14f19e756bfd44b6"></p><h4 id="启动成功"><a href="#启动成功" class="headerlink" title="启动成功"></a>启动成功</h4><p><img src="https://img.i7years.com/blog/reg-google-voice-14.png" alt="3334975-b079299bd62c31b2-1"></p><p>以后每个月都会收到 IFTTT 的电话或语音邮件。当然，IFTTT 也是很强大的一个工具，感兴趣的可以研究下。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://digitalimmigrant.org/348" target="_blank" rel="noopener">https://digitalimmigrant.org/348</a></li><li><a href="https://www.googlevoice.cn/" target="_blank" rel="noopener">https://www.googlevoice.cn/</a></li><li><a href="https://go2think.com/keep-google-voice-active/" target="_blank" rel="noopener">https://go2think.com/keep-google-voice-active/</a></li></ul>]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> freedom </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据移民漂流记——如何注册美区 PayPal 并绑定美区 Apple ID]]></title>
      <url>/posts/How-to-register-for-the-US-PayPal-and-bind-the-US-Apple-ID.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/aeroplane-aircraft-airplane-8394.jpg?imageslim" alt=""></p><blockquote><p>转载：<a href="http://jolson.xyz/2018/11/22/reg-us-pp/" target="_blank" rel="noopener">http://jolson.xyz/2018/11/22/reg-us-pp/</a></p></blockquote><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本教程仅为对之前 <a href="https://wangwei.one/posts/How-to-register-and-use-the-US-Apple-ID.html">注册美区 Apple ID 教程</a> 的延伸，是为了告诉大家如何正确的将美区 Apple ID 绑定美区 PayPal 付款方式并成功使用，以减少 PayPal 对账户的风控（并不能100%保证一定会没有风控或者解除风控），让大家在美区畅通无阻的进行付款。（如果是绑定港区或者日区的 Apple ID 的付款方式，请参考教程：如何注册并使用美区 Apple ID 的前言部分，里面有简单的说明介绍）</p><p>在注册之前，要做好所有的准备工作：</p><ol><li>准备好一个 <a href="https://wangwei.one/posts/How-to-register-and-use-the-Google-Voice.html">Google Voice美国虚拟号码</a> ，以及一个美国免税州地址（美国地址可在 <a href="https://www.fakeaddressgenerator.com/World/us_address_generator" target="_blank" rel="noopener">这个网站</a> 直接生成，如果有问题请自行谷歌）。</li><li>打开美国全局代理模式。（本教程全程为美国全局代理模式）</li><li>去 <a href="https://www.ipip.net/ip.html" target="_blank" rel="noopener">ipip.net</a> 网站查看你的IP地址是否为美国。</li><li>楼主用的是 Chrome 浏览器，并且清除了 Chrome 浏览器的所有浏览数据和其他不相关的信息（除了保存的密码和信用卡信息）。</li></ol><p>请最好按以上顺序进行接下来的步骤，仅仅只是为了防止一些玄学事情发生。</p><blockquote><p>但是综上所述，楼主按照这些步骤做完还是被 PayPal 风控（连 Apple 都把我风控了），但是后来全部解决了。接下来所有的步骤以及解决方案都会在本教程详细说明。</p></blockquote><h2 id="注册美区-PayPal-账户"><a href="#注册美区-PayPal-账户" class="headerlink" title="注册美区 PayPal 账户"></a>注册美区 PayPal 账户</h2><h3 id="登陆美国PayPal官网"><a href="#登陆美国PayPal官网" class="headerlink" title="登陆美国PayPal官网"></a>登陆美国PayPal官网</h3><p>首先打开<a href="http://jolson.xyz/2018/11/22/reg-us-pp/www.paypal.com/us" target="_blank" rel="noopener">美国 Paypal 官网</a>，点击右上角 <code>Sign Up</code> 进入注册账户界面，示意图如下：<br><a href="https://img.i7years.com/blog/20181122-reg-us-pp-01.jpg" target="_blank" rel="noopener"><img src="https://img.i7years.com/blog/20181122-reg-us-pp-01.jpg" alt="20181122-reg-us-pp-02"></a></p><p>选择第一个 <code>Personal Account</code> ，并点击 <code>Next</code>， 示意图如下：<br><a href="https://img.i7years.com/blog/20181122-reg-us-pp-02.jpg" target="_blank" rel="noopener"><img src="https://img.i7years.com/blog/20181122-reg-us-pp-02.jpg" alt="20181122-reg-us-pp-03"></a></p><p>这时会让你填写 PayPal 账户相关信息（推荐使用与美区 Apple ID 账户相同的 Gmail 邮箱，参考之前的<a href="http://jolson.xyz/2018/11/15/reg-appleid/" target="_blank" rel="noopener">美区 Apple ID 注册教程</a>），并且请确定右下角为<code>美国</code>，然后点击 Next ，示意图如下：<br><a href="https://img.i7years.com/blog/20181122-reg-us-pp-03.jpg" target="_blank" rel="noopener"><img src="https://img.i7years.com/blog/20181122-reg-us-pp-03.jpg" alt="20181122-reg-us-pp-04"></a></p><p>接下来输入之前准备好的<code>美国免税州地址</code>和 GV（推荐使用与美区 Apple ID 账户相同的免税州地址），然后点击 <code>Agree and Create Account</code>，示意图如下：<br><a href="https://img.i7years.com/blog/20181122-reg-us-pp-04.jpg" target="_blank" rel="noopener"><img src="https://img.i7years.com/blog/20181122-reg-us-pp-04.jpg" alt="20181122-reg-us-pp-05"></a></p><p>至此，PayPal 已经注册成功，然后点击最下面按钮 <code>Not Sure? Add card to use later</code>，并添加信用卡（推荐使用<code>全币卡</code>，不推荐双币卡，因为双币卡的外币消费会多扣 1% 的额外手续费，具体看银行。如果只有双币卡也没关系，先添加了再说），示意图如下：<br><a href="https://img.i7years.com/blog/20181122-reg-us-pp-05.jpg" target="_blank" rel="noopener"><img src="https://img.i7years.com/blog/20181122-reg-us-pp-05.jpg" alt="20181122-reg-us-pp-05"></a></p><p>填写全币卡的相关信息，并点击 <code>Link Card</code>，示意图如下：<br><a href="https://img.i7years.com/blog/20181122-reg-us-pp-06.jpg" target="_blank" rel="noopener"><img src="https://img.i7years.com/blog/20181122-reg-us-pp-06.jpg" alt="20181122-reg-us-pp-06"></a></p><p>这时 PayPal 提示你账户已经全部准备好可进行后续使用，点击下方 <code>Go to your account</code>，进行账户的最后验证（这点很重要，如果没有验证，将100%被风控！），示意图如下：<br><a href="https://img.i7years.com/blog/20181122-reg-us-pp-07.jpg" target="_blank" rel="noopener"><img src="https://img.i7years.com/blog/20181122-reg-us-pp-07.jpg" alt="20181122-reg-us-pp-07"></a></p><p>进入 PayPal 首页后，会有2个大篮框，请一定要验证你 PayPal 的电话和邮箱，不然100%风控！！！验证全部结束后，点击右上角齿轮，回到账户的首页，示意图如下：<br><a href="https://img.i7years.com/blog/20181122-reg-us-pp-08.jpg" target="_blank" rel="noopener"><img src="https://img.i7years.com/blog/20181122-reg-us-pp-08.jpg" alt="20181122-reg-us-pp-08"></a></p><p>在账户页面请确定你的国家为 <code>United States</code>，也就是美国。语言可选择<code>简体中文</code>，SSN 和 Passport 不管。然后点击页面上方的 <code>PAYMENTS</code> ，示意图如下：<br><a href="https://img.i7years.com/blog/20181122-reg-us-pp-09.jpg" target="_blank" rel="noopener"><img src="https://img.i7years.com/blog/20181122-reg-us-pp-09.jpg" alt="20181122-reg-us-pp-09"></a></p><p>在这里可以看到你的付款信息，请自行确认，至此关于美区 PayPal 账户注册完全结束。<br><a href="https://img.i7years.com/blog/20181122-reg-us-pp-10.jpg" target="_blank" rel="noopener"><img src="https://img.i7years.com/blog/20181122-reg-us-pp-10.jpg" alt="20181122-reg-us-pp-10"></a></p><h3 id="美区-Apple-ID-绑定美区-PayPal-账户"><a href="#美区-Apple-ID-绑定美区-PayPal-账户" class="headerlink" title="美区 Apple ID 绑定美区 PayPal 账户"></a>美区 Apple ID 绑定美区 PayPal 账户</h3><p>打开 App Store，并点击右上角头像（本教程使用的设备系统为 iOS 12，比较老的系统如果右上角没有头像，请直接拉到 App Store 首页最下面，点击你的账户并退出），示意图如下：<br><a href="https://img.i7years.com/blog/20181122-reg-us-pp-11.jpg" target="_blank" rel="noopener"><img src="https://img.i7years.com/blog/20181122-reg-us-pp-11.jpg" alt="20181122-reg-us-pp-11"></a></p><p>退出现有账户，输入新注册的美区 Apple ID 账户及密码，并点击 Sign In 登陆，示意图如下：<br><a href="https://img.i7years.com/blog/20181122-reg-us-pp-12.jpg" target="_blank" rel="noopener"><img src="https://img.i7years.com/blog/20181122-reg-us-pp-12.jpg" alt="20181122-reg-us-pp-12"></a></p><p>登陆成功后，点击头像栏，示意图如下：<br><a href="https://img.i7years.com/blog/20181122-reg-us-pp-13.jpg" target="_blank" rel="noopener"><img src="https://img.i7years.com/blog/20181122-reg-us-pp-13.jpg" alt="20181122-reg-us-pp-13"></a></p><p>点击 <code>Payment Information</code>，进入付款方式页面，示意图如下：<br><a href="https://img.i7years.com/blog/20181122-reg-us-pp-14.jpg" target="_blank" rel="noopener"><img src="https://img.i7years.com/blog/20181122-reg-us-pp-14.jpg" alt="20181122-reg-us-pp-14"></a></p><p>选择 <code>PayPal</code>，并点击 <code>Log In to PayPal</code>，示意图如下：<br><a href="https://img.i7years.com/blog/20181122-reg-us-pp-15.jpg" target="_blank" rel="noopener"><img src="https://img.i7years.com/blog/20181122-reg-us-pp-15.jpg" alt="20181122-reg-us-pp-15"></a></p><p>接下来会让你输入账号密码，示意图如下：<br><a href="https://img.i7years.com/blog/20181122-reg-us-pp-16.jpg" target="_blank" rel="noopener"><img src="https://img.i7years.com/blog/20181122-reg-us-pp-16.jpg" alt="20181122-reg-us-pp-16"></a><br><a href="https://img.i7years.com/blog/20181122-reg-us-pp-17.jpg" target="_blank" rel="noopener"><img src="https://img.i7years.com/blog/20181122-reg-us-pp-17.jpg" alt="20181122-reg-us-pp-17"></a></p><p>点击 <code>Log In</code>，会进入安全检查页面，示意图如下：<br><a href="https://img.i7years.com/blog/20181122-reg-us-pp-18.jpg" target="_blank" rel="noopener"><img src="https://img.i7years.com/blog/20181122-reg-us-pp-18.jpg" alt="20181122-reg-us-pp-18"></a></p><p>至此，绑定美区 PayPal 账户会正式进行安全检查，并对一些有风险的账户进行风险控制。一般来说如果没问题的话，就会直接显示你的信用卡信息，并完成你的美区PayPal账户的绑定。<br>或者让你验证 GV 号（有人说如果遇到验证 GV 号就代表你已经被风控了，其实并不是，我大号也是验证 GV 号，但是验证完成后绑定直接一次通过。<br>我创建小号做教程，也遇到验证 GV 号2次（同账户注销重创一次，虽然2次被风控了，但最后都解决了）。所以遇到验证 GV 号也不用怕，直接验证，也有可能直接通过的，验证时选择发送短信即可。示意图如下：<br><a href="https://img.i7years.com/blog/20181122-reg-us-pp-19.jpg" target="_blank" rel="noopener"><img src="https://img.i7years.com/blog/20181122-reg-us-pp-19.jpg" alt="20181122-reg-us-pp-19"></a></p><p>一般验证GV号的页面出现后，也是有几率直接通过安全检查并成功绑定的（例如我的大号）。绑定成功通过的过程我就不多赘述，接下来主要讲解被风控之后的解决办法（不能保证100%解除，但至少我找到3个人测试，3个人均成功解除风控，有1个是我小号），被风控的示意图如下：<br><a href="https://img.i7years.com/blog/20181122-reg-us-pp-20.jpg" target="_blank" rel="noopener"><img src="https://img.i7years.com/blog/20181122-reg-us-pp-20.jpg" alt="20181122-reg-us-pp-20"></a></p><h3 id="美区PayPal被风控的解决办法"><a href="#美区PayPal被风控的解决办法" class="headerlink" title="美区PayPal被风控的解决办法"></a>美区PayPal被风控的解决办法</h3><p>刚注册的Paypal 账号很可能会被风控，即绑定 Apple ID 出错，出现如下提示：</p><blockquote><p>Sorry, we weren ’ t able to set up preapproved payments at this time.</p></blockquote><p>出现这种情况的话，可以直接在 Paypal 网站上找客服。</p><p>登陆 PayPal 首页，点击下方 <code>CONTACT US</code>，示意图如下：<br><a href="https://img.i7years.com/blog/20181122-reg-us-pp-21.jpg" target="_blank" rel="noopener"><img src="https://img.i7years.com/blog/20181122-reg-us-pp-21.jpg" alt="20181122-reg-us-pp-21"></a></p><p>点击 <code>Payments</code>，示意图如下：<br><a href="https://img.i7years.com/blog/20181122-reg-us-pp-22.jpg" target="_blank" rel="noopener"><img src="https://img.i7years.com/blog/20181122-reg-us-pp-22.jpg" alt="20181122-reg-us-pp-22"></a></p><p>点击 <code>Payment declined</code>，示意图如下：<br><a href="https://img.i7years.com/blog/20181122-reg-us-pp-23.jpg" target="_blank" rel="noopener"><img src="https://img.i7years.com/blog/20181122-reg-us-pp-23.jpg" alt="20181122-reg-us-pp-23"></a></p><h4 id="邮件联系"><a href="#邮件联系" class="headerlink" title="邮件联系"></a>邮件联系</h4><p>大致内容如下：</p><blockquote><p>Hi, there. I just signed up my PayPal account. when I bind it with iTunes. it shows “Sorry, we weren ’ t able to set up preapproved payments at this time.”<br>Can you help me to figure out, thanks!</p></blockquote><p>等待客服回复邮件后，可能到此就已经解决了。也有可能客服让你给他打电话来进行确认。此时你有三个选择。</p><ul><li>打电话过去，若使用已绑定的 Google Voice 拨打，PayPal可以自动辨别你的账户，跟人工客服解释一下，说不知道为什么不能购买，他们后台操作一下即可。</li><li>如果觉得自己英语不行，搞不定电话，可以找万能的淘宝。</li><li>你也可以选择注销这个账号，重复以上步骤，可能会避开风控。</li></ul><h4 id="在线客服"><a href="#在线客服" class="headerlink" title="在线客服"></a>在线客服</h4><p>点击 <code>Chat with us</code>，并接入美区 PayPal 在线客服（弹窗在点击后会出现在页面右下角），示意图如下：<br><a href="https://img.i7years.com/blog/20181122-reg-us-pp-24.jpg" target="_blank" rel="noopener"><img src="https://img.i7years.com/blog/20181122-reg-us-pp-24.jpg" alt="20181122-reg-us-pp-24"></a></p><p>与在线客服聊天主要是和他说明自己美区 PayPal 风控的情况，然后他会帮你查看，并告知风控的原因，但是他并没有给出具体的解决方案。可是在聊天结束后的 5-10 分钟后重新进行一次美区 PayPal 的绑定，就可以非常顺利的将美区 PayPal 绑定到美区 Apple ID 上了（真的是很玄学），感谢TG上 @Ada_wx @ritafishyyyy 这2位的测试，这2位与我的小号均被风控，但同样的，每次与在线客服聊完天后，成功解除了风控，注册周期分别是 @Ada_wx 7天前注册的， @ritafishyyyy 3天前注册的和我小号的12小时前注册的。</p><p>因为是美区的客服，都是用英文交流，我没有尝试过是不是有中文服务。如果没有的话可以直接用谷歌翻译，大致意思就是你的 PayPal 被风控了，有什么办法可以解决，是否帮我后台查看或者调整一下。</p><p>需要注意的是，一定要声明你是在绑定 Apple ID 的付款方式被风控的。</p><p>例如：</p><ul><li>Sorry, we weren’t able to set up preapproved payments at this time.</li><li>Why can’t I use paypal on itunes?</li></ul><p>因为我是在网页版与客服聊天的，所以聊完之后我就直接登陆苹果 Apple ID 账户官网进行付款方式的绑定（另外2位测试的朋友也是最后网页版的 Apple ID 账户官网绑定的），打开 <a href="http://jolson.xyz/2018/11/22/reg-us-pp/appleid.apple.com" target="_blank" rel="noopener">appleid.apple.com</a> 输入账号密码后，进入美区 Apple ID 账户信息首页，示意图如下：<br><a href="https://img.i7years.com/blog/20181122-reg-us-pp-25.jpg" target="_blank" rel="noopener"><img src="https://img.i7years.com/blog/20181122-reg-us-pp-25.jpg" alt="20181122-reg-us-pp-25"></a></p><p>往下拉，找到 <code>PAYMENT METHOD</code>，选择 PayPal 付款方式，并点击 <code>Sign In to PayPal</code>，（如果下方 <code>SHIPPING ADDRESS</code> 为空，请复制与 <code>BILLING ADDRESS</code> 相同的地址填写，可选部分可不写）。示意图如下：<br><a href="https://img.i7years.com/blog/20181122-reg-us-pp-26.jpg" target="_blank" rel="noopener"><img src="https://img.i7years.com/blog/20181122-reg-us-pp-26.jpg" alt="20181122-reg-us-pp-26"></a></p><p>因为我在网页版上登陆过 PayPal，所以跳过了输入账号密码的过程，并直接进行安全检查。安全检查结束后成功显示付款信息页面（如果在这里还是被风控了，那么说明与在线客服聊天并解除风控的办法已失效，请大家重新寻找解除风控的方法），点击 <code>Agree &amp; Continue</code>（在本教程第二点中在 App Store 进行美区 PayPal 绑定，如果没有被风控直接成功也会出现这个界面），示意图如下：<br><a href="https://img.i7years.com/blog/20181122-reg-us-pp-27.jpg" target="_blank" rel="noopener"><img src="https://img.i7years.com/blog/20181122-reg-us-pp-27.jpg" alt="20181122-reg-us-pp-27"></a></p><p>最后点击 <code>Save</code>（App Store里是Done）成功完成绑定，完美解决了美区 PayPal 的风控，示意图如下：<br><a href="https://img.i7years.com/blog/20181122-reg-us-pp-28.jpg" target="_blank" rel="noopener"><img src="https://img.i7years.com/blog/20181122-reg-us-pp-28.jpg" alt="20181122-reg-us-pp-28"></a></p><p>至此所有 PayPal 的注册、绑定以及风控的解决办法（不保证之后的所有人100%可以解除风控）都已经结束。但是这并不意味着所有的问题都已解决，接下来还要过苹果这最后一关，也就是苹果的风控，但苹果的风控很好解决。</p><h3 id="测试付款方式（App-Purchase-以及-In-App-Purchases），查看是否成功付款，或者是否被-Apple-风控及解决办法"><a href="#测试付款方式（App-Purchase-以及-In-App-Purchases），查看是否成功付款，或者是否被-Apple-风控及解决办法" class="headerlink" title="测试付款方式（App Purchase 以及 In-App Purchases），查看是否成功付款，或者是否被 Apple 风控及解决办法"></a>测试付款方式（App Purchase 以及 In-App Purchases），查看是否成功付款，或者是否被 Apple 风控及解决办法</h3><p>打开 App Store，并登陆已经成功绑定美区 PayPal 的 Apple ID 账户，并随便搜索一个付费的 App，并进行 AP（App Purchase）测试，并点击购买，示意图如下：<br><a href="https://img.i7years.com/blog/20181122-reg-us-pp-29.jpg" target="_blank" rel="noopener"><img src="https://img.i7years.com/blog/20181122-reg-us-pp-29.jpg" alt="20181122-reg-us-pp-29"></a></p><p>指纹支付后，会显示 PayPal 号码的验证（验证也可能不会出现），示意图如下：<br><a href="https://img.i7years.com/blog/20181122-reg-us-pp-30.jpg" target="_blank" rel="noopener"><img src="https://img.i7years.com/blog/20181122-reg-us-pp-30.jpg" alt="20181122-reg-us-pp-30"></a></p><p>如果不出现验证，基本就直接购买成功了，如果出现了验证，输入验证码即可，示意图如下：<br><a href="https://img.i7years.com/blog/20181122-reg-us-pp-31.jpg" target="_blank" rel="noopener"><img src="https://img.i7years.com/blog/20181122-reg-us-pp-31.jpg" alt="20181122-reg-us-pp-31"></a></p><p>点击 Done，会再跳出一次指纹支付，支付完成后，会直接收到 PayPal 和 iTunes 的收据（也可能会延迟收到）。下载安装完成后会显示 OPEN 按钮，这表示 App Purchase（AP基本都是通过的）成功通过测试，示意图如下：<br><a href="https://img.i7years.com/blog/20181122-reg-us-pp-32.jpg" target="_blank" rel="noopener"><img src="https://img.i7years.com/blog/20181122-reg-us-pp-32.jpg" alt="20181122-reg-us-pp-32"></a></p><p>在这之后随意打开一个可以进行 <code>IAP</code>（In-App Purchases）付款的App，示意图如下：<br><a href="https://img.i7years.com/blog/20181122-reg-us-pp-33.png" target="_blank" rel="noopener"><img src="https://img.i7years.com/blog/20181122-reg-us-pp-33.png" alt="20181122-reg-us-pp-33"></a></p><p>点击移除广告，有可能会出现一下2个提示弹窗，示意图如下：<br><a href="https://img.i7years.com/blog/20181122-reg-us-pp-34.png" target="_blank" rel="noopener"><img src="https://img.i7years.com/blog/20181122-reg-us-pp-34.png" alt="20181122-reg-us-pp-34"></a></p><p>如果显示 <code>You&#39;re all set</code>. 则说明你成功进行了 <code>IAP</code> 的付款，没有被 Apple 风控，至此所有的美区 Apple ID 账户都已完全可以正常使用。如果显示 <code>Your Purchase Could Not Be Completed</code> 则说明你被苹果风控了，示意图如下：<br><a href="https://img.i7years.com/blog/20181122-reg-us-pp-35.png" target="_blank" rel="noopener"><img src="https://img.i7years.com/blog/20181122-reg-us-pp-35.png" alt="20181122-reg-us-pp-35"></a></p><p>出现这个提示，只有一个办法可以解决，就是致电中国苹果客服（中国客服即可，因为是全球服务，不一定需要美国客服）。但是要注意，这个情况是隶属于账单部门，如果选错部门也没关系，可以进行转接。</p><p>另外2个测试的朋友，1个 IAP 被风控，，另外1个没有被风控，我的小号也被 IAP 风控，但同样都是通过客服解决的，非常方便。</p><p>致电的大致的聊天内容基本就是你的美区 Apple ID 成功绑定 PayPal 后，可以进行 AP 的消费，却不能进行 IAP 的消费，而提示不能进行 IAP 消费的那段的中文意思是：无法完成此次付款，请联系 iTunes 客服寻求技术支持。</p><p>然后大概会再经历1-2次转接，之后转接的人会和你说他们将你的账户进行了调整，让你再一次尝试 IAP 的付款。基本到这里就成功消费了（我的另一个被风控的朋友就是，听说好像是美国那边的中文客服回电给他，然后就成功了）。<br>而楼主小号就比较脸黑了，连续调整了2次都还是无法 IAP 消费，最后客服说他们会联系美国那边的客服帮我解决，将在1-2天内给我回电。但是给我回电的还是中国的客服，最后我再次尝试后，我也成功的进行了 IAP 的消费，至此，我的小号还有我的朋友都成功完成了美区 Apple ID 所有的信息绑定，可以完美使用。</p><blockquote><p>每个人和客服的聊天内容不同，也会有不一样的回复。比如我朋友是当天接到了美国的中文客服帮他解决，而我是等到第二天，中国客服联系好了美国客服后，再由中国的客服联系我帮我解决。</p></blockquote><p>在所有的 AP 和 IAP 付款全部解除了苹果的风控之后，下一次可以不用再通过使用代理进行消费（因为老外也会来中国或者去其他国家/地区）。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><blockquote><p>来自：<a href="https://twitter.com/waylybaye/status/957448362193666048" target="_blank" rel="noopener">https://twitter.com/waylybaye/status/957448362193666048</a></p></blockquote><p>如果你用外区 Paypal 来作为 App Store、套路云等其它商家的付款方式，而且发现扣款时汇率很高，务必按照下图的步骤切换下结算货币，不要让PP转换货币。</p><p><img src="https://img.i7years.com/blog/reg-us-pp-39.jpg" alt="Register-US-PayPal"></p><p><img src="https://img.i7years.com/blog/reg-us-pp-36.png" alt="Register-US-PayPal"></p><p><img src="https://img.i7years.com/blog/reg-us-pp-37.png" alt="Register-US-PayPal"></p><p><img src="https://img.i7years.com/blog/reg-us-pp-38.png" alt="Register-US-PayPal"></p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>从 PayPal 的注册到美区 Apple ID 付款方式绑定，到最后的解决 PayPal 的风控还有苹果的风控一共经历了36小时左右，算是特地为了这个教程创建的小号强行被风控以及帮大家踩坑。</p><p>还有要声明的一点是，每次使用 PayPal 进行 App Store 相关的所有付款，都有可能会延迟 1 到 3 天才会给你发送你的购买凭证和收据信息，并不会及时的给你发送收据凭证的邮件消息，但是这不影响，不用太过担心。（有人说每次点击 Apple ID 里的 <code>Payment Information</code> 右上角的 Done，收据和凭证会立马发给你，有兴趣的大伙可以试试）。</p><p>当然我不能保证每个人都能成功解除 PayPal 的风控（当然除了一次性通过绑定的人除外），只是给大家一个解决方案，这个解决方案看似有点奇怪，但的确3个被风控的人都全部解除了风控。</p><p>也许现在与在线客服聊天后可以和本教程测试的一样很顺利的解除 PayPal 的风控。但也许过后不久会被 PayPal 发现漏洞并禁止，也可能在本教程中我们3个人只是凑巧通过这个方法解除了风控，具体原因我们都不得而知。但如果之后本教程中解除 PayPal 风控的解决方案失效了，接下来我们可能不会再对其风控的原因和风控的解决方案进行更深入的研究。</p><p>还是没有解除风控的人，还是尽量找 TG 上的代购，或在淘宝解决。（正版 Shadowrocket 价格为2.99刀，Quantumult 正版价格为4.99刀，淘宝那种10块钱低价的均为黑卡！建议选择代购。）</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://digitalimmigrant.org/171" target="_blank" rel="noopener">https://digitalimmigrant.org/171</a></li></ul>]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> freedom </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据移民漂流记——如何注册并使用美区 Apple ID]]></title>
      <url>/posts/How-to-register-and-use-the-US-Apple-ID.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/air-travel-aircraft-aircraft-wing-2007401.jpg?imageslim" alt="air-travel-aircraft-aircraft-wing-2007401"></p><blockquote><p>转载：<a href="http://jolson.xyz/2018/11/15/reg-appleid/" target="_blank" rel="noopener">http://jolson.xyz/2018/11/15/reg-appleid/</a></p></blockquote><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为每个人的使用需求不同，比如 SS、SSR、V2 等都需要相对应的网络代理工具 App。但由于某些特殊原因，中国区 App Store 基本上下架了大部分的网络代理工具 App（例如用的比较多的小火箭 Shadowrocket 和圈 Quantumult 等等）。</p><p>因为中国区无法下载到自己所需要使用的App，则大部分人都需要注册非中国区（如美区、港区等）的应用商店付费进行下载（出于尊重作者的角度出发，请尽量不要使用共享 Apple ID 账号下载软件，正版 App 其实也就几十块钱）。</p><p>本文以注册美区 Apple ID 账号为例（其他地区账号同理），但关于美区 Apple ID 账号和绑定 PayPal 自行 Google 搜索相关教程，如需求较大后续我可以再出相关教程。</p><ul><li>美区 Apple ID 账户可绑定美区（只能美区，其他地区不行） Paypal 进行付款。</li><li>港区 Apple ID 账户可注册 <code>Tap and Go</code> 香港 MS 虚拟预付信用卡并绑定港区 Apple ID 账户进行付款（前提你要有港澳通行证）。具体操作可参考 BIGDONGDONG 的视频教学：<a href="https://www.youtube.com/watch?v=97IzYP0zNqk" target="_blank" rel="noopener">5分钟让你拥有一张 Mastercard 外币种卡</a></li><li>日区 Apple ID 账户可直接绑定 JCB 信用卡进行付款。</li></ul><h2 id="注册美区-Apple-ID-账户"><a href="#注册美区-Apple-ID-账户" class="headerlink" title="注册美区 Apple ID 账户"></a>注册美区 Apple ID 账户</h2><h3 id="1、登陆苹果账户官网"><a href="#1、登陆苹果账户官网" class="headerlink" title="1、登陆苹果账户官网"></a>1、登陆苹果账户官网</h3><p>首先打开 <a href="http://jolson.xyz/2018/11/15/reg-appleid/appleid.apple.com" target="_blank" rel="noopener">appleid.apple.com</a>，首次打开时首页展示图如下：</p><p><img src="https://img.i7years.com/blog/5c2b2dd95185d.jpg" alt=""></p><p>点击底部 <code>Create your Apple ID</code> 进入注册账户界面，示意图如下：</p><p><img src="https://img.i7years.com/blog/5c2b2dd96cbc4.jpg" alt=""></p><p><code>国家/地区</code>一定要选择 <code>United States</code>，也就是<code>美国</code>，这点很重要，直接决定了你的账户是属于哪个<code>国家/地区</code>（如果想注册香港地区的账号，请选择 <code>HONG KONG</code>，其他国家/地区同理）。</p><p>美区Apple ID建议使用<code>谷歌邮箱</code>注册（为了好过玄学美区 PayPal 绑定）。注册内容全部填写完毕后，拉到最下面点击继续，示意图如下：</p><p><img src="https://img.i7years.com/blog/5c2b2dd965152.jpg" alt=""></p><p>点击继续按钮后，苹果会让你验证你的电子邮件，示意图如下：</p><p><img src="https://img.i7years.com/blog/5c2b2dd9755a5.jpg" alt=""></p><p>验证完毕后，会进入你的<code>账户信息页面</code>，如果<code>国家/地区</code>显示为<code>美国</code>，则注册成功，示意图如下：</p><p><img src="https://img.i7years.com/blog/5c2b2dd98cb07.jpg" alt=""></p><p>需要注意的是，注册好新账户后，美区 Apple ID 还暂不可用，需要在手机上登陆 App Store 来激活新注册的美区账户，才可使用。</p><p>在用新美区账户登陆 App Store 之前，请确保你的手机打开了美国节点的<code>全局翻墙</code>！这点很重要，否则无法完成激活！（除非你有付款方式）</p><blockquote><p>PS：如果是激活港区 Apple ID，请使用香港节点全局翻墙，其他地区同理。</p></blockquote><h3 id="2、激活美区账户"><a href="#2、激活美区账户" class="headerlink" title="2、激活美区账户"></a>2、激活美区账户</h3><p>打开 <code>App Store</code>，并点击<code>右上角头像</code>（本教程使用的设备系统为 iOS 12，比较老的系统如果右上角没有头像，请直接拉到 App Store 首页最下面，点击你的账户并退出），示意图如下：</p><p><img src="https://img.i7years.com/blog/5c2b2dda2653a.png" alt=""></p><p>退出现有账户，输入新注册的美区 Apple ID 账户及密码，并点击 <code>Sign In</code> 登陆，示意图如下：</p><p><img src="https://img.i7years.com/blog/5c2b2dd985df9.jpg" alt=""></p><p>因为是第一次登陆，会提示你账户从未使用过，需要进行检查（其实也就是让你填写付款信息和确认国家），请直接点击 <code>Review</code> 并进入下一步，示意图如下：</p><p><img src="https://img.i7years.com/blog/5c2b2dd97d197.jpg" alt=""></p><p>请确认你的<code>国家/地区</code>是在 <code>United States</code> ，然后点击下一行按钮使其变成绿色，最后点击右上角 <code>Next</code>，示意图如下：</p><p><img src="https://img.i7years.com/blog/5c2b2dd993e8f.jpg" alt=""></p><p>这里有一点需要注意的是，如果你没有开启美国节点的全局模式，则付款方式（PAYMENT METHOD）这里不会出现 <code>None</code> 这个选项，并且只有 <code>Credit/Debit Card</code> 以及 <code>PayPal</code> 这2个付款方式选项。</p><p>如果发现付款方式中没有 <code>None</code> 这个选项，请确认你的节点是否为美国节点的<code>全局模式</code>，如果是美国节点并且开启了全局，则说明此节点不可用，请切换节点！</p><p>下面的地址及电话号码请直接去谷歌地图随便点击一个美国的地理位置然后输入信息即可，或直接 <a href="https://www.fakeaddressgenerator.com/World/us_address_generator" target="_blank" rel="noopener">这个网站</a> 生成一个地址（建议填写<code>美国免税州地址</code>，如果是用给出的生成地址网站可以自行筛选指定免税州信息，具体问题请谷歌）。</p><p>全部信息填写完成后，点击右上角 <code>Next</code> 进入下一步，示意图如下：</p><p><img src="https://img.i7years.com/blog/5c2b2dd98993e.jpg" alt=""></p><p>这时苹果会提示你，账户可继续使用，至此，美区 Apple ID 注册才全部完成，点击 <code>Continue</code> 完成，示意图如下：</p><p><img src="https://img.i7years.com/blog/5c2b2e5202881.jpg" alt=""></p><p>之后，就可以在 App Store 里搜索 <code>网络代理工具App</code>，如 <code>Quantumult</code>，示意图如下：</p><p><img src="https://img.i7years.com/blog/5c2b2e52a5fb5.png" alt=""></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><h3 id="如何使用美区-Apple-ID-购物"><a href="#如何使用美区-Apple-ID-购物" class="headerlink" title="如何使用美区 Apple ID 购物"></a>如何使用美区 Apple ID 购物</h3><p>由于美区 Apple ID <code>仅支持绑定美国发卡行的信用卡/借记卡</code>，故在支付方式上相对较困难，以下是几种常规的解决方式：</p><p>1、直接在 <code>苹果美国官网</code> 购买 <code>iTunes Gift Card</code> 礼品卡，充值到账户余额，此方式支持国内发卡行的双币种卡或全币种卡，若支付失败可能是发卡行的问题，换卡重试。谨慎在淘宝购买任何 <code>App 兑换码</code> 或 <code>iTunes Gift Card</code>，很大部分是黑卡（被盗刷的信用卡），有封号危险。</p><p>2、绑定美区支持的信用卡或Paypal，有如下几种方式推荐：</p><ul><li>如果刚好要去美国当地旅游，可顺便办理美国的信用卡或储蓄卡，这种方法最稳定。</li><li>绑定美区 PayPal（方便，但有一定几率被风控导致不能支付）</li><li>购买 <code>Visa Gift Card</code>，这是 Visa 的储值卡，类似于香港拍住赏这种，余额用完后无法充值，在美国当地（或淘宝）可购买，<a href="https://www.simon.com/giftcard/card_balance.aspx" target="_blank" rel="noopener">Simon Gift Card</a> 是其中一种，也可自行选择其他的，但建议每次购买最小面额，防止意外损失。</li><li>在某些国内银行做见证开户，如美国国泰银行账户可在浙江民泰银行开户（这种只是网传，本人并没有亲测）</li></ul><h3 id="重点注意的"><a href="#重点注意的" class="headerlink" title="重点注意的"></a>重点注意的</h3><p>使用美区 Apple ID，本质上其实是违反苹果的用户协议的行为，所以请尽量减少触发风控的一些操作：</p><ul><li>IP频繁变动</li><li>Apple ID在多台设备登录（可能被识别为共享软件行为，即盗版）</li><li>消费频繁且金额过高，IP有异常</li></ul><p>群里看到部分人最近绑定或通过美区 PayPal 支付时遇到“很抱歉，无法设置您对 iTunes and App Store 的预核准付款”的提示，建议先将支付方式修改为 <code>None</code>，然后将 Apple ID 和美区 Paypal 的付款地址修改为相同的免税州地址，接着再次尝试绑定，若依然有问题，大概率是触发了苹果的风控，如果英文足够好，可直接致电美区苹果客服要求帮你处理；若英文不够好，建议等待两三天后尝试是否可以使用；若还不行，建议换用其它支付方式。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>新手按照上述教程可100%完成所有地区账户的Apple ID注册。</p><p>需要注意的是，App Store 是根据登陆账户的地区来自动适配语言的。哪怕你手机系统是中文，但如果是美区账户，则 App Store 就是英文（我了解过来是这样），具体可以自己摸索。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://sspai.com/post/25837" target="_blank" rel="noopener">https://sspai.com/post/25837</a></li></ul>]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> freedom </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法 | 队列的实现及其应用]]></title>
      <url>/posts/java-data-structures-and-algorithms-queue.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p align="center"><br><a target="_blank" href="https://wangwei.one/posts/java-data-structures-and-algorithms-queue.html"><img src="https://img.i7years.com/blog/DyeTYiAXcAEYLIk.jpg?imageslim" title="Farming" alt="Farming"></a><br></p><br>前面，我们学习了 <a href="https://wangwei.one/posts/java-data-structures-and-algorithms-stack.html">栈的实现及应用</a> ，本篇我们来学习一下最后一种线性表——队列。<br><br><a id="more"></a><br><br>队列是我们日常开发中经常会用到的一种数据结构，我们经常使用队列进行异步处理、系统解耦、数据同步、流量削峰、缓冲、限流等。例如，不是所有的业务都必须实时处理、不是所有的请求都必须实时反馈结果给用户、不是所有的请求都必须100%处理成功、不知道谁依赖“我”的处理结果、不关心其他系统如何处理后续业务、不需要强一致性，只需保证最终一致性即可、想要保证数据处理的有序性等等，这些问题都考虑使用队列来解决。<br><br>## 队列<br><br>### 定义<br><br>队列与 <a href="https://wangwei.one/posts/java-data-structures-and-algorithms-stack.html">栈</a> 一样，都是操作受限的线性表数据结构。队列从一端插入数据，然后从另一端取出数据。插入数据的一端称为”<strong>队尾</strong>“，取出数据的一端称为”<strong>队头</strong>“，如图所示：<br><br><p align="center"><br><a target="_blank" href="https://wangwei.one/posts/java-data-structures-and-algorithms-queue.html"><img src="https://img.i7years.com/blog/queue.wangwei.one.gif" title="queue" alt="queue"></a><br></p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>FIFO（First In First Out）：先进先出原则</li></ul><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>与 <a href="https://wangwei.one/posts/java-data-structures-and-algorithms-stack.html">栈</a> 一样，队列也分为<strong>顺序队列</strong>与<strong>链式队列</strong>，分别使用数组与链表来实现。</p><h2 id="链式队列"><a href="#链式队列" class="headerlink" title="链式队列"></a>链式队列</h2><p>链式队列实现比较简单，使用单链表即可实现，如果所示：</p><p align="center"><br><a target="_blank" href="https://wangwei.one/posts/java-data-structures-and-algorithms-queue.html"><img src="https://img.i7years.com/blog/LinkedQueue.wangwei.one.png" title="LinkedQueue" alt="LinkedQueue"></a><br></p><br>### 代码实现<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.algorithms.datastructures.queue.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> one.wangwei.algorithms.datastructures.queue.IQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.NoSuchElementException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 链表队列</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> https://wangwei.one</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/03/27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedQueue</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">IQueue</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;T&gt; head;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;T&gt; tail;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加元素到队列头部</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        Node&lt;T&gt; last = tail;</span><br><span class="line">        Node&lt;T&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(value, <span class="keyword">null</span>);</span><br><span class="line">        tail = newNode;</span><br><span class="line">        <span class="keyword">if</span> (last == <span class="keyword">null</span>) &#123;</span><br><span class="line">            head = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            last.next = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除队列尾部元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">poll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">"Queue underflow"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Node&lt;T&gt; tmpHead = head;</span><br><span class="line">        head = head.next;</span><br><span class="line">        tmpHead.next = <span class="keyword">null</span>;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            tail = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tmpHead.element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看队列尾部元素值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">"Queue underflow"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head.element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清除队列元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;T&gt; x = head; x != <span class="keyword">null</span>; ) &#123;</span><br><span class="line">            Node&lt;T&gt; next = x.next;</span><br><span class="line">            x.element = <span class="keyword">null</span>;</span><br><span class="line">            x.next = <span class="keyword">null</span>;</span><br><span class="line">            x = next;</span><br><span class="line">        &#125;</span><br><span class="line">        head = tail = <span class="keyword">null</span>;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队列大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Node</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> T element;</span><br><span class="line">        <span class="keyword">private</span> Node&lt;T&gt; next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Node</span><span class="params">(T element)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.element = element;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Node</span><span class="params">(T element, Node&lt;T&gt; next)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.element = element;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>&gt; <a href="https://github.com/wangweiX/java-algorithms/blob/master/src/main/java/one/wangwei/algorithms/datastructures/queue/impl/LinkedQueue.java" target="_blank" rel="noopener">源码</a><br><br>基于链表的实现方式，可以实现一个支持无限排队的无界队列（unbounded queue），但是可能会导致过多的请求排队等待，请求处理的响应时间过长。所以，针对响应时间比较敏感的系统，基于链表实现的无限排队的线程池是不合适的。<br><br><br><br>## 顺序队列<br><br>顺序队列采用数组实现，数组的实现有两种方式，一种是顺序式的，一种是循环数组实现。<br><br>### 顺序队列<br><br>当队列尾部没有剩余空间后，需要集中进行一次数据搬迁腾出空间，才能继续进行入队操作。如图所示：<br><br><p align="center"><br><a target="_blank" href="https://wangwei.one/posts/java-data-structures-and-algorithms-queue.html"><img src="https://img.i7years.com/blog/ArrayQueue.wangwei.one.jpg" title="ArrayQueue" alt="ArrayQueue"></a><br></p><br>### 循环队列<br><br>顺序队列会存在数据搬迁的问题，对入队操作有性能方面的影响。我们可以采用循环数组的方式来解决这一问题，如图所示：<br><br><p align="center"><br><a target="_blank" href="https://wangwei.one/posts/java-data-structures-and-algorithms-queue.html"><img src="https://img.i7years.com/blog/CircularQueue.wangwei.one.gif" title="ArrayQueue" alt="ArrayQueue"></a><br></p><p>当队尾无存储空间且队列未满时，我们可以将其存储到数组的前半部分剩余的空间去。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>循环队列的实现关键在于队列为空和为满时的状态判断：</p><ul><li>当队列为空时：<code>rear == front</code></li><li>当队列为满时：<code>front == (rear + 1) % array.length</code>，队满时，会浪费一个数组的存储空间。</li></ul><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.algorithms.datastructures.queue.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> one.wangwei.algorithms.datastructures.queue.IQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.NoSuchElementException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数组队列</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> https://wangwei.one</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/02/04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayQueue</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">IQueue</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * default array size</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_SIZE = <span class="number">1024</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 元素数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> T[] array;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队头指针下标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> front = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队尾指针下标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rear = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(DEFAULT_SIZE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayQueue</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        array = (T[]) <span class="keyword">new</span> Object[capacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加队尾元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">            grow();</span><br><span class="line">        &#125;</span><br><span class="line">        array[rear % array.length] = value;</span><br><span class="line">        rear++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * grow queue size doubly</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> growSize = array.length &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        T[] tmpArray = (T[]) <span class="keyword">new</span> Object[growSize];</span><br><span class="line">        <span class="keyword">int</span> adjRear = rear % array.length;</span><br><span class="line">        <span class="keyword">int</span> endIndex = rear &gt; array.length ? array.length : rear;</span><br><span class="line">        <span class="keyword">if</span> (adjRear &lt; front) &#123;</span><br><span class="line">            System.arraycopy(array, <span class="number">0</span>, tmpArray, array.length - adjRear, adjRear + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.arraycopy(array, front, tmpArray, <span class="number">0</span>, endIndex - front);</span><br><span class="line">        array = tmpArray;</span><br><span class="line">        rear = (rear - front);</span><br><span class="line">        front = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除队头元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">poll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">"Queue underflow"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        T element = array[front % array.length];</span><br><span class="line">        array[front % array.length] = <span class="keyword">null</span>;</span><br><span class="line">        front++;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="comment">// remove last element</span></span><br><span class="line">            front = rear = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> shrinkSize = array.length &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (shrinkSize &gt;= DEFAULT_SIZE &amp;&amp; size() &lt; shrinkSize) &#123;</span><br><span class="line">            shrink();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 压缩</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">shrink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> shrinkSize = array.length &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        T[] tmpArray = (T[]) <span class="keyword">new</span> Object[shrinkSize];</span><br><span class="line">        <span class="keyword">int</span> adjRear = rear % array.length;</span><br><span class="line">        <span class="keyword">int</span> endIndex = rear &gt; array.length ? array.length : rear;</span><br><span class="line">        <span class="keyword">if</span> (adjRear &lt;= front) &#123;</span><br><span class="line">            System.arraycopy(array, <span class="number">0</span>, tmpArray, array.length - front, adjRear);</span><br><span class="line">        &#125;</span><br><span class="line">        System.arraycopy(array, front, tmpArray, <span class="number">0</span>, endIndex - front);</span><br><span class="line">        array = <span class="keyword">null</span>;</span><br><span class="line">        array = tmpArray;</span><br><span class="line">        rear = rear - front;</span><br><span class="line">        front = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看队头元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">"Queue underflow"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array[front % array.length];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清除队列元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        array = <span class="keyword">null</span>;</span><br><span class="line">        front = rear = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队列大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rear - front;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断队列是否满</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !isEmpty() &amp;&amp; (front == (rear + <span class="number">1</span>) % array.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断队是否为空</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size() &lt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/wangweiX/java-algorithms/blob/master/src/main/java/one/wangwei/algorithms/datastructures/queue/impl/ArrayQueue.java" target="_blank" rel="noopener">源码</a></p></blockquote><p>基于数组实现的有界队列（bounded queue），队列的大小有限，当请求数量超过队列大小时，接下来的请求就会被拒绝，这种方式对响应时间敏感的系统来说，就相对更加合理。不过，设置一个合理的队列大小，也是非常有讲究的。队列太大导致等待的请求太多，队列太小会导致无法充分利用系统资源、发挥最大性能。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《<a href="http://gk.link/a/101Nt" target="_blank" rel="noopener">数据结构与算法之美</a>》</li><li><a href="https://time.geekbang.org/column/article/41330" target="_blank" rel="noopener">https://time.geekbang.org/column/article/41330</a></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AlgoDS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法 | 回文链表检测]]></title>
      <url>/posts/java-algoDS-palindrome-linked-list.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/pexels-photo-747964.jpeg?imageslim" alt="pexels-photo-747964"></p><p>如何判断一个单链表是否为回文链表？</p><a id="more"></a><h2 id="回文链表"><a href="#回文链表" class="headerlink" title="回文链表"></a>回文链表</h2><blockquote><p><a href="https://leetcode.com/problems/palindrome-linked-list/" target="_blank" rel="noopener">LeetCode 234. Palindrome Linked List</a></p></blockquote><p><strong>例1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 1-&gt;2</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><p><strong>例2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 1-&gt;2-&gt;2-&gt;1</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p><strong>提升：</strong><br>时间复杂度为O(n)，空间复杂度为O(1).</p><h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><p>直接将链表进行 <a href="https://wangwei.one/posts/java-algoDS-reverse-linked-list.html">反转</a> ，然后将新的反转链表与原链表进行比较，这种思路最为简单粗暴。</p><p>此种解法的时间复杂度为O(n)，空间复杂度为O(n).</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode newCurr = <span class="keyword">null</span>;</span><br><span class="line">        ListNode newPrev = <span class="keyword">null</span>;</span><br><span class="line">        ListNode curr = head;</span><br><span class="line">        <span class="keyword">while</span>(curr != <span class="keyword">null</span>)&#123;</span><br><span class="line">            newCurr = <span class="keyword">new</span> ListNode(curr.val);</span><br><span class="line">            newCurr.next = newPrev;</span><br><span class="line">            newPrev = newCurr;</span><br><span class="line">            curr = curr.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ListNode p1 = newCurr;</span><br><span class="line">        ListNode p2 = head;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(p2 != <span class="keyword">null</span> &amp;&amp; p2 != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p2.val != p1.val)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p1 = p1.next;</span><br><span class="line">            p2 = p2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LeetCode性能测试：</p><blockquote><p>Runtime: 3 ms, faster than 24.01% of Java online submissions forPalindrome Linked List.</p></blockquote><h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><p>为了降低空间复杂度到O(1)，我们可以只对链表的后半部分直接反转，然后将反转后的后半部分与前半部分进行比较。</p><p>如何对后半部分进行反转呢？这就涉及到我们前面的 <a href="https://wangwei.one/posts/java-algoDS-middle-of-the-linked-list.html">如何找到中间节点</a> 的方法，使用快慢指针，先找到中间节点，然后从中间节点开始反转。</p><p>需要注意的是，在进行比较时，要以后半部分为基准进行遍历来比较，例如在链表长度位偶数的情况下：</p><p><code>A -&gt; B -&gt; C -&gt; C -&gt; B -&gt; A</code> 反转得到 <code>A -&gt; B -&gt; C -&gt; C &lt;- B &lt;- A</code>，以前半部分为基准的话，会出现 null 指针的异常。</p><p>此种解法的时间复杂度为O(n)，空间复杂度为O(1).</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 先找到中间节点，slow最后的结果就是中间节点</span></span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(ListNode curr = slow; slow != <span class="keyword">null</span>; )&#123;               </span><br><span class="line">            <span class="keyword">if</span>(fast == <span class="keyword">null</span> || fast.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                fast = fast.next.next;</span><br><span class="line">            &#125;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 从slow开始，对后链表后半部分进行反转</span></span><br><span class="line">        ListNode prev = <span class="keyword">null</span>;</span><br><span class="line">        ListNode curr = slow;</span><br><span class="line">        ListNode next = <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(curr != <span class="keyword">null</span>)&#123;</span><br><span class="line">            next = curr.next;</span><br><span class="line">            curr.next = prev;</span><br><span class="line">            prev = curr;</span><br><span class="line">            curr = next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 对前后两个部分进行比较</span></span><br><span class="line">        ListNode p1 = head;</span><br><span class="line">        ListNode p2 = prev;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(p2 != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p1.val != p2.val)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p1 = p1.next;</span><br><span class="line">            p2 = p2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LeetCode性能测试：</p><blockquote><p>Runtime: 1 ms, faster than 93.05% of Java online submissions forPalindrome Linked List.</p></blockquote><h3 id="解法三"><a href="#解法三" class="headerlink" title="解法三"></a>解法三</h3><p>解法三比较巧妙，不容易想到。思路如下：</p><ul><li>定义左右两个指针，左指针向右移动，”右指针向左移动”，对比左右两个指针是否配置。</li><li>我们这里是单链表，右指针怎么向左移动呢？这里通过递归的方式，当递归函数一层一层返回时，变相地实现了”右指针左移”的思路。</li></ul><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> ListNode head;</span><br><span class="line">    <span class="keyword">private</span> ListNode left;</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(ListNode head1)</span> </span>&#123;</span><br><span class="line">        head = head1;</span><br><span class="line">        <span class="keyword">return</span> isPalindromeUtil(head1);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isPalindromeUtil</span><span class="params">(ListNode right)</span></span>&#123; </span><br><span class="line">        left = head; </span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 当指向NULL时，停止递归</span></span><br><span class="line">        <span class="keyword">if</span> (right == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>; </span><br><span class="line">        &#125; </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 向右移动指针，递归调用</span></span><br><span class="line">        <span class="keyword">boolean</span> isp = isPalindromeUtil(right.next); </span><br><span class="line">        <span class="keyword">if</span> (isp == <span class="keyword">false</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>; </span><br><span class="line">        &#125; </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 比较左右指针是否匹配</span></span><br><span class="line">        <span class="keyword">boolean</span> isp1 = (right.val == left.val); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 移动左指针</span></span><br><span class="line">        left = left.next; </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> isp1; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LeetCode性能测试：</p><blockquote><p>Runtime: 3 ms, faster than 22.70% of Java online submissions forPalindrome Linked List.</p></blockquote><h2 id="相关练习"><a href="#相关练习" class="headerlink" title="相关练习"></a>相关练习</h2><ul><li><a href="https://wangwei.one/posts/java-algoDS-reverse-linked-list.html">链表反转</a></li><li><a href="https://wangwei.one/posts/java-algoDS-linked-list-cycle.html">链表环检测</a></li><li><a href="https://wangwei.one/posts/java-algoDS-Merge-Two-Sorted-Linked-Lists.html">有序链表合并</a></li><li><a href="https://wangwei.one/posts/java-algoDS-Remove-Nth-Node-From-End-of-List.html">删除倒数第N个节点</a></li><li><a href="https://wangwei.one/posts/java-algoDS-middle-of-the-linked-list.html">求链表的中间结点</a></li><li><a href="https://wangwei.one/posts/java-algoDS-LRU-implement-by-linkedlist.html">LRU算法实现</a></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《<a href="http://gk.link/a/101Nt" target="_blank" rel="noopener">数据结构与算法之美</a>》</li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AlgoDS </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法 | 如何实现LRU缓存淘汰算法]]></title>
      <url>/posts/java-algoDS-LRU-implement-by-linkedlist.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/picography-bicycle-road-bike-old-vintage-retro-1.jpg?imageslim" alt=""></p><p>前面，我们学习了 <a href="https://wangwei.one/posts/java-data-structures-and-algorithms-linkedlist.html">链表</a> 的实现，今天我们来学习链表的一个经典的应用场景——LRU淘汰算法。</p><a id="more"></a><p>缓存是一种提高数据读取性能的技术，在硬件设计、软件开发中都有着非常广泛的应用，比如常见的 CPU 缓存、数据库缓存、浏览器缓存等等。</p><p>缓存的大小有限，当缓存被用满时，哪些数据应该被清理出去，哪些数据应该被保留？这就需要缓存淘汰策略来决定。常见的策略有三种：先进先出策略 <code>FIFO（First In，First Out）</code>、最少使用策略 <code>LFU（Least Frequently Used）</code>、最近最少使用策略 <code>LRU（Least Recently Used）</code>，本篇将介绍LRU策略算法。</p><h2 id="LRU-Cache"><a href="#LRU-Cache" class="headerlink" title="LRU Cache"></a>LRU Cache</h2><p>这一算法的核心思想是，当缓存数据达到预设的上限后，会优先淘汰掉近期最少使用的缓存对象。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>LRU淘汰算法涉及数据的添加与删除，出于性能考虑，采用链表来进行实现，思路如下：</p><ul><li>维护一个双向链表用于存放缓存数据，越接近链表尾部的数据表示越少被使用到。</li><li>放入一个数据时，如果数据已存在则将其移动到链表头部，并更新Key所对应的Value值，如果不存在，则：<ul><li>如果缓存容量已达到最大值，则将链表尾部节点删除掉，将新的数据放入链表头部；</li><li>如果缓存容量未达到最大值，则直接将新的数据放入链表头部；</li></ul></li><li>查询一个数据时，遍历整个链表，如果能查询到对应的数据，则将其移动到链表头部；如果查询不到则返回<code>null</code>；<ul><li>由于遍历链表的时间复杂度为<code>O(n)</code>，我们可以使用散列表<code>HashMap</code>来记录每个Key所对应的Node节点，将时间复杂度降为O(1)。</li></ul></li></ul><p><img src="https://img.i7years.com/blog/LRU-Cache-Imp.png" alt="LRU-Cache"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.algorithms.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * LRU Cache</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> https://wangwei.one</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/01/29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line">    <span class="keyword">private</span> Node head;</span><br><span class="line">    <span class="keyword">private</span> Node tail;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;K, Node&gt; nodeMap;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        <span class="keyword">this</span>.nodeMap = <span class="keyword">new</span> HashMap&lt;&gt;(capacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get Key</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        Node existNode = nodeMap.get(key);</span><br><span class="line">        <span class="keyword">if</span> (existNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        remove(existNode);</span><br><span class="line">        addFirst(existNode);</span><br><span class="line">        <span class="keyword">return</span> existNode.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Add Key-Value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        Node existNode = nodeMap.get(key);</span><br><span class="line">        <span class="keyword">if</span> (existNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Node newNode = <span class="keyword">new</span> Node(key, value);</span><br><span class="line">            <span class="keyword">if</span> (nodeMap.size() &gt;= capacity) &#123;</span><br><span class="line">                removeLast();</span><br><span class="line">            &#125;</span><br><span class="line">            addFirst(newNode);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// update the value</span></span><br><span class="line">            existNode.value = value;</span><br><span class="line">            remove(existNode);</span><br><span class="line">            addFirst(existNode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * remove node</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        Node prev = node.prev;</span><br><span class="line">        Node next = node.next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">            head = next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            prev.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            tail = prev;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            next.prev = prev;</span><br><span class="line">        &#125;</span><br><span class="line">        nodeMap.remove(node.key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * add first node</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// don't forget set node prev pointer to null !</span></span><br><span class="line">        node.prev = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            head = tail = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node.next = head;</span><br><span class="line">            head.prev = node;</span><br><span class="line">            head = node;</span><br><span class="line">        &#125;</span><br><span class="line">        nodeMap.put(node.key, node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * remove last</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tail == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// remove key from map</span></span><br><span class="line">        nodeMap.remove(tail.key);</span><br><span class="line">        <span class="comment">// remove node from linked list</span></span><br><span class="line">        Node prev = tail.prev;</span><br><span class="line">        <span class="keyword">if</span> (prev != <span class="keyword">null</span>) &#123;</span><br><span class="line">            prev.next = <span class="keyword">null</span>;</span><br><span class="line">            tail = prev;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            head = tail = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> K key;</span><br><span class="line">        <span class="keyword">private</span> V value;</span><br><span class="line">        <span class="keyword">private</span> Node prev;</span><br><span class="line">        <span class="keyword">private</span> Node next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Node</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/wangweiX/java-algorithms/blob/master/src/main/java/one/wangwei/algorithms/utils/LRUCache.java" target="_blank" rel="noopener">源码</a></p></blockquote><p>LeetCode上相关的练习题：<a href="https://leetcode.com/problems/lru-cache/" target="_blank" rel="noopener">Leetcode 146. LRU Cache</a></p><p>性能测试：LeetCode上运行时间为<code>88ms</code>，超过了 <code>43.42%</code> 的Java代码。</p><h2 id="相关练习"><a href="#相关练习" class="headerlink" title="相关练习"></a>相关练习</h2><ul><li><a href="https://wangwei.one/posts/java-algoDS-reverse-linked-list.html">链表反转</a></li><li><a href="https://wangwei.one/posts/java-algoDS-linked-list-cycle.html">链表环检测</a></li><li><a href="https://wangwei.one/posts/java-algoDS-Merge-Two-Sorted-Linked-Lists.html">有序链表合并</a></li><li><a href="https://wangwei.one/posts/java-algoDS-Remove-Nth-Node-From-End-of-List.html">删除倒数第N个节点</a></li><li><a href="https://wangwei.one/posts/java-algoDS-middle-of-the-linked-list.html">求链表的中间结点</a></li><li><a href="https://wangwei.one/posts/java-algoDS-palindrome-linked-list.html">回文链表检测</a></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《<a href="http://gk.link/a/101Nt" target="_blank" rel="noopener">数据结构与算法之美</a>》</li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AlgoDS </tag>
            
            <tag> LeetCode </tag>
            
            <tag> LRU </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法 | LeetCode 224. Basic Calculator]]></title>
      <url>/posts/algoDS-java-leetcode-224-basic-calculator.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/62474_3d_space_scene.jpg?imageslim" alt="space_scene"></p><p>前面，我们学习了 <a href="https://wangwei.one/posts/java-data-structures-and-algorithms-stack.html">栈的实现及其应用</a> ，今天我们基于栈，来实现一个简单的计算器功能。</p><a id="more"></a><h2 id="简单计算器实现"><a href="#简单计算器实现" class="headerlink" title="简单计算器实现"></a>简单计算器实现</h2><blockquote><p>Leetcode 224. <a href="https://leetcode.com/problems/basic-calculator/" target="_blank" rel="noopener">Basic Calculator</a></p></blockquote><p>实现一个能够对简单的表达式进行计算的基础计算器。</p><p>表达式字符串包含括号 <code>(</code> 、<code>)</code>，加号(<code>+</code>)，减号(<code>-</code>)，非负整数以及空格(‘ ‘)。</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;1 + 1&quot;</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot; 2-1 + 2 &quot;</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;(1+(4+5+2)-3)+(6+8)&quot;</span><br><span class="line">Output: 23</span><br></pre></td></tr></table></figure><h3 id="使用两个栈来实现"><a href="#使用两个栈来实现" class="headerlink" title="使用两个栈来实现"></a>使用两个栈来实现</h3><p>根据 <a href="https://wangwei.one/posts/java-data-structures-and-algorithms-stack.html">栈的实现及其应用</a> 中学到的表达式求值的解法：</p><blockquote><p>编译器会使用两个栈来实现，一个栈用来保存操作数，另一个栈用来保存运算符。从左向右遍历表达式，遇到数字直接压入操作数栈，遇到操作符，就与运算符栈顶元素进行比较。</p><p>如果比运算符栈顶元素的优先级高，就将当前运算符压入栈；如果比运算符栈顶元素的优先级低或者相同，从运算符栈中取栈顶运算符，从操作数栈的栈顶取 2 个操作数，然后进行计算，再把计算完的结果压入操作数栈，继续比较。</p></blockquote><p>下面是我根据上面思路，写出来的第一版实现，相比于网上巧妙的解题方法，确实复杂很多，在LeetCode的运行时间为 <code>195 ms</code> ，只超过了 <code>8.14%</code> 的提交记录 😅 。</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ol><li>先对表达式进行校验，去除空格，并转化为ArrayList，如果按照一个字符一个字符去遍历的到，要是表达式中存在多位的整数，就行不通了。</li><li>对转化后的 ArrayList 进行遍历，遇到数字，直接压入操作数栈。</li><li>遇到操作符，则进行需要进行一系列的判断，特别是遇到括号的处理：<ol><li>操作符栈为空的情况下，直接入栈；</li><li>比较 <strong>新的操作符</strong> 与 <strong>操作符栈顶元素</strong> 的优先级，优先级高，则直接入栈。如果它们有一个或都是左括号，则直接入栈；</li><li>如果优先级低或相同，则对前面的表达式进行递归计算，将最后的结果压入操作数栈。之后，在递归调用自身，压入新的操作符。</li></ol></li><li>遍历结束后，在对操作数站进行最后一次递归计算；</li><li>取出操作数栈的栈顶元素。</li></ol><h4 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h4><p>里面用到的 <a href="https://wangwei.one/posts/java-data-structures-and-algorithms-stack.html#%E9%93%BE%E8%A1%A8%E6%A0%88">LinkedStack</a> 是我们前面自己实现的链表栈，当然使用 <a href="https://wangwei.one/posts/java-data-structures-and-algorithms-stack.html#%E9%A1%BA%E5%BA%8F%E6%A0%88">ArrayStack</a> 也可以。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.leetcode.stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> one.wangwei.algorithms.datastructures.stack.IStack;</span><br><span class="line"><span class="keyword">import</span> one.wangwei.algorithms.datastructures.stack.impl.LinkedStack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单计算器实现</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> https://wangwei.one</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/1/18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBasicCalculator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IStack&lt;Integer&gt; operand;</span><br><span class="line">    <span class="keyword">private</span> IStack&lt;String&gt; operator;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; highOperator;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; lowOperator;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; parentheses;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; operatorSet;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyBasicCalculator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.operand = <span class="keyword">new</span> LinkedStack&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.operator = <span class="keyword">new</span> LinkedStack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.parentheses = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.parentheses.add(<span class="string">"("</span>);</span><br><span class="line">        <span class="keyword">this</span>.parentheses.add(<span class="string">")"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.highOperator = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.highOperator.add(<span class="string">"*"</span>);</span><br><span class="line">        <span class="keyword">this</span>.highOperator.add(<span class="string">"/"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.lowOperator = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.lowOperator.add(<span class="string">"+"</span>);</span><br><span class="line">        <span class="keyword">this</span>.lowOperator.add(<span class="string">"-"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.operatorSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.operatorSet.addAll(highOperator);</span><br><span class="line">        <span class="keyword">this</span>.operatorSet.addAll(lowOperator);</span><br><span class="line">        <span class="keyword">this</span>.operatorSet.addAll(parentheses);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 运算表达式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Expression Invalid! expr="</span> + s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;String&gt; express = convertExpr(s);</span><br><span class="line">        <span class="keyword">for</span> (String str : express) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!operatorSet.contains(str)) &#123;</span><br><span class="line">                operand.push(Integer.valueOf(str));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                pushOperator(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对余下的操作数进行计算，得到最后的结果</span></span><br><span class="line">        operandCalcu();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> operand.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转换表达式</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 1. 去除空格</span></span><br><span class="line"><span class="comment">     * 2. 拆分出有效的数字</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ArrayList&lt;String&gt; <span class="title">convertExpr</span><span class="params">(String expr)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// remove empty spaces</span></span><br><span class="line">        String trimExpr = expr.replaceAll(<span class="string">"\\s+"</span>, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">        String tmpIntStr = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span> (Character ch : trimExpr.toCharArray()) &#123;</span><br><span class="line">            String str = ch.toString();</span><br><span class="line">            <span class="keyword">if</span> (operatorSet.contains(str)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!tmpIntStr.isEmpty()) &#123;</span><br><span class="line">                    result.add(tmpIntStr);</span><br><span class="line">                    tmpIntStr = <span class="string">""</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                result.add(str);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                tmpIntStr = tmpIntStr + str;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!tmpIntStr.isEmpty()) &#123;</span><br><span class="line">            result.add(tmpIntStr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 运算符入栈</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> operatorSign</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pushOperator</span><span class="params">(String operatorSign)</span> </span>&#123;</span><br><span class="line">        String prevOperator = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (!operator.empty()) &#123;</span><br><span class="line">            prevOperator = operator.peek();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 第一次入栈</span></span><br><span class="line">        <span class="keyword">if</span> (prevOperator == <span class="keyword">null</span>) &#123;</span><br><span class="line">            operator.push(operatorSign);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">")"</span>.equals(operatorSign) &amp;&amp; <span class="string">"("</span>.equals(prevOperator)) &#123;</span><br><span class="line">                operator.pop();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 第一次以后入栈，先比较优先级，高优先级，则入栈</span></span><br><span class="line">            <span class="keyword">if</span> (priority(operatorSign, prevOperator)) &#123;</span><br><span class="line">                operator.push(operatorSign);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 否则先对前面的表达式进行计算</span></span><br><span class="line">                operandCalcu();</span><br><span class="line">                pushOperator(operatorSign);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从操作数栈取出两个操作数进行计算</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">operandCalcu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (operator.empty()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String sign = operator.peek();</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"("</span>.equals(sign)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sign = operator.pop();</span><br><span class="line">        <span class="keyword">int</span> after = operand.pop();</span><br><span class="line">        <span class="keyword">int</span> front = operand.pop();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> value = calcIntegers(front, after, sign);</span><br><span class="line">        operand.push(value);</span><br><span class="line">        operandCalcu();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 比较优先级</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> next</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> prev</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">priority</span><span class="params">(String next, String prev)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (highOperator.contains(next)</span><br><span class="line">                &amp;&amp; lowOperator.contains(prev))</span><br><span class="line">                || <span class="string">"("</span>.equals(prev)</span><br><span class="line">                || <span class="string">"("</span>.equals(next);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对两个数字进行计算</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> front</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> after</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sign</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">calcIntegers</span><span class="params">(<span class="keyword">int</span> front, <span class="keyword">int</span> after, String sign)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (sign) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"+"</span>:</span><br><span class="line">                <span class="keyword">return</span> front + after;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"-"</span>:</span><br><span class="line">                <span class="keyword">return</span> front - after;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"*"</span>:</span><br><span class="line">                <span class="keyword">return</span> front * after;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"/"</span>:</span><br><span class="line">                <span class="keyword">return</span> front / after;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Sign Invalid! sign="</span> + sign);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        MyBasicCalculator solution = <span class="keyword">new</span> MyBasicCalculator();</span><br><span class="line">        System.out.println(solution.calculate(<span class="string">"1 + 1 - 3 + 4 - (8 + 2) - 4 + 3 - 1 - 4 + 6 - 9 + 1"</span>));</span><br><span class="line">        System.out.println(solution.calculate(<span class="string">"(1+(4+5+2)-3)+(6+8)"</span>));</span><br><span class="line">        System.out.println(solution.calculate(<span class="string">"1-(5)"</span>));</span><br><span class="line">        System.out.println(solution.calculate(<span class="string">"2-4-(8+2-6+(8+4-(1)+8-10))"</span>));</span><br><span class="line">        System.out.println(System.currentTimeMillis() - startTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/wangweiX/java-algorithms/blob/master/src/main/java/one/wangwei/leetcode/stack/MyBasicCalculator.java" target="_blank" rel="noopener">源码</a></p></blockquote><h3 id="巧妙的解法"><a href="#巧妙的解法" class="headerlink" title="巧妙的解法"></a>巧妙的解法</h3><p>下面我们来看看网上比较好的解法，相比于我的代码，简直不要爽太多，膜拜…… LeetCode上运行只需要耗时 27 ms.</p><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><ol><li>解析多位整数。比如解析123，第一次循环为 <code>1 * 10 + 2 = 12</code>，第二次循环为 <code>12 * 10 + 3 = 123</code>；</li><li>处理加减号。不是存储入到操作符栈，而是转为正负号，待到下一次循环时，与前面的累计结果进行相加；</li><li>处理括号。如果遇到 <code>左括号 (</code>，就将前面累计的结果与正负存储操作数栈，并将累计结果清空，正负号标记为正。等到遇到<code>右括号 )</code>时，就将这一次累计的结果与操作数栈顶存储的累计结果进行累加，得到一个最终结果；</li></ol><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.leetcode.stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单计算器实现</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> https://wangwei.one</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/1/18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicCalculator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 运算表达式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 操作数栈</span></span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="comment">// 正负号</span></span><br><span class="line">        <span class="keyword">int</span> sign = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 累计结果</span></span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Character.isDigit(s.charAt(i))) &#123;</span><br><span class="line">                <span class="comment">// 字符转换</span></span><br><span class="line">                <span class="keyword">int</span> num = s.charAt(i) - <span class="string">'0'</span>;</span><br><span class="line">                <span class="comment">// 处理多位整数</span></span><br><span class="line">                <span class="keyword">while</span> (i + <span class="number">1</span> &lt; s.length() &amp;&amp; Character.isDigit(s.charAt(i + <span class="number">1</span>))) &#123;</span><br><span class="line">                    num = num * <span class="number">10</span> + s.charAt(i + <span class="number">1</span>) - <span class="string">'0'</span>;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                result += num * sign;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.charAt(i) == <span class="string">'+'</span>) &#123;</span><br><span class="line">                sign = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.charAt(i) == <span class="string">'-'</span>) &#123;</span><br><span class="line">                sign = -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.charAt(i) == <span class="string">'('</span>) &#123;</span><br><span class="line">                stack.push(result);</span><br><span class="line">                stack.push(sign);</span><br><span class="line">                result = <span class="number">0</span>;</span><br><span class="line">                sign = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.charAt(i) == <span class="string">')'</span>) &#123;</span><br><span class="line">                result = result * stack.pop() + stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BasicCalculator calculator = <span class="keyword">new</span> BasicCalculator();</span><br><span class="line">        System.out.println(calculator.calculate(<span class="string">"2-4-(8+2-6 + (8 +4 -(1)+8-10))"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/wangweiX/java-algorithms/blob/master/src/main/java/one/wangwei/leetcode/stack/BasicCalculator.java" target="_blank" rel="noopener">源码</a></p></blockquote><p>知道原理是一回事，自己动手去实现，又是另外一回事！</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《<a href="http://gk.link/a/101Nt" target="_blank" rel="noopener">数据结构与算法之美</a>》</li><li><a href="https://time.geekbang.org/column/article/41222" target="_blank" rel="noopener">https://time.geekbang.org/column/article/41222</a></li><li><a href="https://www.youtube.com/watch?v=ijyUwyt5vkU&amp;t=114s" target="_blank" rel="noopener">https://www.youtube.com/watch?v=ijyUwyt5vkU&amp;t=114s</a></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AlgoDS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法 | 栈的实现及应用]]></title>
      <url>/posts/java-data-structures-and-algorithms-stack.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p align="center"><br><a target="_blank" href="https://www.pexels.com/photo/orange-and-blue-abstract-painting-1532704/"><img src="https://img.i7years.com/blog/abstract-expressionism-abstract-painting-acrylic-1532704.jpg?imageslim" title="abstract painting acrylic" alt="abstract painting acrylic"></a><br></p><p>前面，我们实现了两种常见的线性表 —— <a href="https://wangwei.one/posts/java-data-structures-and-algorithms-arraylist.html">顺序表</a> 和 <a href="https://wangwei.one/posts/java-data-structures-and-algorithms-linkedlist.html">链表</a> ，本篇我们来介绍另外一种常用的线性表 —— 栈。</p><a id="more"></a><blockquote><p>声明：本篇为极客时间《 <a href="http://gk.link/a/101Nt" target="_blank" rel="noopener">数据结构与算法之美</a> 》专栏《 <a href="https://time.geekbang.org/column/article/41222" target="_blank" rel="noopener">栈</a> 》这一部分的学习笔记，部分内容摘抄自专栏文章。</p></blockquote><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>线性表中的一种特殊数据结构，数据只能从固定的一端插入数据或删除数据，另一端是封死的。</p><p align="center"><br><a target="_blank" href="https://wangwei.one/posts/java-data-structures-and-algorithms-stack.html"><img src="https://img.i7years.com/blog/wangwei.one.stack.gif" title="stack" alt="stack"></a><br></p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li><p>FILO（First In Last Out）: 先进后出；</p></li><li><p>栈满还存会“上溢”，栈空再取会“下溢”；</p><blockquote><p>“上溢”：在栈已经存满数据元素的情况下，如果继续向栈内存入数据，栈存储就会出错。</p><p>“下溢”：在栈内为空的状态下，如果对栈继续进行取数据的操作，就会出错。</p></blockquote></li></ul><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><h3 id="顺序栈"><a href="#顺序栈" class="headerlink" title="顺序栈"></a>顺序栈</h3><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><ul><li>采用数组实现，数据在物理结构上保持连续性。</li></ul><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.algorithms.datastructures.stack.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> one.wangwei.algorithms.datastructures.stack.IStack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 顺序栈</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/05/04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayStack</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">IStack</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_SIZE = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> T[] array = (T[]) <span class="keyword">new</span> Object[DEFAULT_SIZE];</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 入栈</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">push</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size &gt;= array.length) &#123;</span><br><span class="line">            grow();</span><br><span class="line">        &#125;</span><br><span class="line">        array[size] = value;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扩容50%</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> growSize = size + (size &lt;&lt; <span class="number">1</span>);</span><br><span class="line">        array = Arrays.copyOf(array, growSize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 压缩50%</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">shrink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> shrinkSize = size &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        array = Arrays.copyOf(array, shrinkSize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出栈</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        T element = array[--size];</span><br><span class="line">        array[size] = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> shrinkSize = array.length &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (shrinkSize &gt;= DEFAULT_SIZE &amp;&amp; shrinkSize &gt; size) &#123;</span><br><span class="line">            shrink();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看栈顶值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array[size - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            T t = array[i];</span><br><span class="line">            <span class="keyword">if</span> (value == <span class="keyword">null</span> &amp;&amp; t == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> remove(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (value != <span class="keyword">null</span> &amp;&amp; value.equals(t)) &#123;</span><br><span class="line">                <span class="keyword">return</span> remove(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除 index 处的栈值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">"Index: "</span> + index + <span class="string">", Size: "</span> + size);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index != --size) &#123;</span><br><span class="line">            System.arraycopy(array, index + <span class="number">1</span>, array, index, size - index);</span><br><span class="line">        &#125;</span><br><span class="line">        array[size] = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> shrinkSize = array.length &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (shrinkSize &gt;= DEFAULT_SIZE &amp;&amp; shrinkSize &gt; size) &#123;</span><br><span class="line">            shrink();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清空栈</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            array[i] = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        array = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否包含元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            T t = array[i];</span><br><span class="line">            <span class="keyword">if</span> (value == <span class="keyword">null</span> &amp;&amp; t == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (value != <span class="keyword">null</span> &amp;&amp; value.equals(t)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 栈大小</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/wangweiX/java-algorithms/blob/master/src/main/java/one/wangwei/algorithms/datastructures/stack/impl/ArrayStack.java" target="_blank" rel="noopener">源码</a></p></blockquote><h4 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h4><h5 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h5><p>出栈和入栈的操作，只涉及一两个临时变量的存储空间，所以复杂度为O(1).</p><h5 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h5><p>顺序栈在出栈和入栈的操作时，最好情况时间复杂度为O(1)，当需要扩容或者缩减时，需要迁移数据，此时最坏情况时间复杂度为O(n). 根据摊还分析法则，它们的均摊时间复杂度还是为O(1).</p><h3 id="链表栈"><a href="#链表栈" class="headerlink" title="链表栈"></a>链表栈</h3><h4 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h4><ul><li>用线性表的链式结构存储，数据在物理结构上非连续</li></ul><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.algorithms.datastructures.stack.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> one.wangwei.algorithms.datastructures.stack.IStack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 链表栈</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/05/04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedStack</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">IStack</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node&lt;T&gt; top;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.top = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 入栈</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">push</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        Node&lt;T&gt; newTop = <span class="keyword">new</span> Node&lt;&gt;(value);</span><br><span class="line">        <span class="keyword">if</span> (top == <span class="keyword">null</span>) &#123;</span><br><span class="line">            top = newTop;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;T&gt; oldTop = top;</span><br><span class="line">            top = newTop;</span><br><span class="line">            oldTop.above = top;</span><br><span class="line">            top.below = oldTop;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出栈</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (top == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node&lt;T&gt; needTop = top;</span><br><span class="line">        top = needTop.below;</span><br><span class="line">        <span class="keyword">if</span> (top != <span class="keyword">null</span>) &#123;</span><br><span class="line">            top.above = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        T needValue = needTop.element;</span><br><span class="line">        needTop = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> needValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看栈顶值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> top == <span class="keyword">null</span> ? <span class="keyword">null</span> : top.element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (top == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node&lt;T&gt; x = top;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (x != <span class="keyword">null</span> &amp;&amp; x.element != <span class="keyword">null</span>) &#123;</span><br><span class="line">                x = x.below;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (x != <span class="keyword">null</span> &amp;&amp; !value.equals(x.element)) &#123;</span><br><span class="line">                x = x.below;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> remove(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除一个节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Node&lt;T&gt; node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node&lt;T&gt; above = node.above;</span><br><span class="line">        Node&lt;T&gt; below = node.below;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除中间元素</span></span><br><span class="line">        <span class="keyword">if</span> (above != <span class="keyword">null</span> &amp;&amp; below != <span class="keyword">null</span>) &#123;</span><br><span class="line">            above.below = below;</span><br><span class="line">            below.above = above;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 删除top元素</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (above == <span class="keyword">null</span> &amp;&amp; below != <span class="keyword">null</span>) &#123;</span><br><span class="line">            top = below;</span><br><span class="line">            top.above = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (above != <span class="keyword">null</span> &amp;&amp; below == <span class="keyword">null</span>) &#123;</span><br><span class="line">            above.below = <span class="keyword">null</span>;</span><br><span class="line">            below = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            top = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        node = <span class="keyword">null</span>;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清空栈</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (top == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;T&gt; x = top; x != <span class="keyword">null</span>; ) &#123;</span><br><span class="line">            Node&lt;T&gt; below = x.below;</span><br><span class="line">            x.element = <span class="keyword">null</span>;</span><br><span class="line">            x.above = <span class="keyword">null</span>;</span><br><span class="line">            x.below = <span class="keyword">null</span>;</span><br><span class="line">            x = below;</span><br><span class="line">        &#125;</span><br><span class="line">        top = <span class="keyword">null</span>;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否包含元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;T&gt; x = top; x != <span class="keyword">null</span>; x = x.below) &#123;</span><br><span class="line">                <span class="keyword">if</span> (x.element == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;T&gt; x = top; x != <span class="keyword">null</span>; x = x.below) &#123;</span><br><span class="line">                <span class="keyword">if</span> (x.element.equals(value)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 栈大小</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> T element;</span><br><span class="line">        <span class="keyword">private</span> Node&lt;T&gt; above;</span><br><span class="line">        <span class="keyword">private</span> Node&lt;T&gt; below;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(T element)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.element = element;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/wangweiX/java-algorithms/blob/master/src/main/java/one/wangwei/algorithms/datastructures/stack/impl/LinkedStack.java" target="_blank" rel="noopener">源码</a></p></blockquote><h4 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h4><h5 id="空间复杂度-1"><a href="#空间复杂度-1" class="headerlink" title="空间复杂度"></a>空间复杂度</h5><p>出栈和入栈的操作，只涉及一两个临时变量的存储空间，所以复杂度为O(1).</p><h5 id="时间复杂度-1"><a href="#时间复杂度-1" class="headerlink" title="时间复杂度"></a>时间复杂度</h5><p>出栈和入栈的操作，不涉及数据搬迁，只是顶部元素操作，时间复杂度均为O(1).</p><h2 id="栈的应用"><a href="#栈的应用" class="headerlink" title="栈的应用"></a>栈的应用</h2><p>接下来，我们看看栈在软件工程中的实际应用。</p><h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><p>操作系统给每个线程分配了一块独立的内存空间，这块内存被组织成“栈”这种结构, 用来存储函数调用时的临时变量。每进入一个函数，就会将临时变量作为一个栈帧入栈，当被调用函数执行完成，返回之后，将这个函数对应的栈帧出栈。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> a = <span class="number">1</span>; </span><br><span class="line">   <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">   ret = add(<span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">   res = a + ret;</span><br><span class="line">   printf(<span class="string">"%d"</span>, res);</span><br><span class="line">   reuturn <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">   sum = x + y;</span><br><span class="line">   <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main() 函数调用了 add() 函数，获取计算结果，并且与临时变量 a 相加，最后打印 res 的值。这个过程的中函数栈里的出栈、入栈操作，如下所示：</p><p><img src="https://img.i7years.com/blog/17b6c6711e8d60b61d65fb0df5559a1c.jpg" alt="17b6c6711e8d60b61d65fb0df5559a1c"></p><p><strong>思考</strong>：为什么函数要用栈来保存临时变量呢？用其他数据结构不行吗？</p><p>函数调用的局部状态之所以用栈来记录是因为这些状态数据的存活时间满足“后入先出”（LIFO）顺序，而栈的基本操作正好就是支持这种顺序的访问。</p><p>栈是程序设计中的一种经典数据结构，每个程序都拥有自己的程序栈。栈帧也叫过程活动记录，是编译器用来实现函数调用过程的一种数据结构。C语言中，每个栈帧对应着一个未运行完的函数。从逻辑上讲，栈帧就是一个函数执行的环境：函数调用框架、函数参数、函数的局部变量、函数执行完后返回到哪里等等。栈是从高地址向低地址延伸的。每个函数的每次调用，都有它自己独立的一个栈帧，这个栈帧中维持着所需要的各种信息。</p><p>寄存器ebp(base pointer)指向当前的栈帧的底部（高地址），可称为“帧指针”或“基址指针”；寄存器esp(stack pointer)指向当前的栈帧的顶部（低地址），可称为“ 栈指针”。</p><p><img src="https://img.i7years.com/blog/4380238-c33d9fdcf86a6730.png" alt="4380238-c33d9fdcf86a6730"></p><p>在C和C++语言中，临时变量分配在栈中，临时变量拥有函数级的生命周期，即“在当前函数中有效，在函数外无效”。这种现象就是函数调用过程中的参数压栈，堆栈平衡所带来的。<strong>堆栈平衡</strong>是指函数调完成后，要返还所有使用过的栈空间。</p><p>函数调用其实可以看做4个过程：</p><ol><li>压栈: 函数参数压栈，返回地址压栈</li><li>跳转: 跳转到函数所在代码处执行</li><li>执行: 执行函数代码</li><li>返回: 平衡堆栈，找出之前的返回地址，跳转回之前的调用点之后，完成函数调用</li></ol><h3 id="表达式求值"><a href="#表达式求值" class="headerlink" title="表达式求值"></a>表达式求值</h3><p>以 <code>3 + 5 x 8 - 6</code> 为这个表达式为例，编译器是如何利用栈来实现表达式求值的呢？</p><p>编译器会使用两个栈来实现，一个栈用来保存操作数，另一个栈用来保存运算符。从左向右遍历表达式，遇到数字直接压入操作数栈，遇到操作符，就与运算符栈顶元素进行比较。</p><p>如果比运算符栈顶元素的优先级高，就将当前运算符压入栈；如果比运算符栈顶元素的优先级低或者相同，从运算符栈中取栈顶运算符，从操作数栈的栈顶取 2 个操作数，然后进行计算，再把计算完的结果压入操作数栈，继续比较。</p><p>如图所示：</p><p><img src="https://img.i7years.com/blog/bc77c8d33375750f1700eb7778551600.jpg" alt="bc77c8d33375750f1700eb7778551600"></p><p>此前，我们在讲 <a href="https://wangwei.one/posts/build-blockchain-in-java-transaction-script.html">比特币脚本语言</a> 时，提到过 <strong>逆波兰表示法</strong> ，也是运用了栈这种数据结构特征。</p><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><blockquote><p>Leetcode 224. <a href="https://leetcode.com/problems/basic-calculator/" target="_blank" rel="noopener">Basic Calculator</a></p></blockquote><p>题目具体的分析，我放在了单独的文章中，👉 <a href="https://wangwei.one/posts/algoDS-java-leetcode-224-basic-calculator.html">戳此查看</a> 。</p><h3 id="括号匹配"><a href="#括号匹配" class="headerlink" title="括号匹配"></a>括号匹配</h3><p>栈还可以用来检测表达式中的括号是否匹配。</p><p>我们假设表达式中只包含三种括号，圆括号 ()、方括号 [] 和花括号{}，并且它们可以任意嵌套。比如，{[{}]}或 [{()}([])] 等都为合法格式，而{[}()] 或 [({)] 为不合法的格式。那我现在给你一个包含三种括号的表达式字符串，如何检查它是否合法呢？</p><p>我们用栈来保存未匹配的左括号，从左到右依次扫描字符串。当扫描到左括号时，则将其压入栈中；当扫描到右括号时，从栈顶取出一个左括号。如果能够匹配，比如“(”跟“)”匹配，“[”跟“]”匹配，“{”跟“}”匹配，则继续扫描剩下的字符串。如果扫描的过程中，遇到不能配对的右括号，或者栈中没有数据，则说明为非法格式。</p><p>当所有的括号都扫描完成之后，如果栈为空，则说明字符串为合法格式；否则，说明有未匹配的左括号，为非法格式。</p><h4 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h4><blockquote><p>Leetcode 20. <a href="https://leetcode.com/problems/valid-parentheses/" target="_blank" rel="noopener">Valid Parentheses</a></p></blockquote><p>我自己在做这道题时，虽说做对了，但是没有像下面的代码那样采用Map存储括号的对应关系，导致代码非常臃肿难堪。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Hash table that takes care of the mappings.</span></span><br><span class="line">  <span class="keyword">private</span> HashMap&lt;Character, Character&gt; mappings;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Initialize hash map with mappings. This simply makes the code easier to read.</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Solution</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.mappings = <span class="keyword">new</span> HashMap&lt;Character, Character&gt;();</span><br><span class="line">    <span class="keyword">this</span>.mappings.put(<span class="string">')'</span>, <span class="string">'('</span>);</span><br><span class="line">    <span class="keyword">this</span>.mappings.put(<span class="string">'&#125;'</span>, <span class="string">'&#123;'</span>);</span><br><span class="line">    <span class="keyword">this</span>.mappings.put(<span class="string">']'</span>, <span class="string">'['</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize a stack to be used in the algorithm.</span></span><br><span class="line">    Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;Character&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">      <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// If the current character is a closing bracket.</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.mappings.containsKey(c)) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get the top element of the stack. If the stack is empty, set a dummy value of '#'</span></span><br><span class="line">        <span class="keyword">char</span> topElement = stack.empty() ? <span class="string">'#'</span> : stack.pop();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If the mapping for this bracket doesn't match the stack's top element, return false.</span></span><br><span class="line">        <span class="keyword">if</span> (topElement != <span class="keyword">this</span>.mappings.get(c)) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// If it was an opening bracket, push to the stack.</span></span><br><span class="line">        stack.push(c);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the stack still contains elements, then it is an invalid expression.</span></span><br><span class="line">    <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="浏览器的前进、后退"><a href="#浏览器的前进、后退" class="headerlink" title="浏览器的前进、后退"></a>浏览器的前进、后退</h3><p>使用两个栈，X 和 Y，把首次浏览的页面依次压入栈 X，当点击后退按钮时，再依次从栈 X 中出栈，并将出栈的数据依次放入栈 Y。当我们点击前进按钮时，我们依次从栈 Y 中取出数据，放入栈 X 中。当栈 X 中没有数据时，那就说明没有页面可以继续后退浏览了。当栈 Y 中没有数据，那就说明没有页面可以点击前进按钮浏览了。</p><p>比如你顺序查看了 a，b，c 三个页面，我们就依次把 a，b，c 压入栈，这个时候，两个栈的数据就是这个样子：</p><p><img src="https://img.i7years.com/blog/4b579a76ea7ebfc5abae2ad6ae6a3c3d.jpg" alt="4b579a76ea7ebfc5abae2ad6ae6a3c3d"></p><p>当你通过浏览器的后退按钮，从页面 c 后退到页面 a 之后，我们就依次把 c 和 b 从栈 X 中弹出，并且依次放入到栈 Y。这个时候，两个栈的数据就是这个样子：<img src="https://img.i7years.com/blog/b5e496e2e28fe08f0388958a0e12861b.jpg" alt="b5e496e2e28fe08f0388958a0e12861b"></p><p>这个时候你又想看页面 b，于是你又点击前进按钮回到 b 页面，我们就把 b 再从栈 Y 中出栈，放入栈 X 中。此时两个栈的数据是这个样子：</p><p><img src="https://img.i7years.com/blog/ea804125bea25d25ba467a51fb98c4bc.jpg" alt="ea804125bea25d25ba467a51fb98c4bc"></p><p>这个时候，你通过页面 b 又跳转到新的页面 d 了，页面 c 就无法再通过前进、后退按钮重复查看了，所以需要清空栈 Y。此时两个栈的数据这个样子：</p><p><img src="https://img.i7years.com/blog/a3c926fe3050d9a741f394f20430692e.jpg" alt="a3c926fe3050d9a741f394f20430692e"></p><p>当然，我们还可以使用<strong>双向链表</strong>来实现这个功能。</p><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>我们都知道，JVM 内存管理中有个“堆栈”的概念。栈内存用来存储局部变量和方法调用，堆内存用来存储 Java 中的对象。那 JVM 里面的“栈”跟本篇说的“栈”是不是一回事呢？如果不是，那它为什么又叫作“栈”呢？</p><p>本篇介绍的栈是一种抽象的数据结构，而JVM中的”堆栈”是一种实际存在的物理结构，有关JVM堆栈的了解，可以看我之前的文章：<a href="https://wangwei.one/posts/java7-jvm-memory-model.html">https://wangwei.one/posts/java7-jvm-memory-model.html</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《<a href="http://gk.link/a/101Nt" target="_blank" rel="noopener">数据结构与算法之美</a>》</li><li><a href="https://time.geekbang.org/column/article/41222" target="_blank" rel="noopener">https://time.geekbang.org/column/article/41222</a></li><li><a href="http://data.biancheng.net/view/9.html" target="_blank" rel="noopener">http://data.biancheng.net/view/9.html</a></li><li><a href="https://www.jianshu.com/p/594357dff57e" target="_blank" rel="noopener">https://www.jianshu.com/p/594357dff57e</a></li><li><a href="https://www.cnblogs.com/33debug/p/6773059.html" target="_blank" rel="noopener">https://www.cnblogs.com/33debug/p/6773059.html</a></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AlgoDS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法 | Leetcode 876. middle-of-the-linked-list]]></title>
      <url>/posts/java-algoDS-middle-of-the-linked-list.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/pexels-photo-1563356.jpeg?imageslim" alt=""></p><p>前面，我们实现了 <a href="https://wangwei.one/posts/java-algoDS-Remove-Nth-Node-From-End-of-List.html">删除单链表倒数第N个节点</a> 操作，本篇来聊聊，如何求一个链表的中间节点。</p><a id="more"></a><h2 id="求链表的中间结点"><a href="#求链表的中间结点" class="headerlink" title="求链表的中间结点"></a>求链表的中间结点</h2><blockquote><p><a href="https://leetcode.com/problems/middle-of-the-linked-list/" target="_blank" rel="noopener">Leetcode 876. Middle of the Linked List</a></p></blockquote><p>给定一个非空的单链表，要求返回它的中间节点，如果中间节点有两个则返回第二个。</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,2,3,4,5]</span><br><span class="line">Output: Node 3 from this list</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,2,3,4,5,6]</span><br><span class="line">Output: Node 4 from this list</span><br></pre></td></tr></table></figure><h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><p>第一种解法的思路比较容易想得到，先计算出链表的总长度，再计算出中间节点的下标，然后得遍历得到对应的节点即可。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">middleNode</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(ListNode curr = head; curr != <span class="keyword">null</span>; )&#123;</span><br><span class="line">            len++;</span><br><span class="line">            curr = curr.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> targetIndex = <span class="number">0</span>;</span><br><span class="line">        ListNode target = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span>(ListNode curr = head; curr != <span class="keyword">null</span>; )&#123;</span><br><span class="line">            <span class="keyword">if</span>(targetIndex == len / <span class="number">2</span>)&#123;</span><br><span class="line">                target = curr;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            targetIndex++;</span><br><span class="line">            curr = curr.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><p>第二种解法，使用快慢指针，让快指针的移动速度是慢指针的两倍，等到快指针到达终点时，慢指针恰好抵达中间节点。</p><blockquote><p>一段小路上，A车行驶的速度是B车的两倍，等到A车到达终点时，B车恰好达到小路的中间位置。</p></blockquote><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">middleNode</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(ListNode curr = slow; slow != <span class="keyword">null</span>; )&#123;               </span><br><span class="line">            <span class="keyword">if</span>(fast == <span class="keyword">null</span> || fast.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                fast = fast.next.next;</span><br><span class="line">            &#125;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到目前为止，我们已经使用快慢指针解决三个单链表相关的问题了：</p><blockquote><p><a href="https://wangwei.one/posts/java-algoDS-linked-list-cycle.html">单链表环检测</a></p><p><a href="https://wangwei.one/posts/java-algoDS-Remove-Nth-Node-From-End-of-List.html">删除单链表倒数第N个节点</a></p><p><a href="https://wangwei.one/posts/java-algoDS-middle-of-the-linked-list.html">求链表的中间结点</a></p></blockquote><h3 id="解法三"><a href="#解法三" class="headerlink" title="解法三"></a>解法三</h3><p>解法三也比较巧妙， 遍历单链表，只有当下标为奇数时，指针才向前移动，到最后，指针所指即为中间节点。</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">middleNode</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode target = head;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(ListNode curr = head; curr != <span class="keyword">null</span>; )&#123;</span><br><span class="line">            <span class="keyword">if</span>(index % <span class="number">2</span> == <span class="number">1</span>)&#123;</span><br><span class="line">                target = target.next;</span><br><span class="line">            &#125;</span><br><span class="line">            index++;</span><br><span class="line">            curr = curr.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  target;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上三种解法的时间复杂度均为O(n)，在leetcode上的运行时间为 1ms，超过 <code>82.96%</code> 。</p><h2 id="相关练习"><a href="#相关练习" class="headerlink" title="相关练习"></a>相关练习</h2><ul><li><a href="https://wangwei.one/posts/java-algoDS-reverse-linked-list.html">链表反转</a></li><li><a href="https://wangwei.one/posts/java-algoDS-linked-list-cycle.html">链表环检测</a></li><li><a href="https://wangwei.one/posts/java-algoDS-Merge-Two-Sorted-Linked-Lists.html">有序链表合并</a></li><li><a href="https://wangwei.one/posts/java-algoDS-Remove-Nth-Node-From-End-of-List.html">删除倒数第N个节点</a></li><li><a href="https://wangwei.one/posts/java-algoDS-LRU-implement-by-linkedlist.html">LRU算法实现</a></li><li><a href="https://wangwei.one/posts/java-algoDS-palindrome-linked-list.html">回文链表检测</a></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《<a href="http://gk.link/a/101Nt" target="_blank" rel="noopener">数据结构与算法之美</a>》</li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AlgoDS </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法 | Leetcode 19. Remove Nth Node From End of List]]></title>
      <url>/posts/java-algoDS-Remove-Nth-Node-From-End-of-List.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/puppy-dog-cute-love-cat-mammal-727359-pxhere.com.jpg?imageslim" alt="puppy-dog-cute-love-cat-mammal"></p><p>前面，我们实现了 <a href="https://wangwei.one/posts/java-algoDS-Merge-Two-Sorted-Linked-Lists.html">两个有序链表的合并</a> 操作，本篇来聊聊，如何删除一个链表的倒数第N个节点。</p><a id="more"></a><h2 id="删除单链表倒数第N个节点"><a href="#删除单链表倒数第N个节点" class="headerlink" title="删除单链表倒数第N个节点"></a>删除单链表倒数第N个节点</h2><blockquote><p><a href="https://leetcode.com/problems/remove-nth-node-from-end-of-list/" target="_blank" rel="noopener">Leetcode 19. Remove Nth Node From End of List</a></p></blockquote><p>给定一个单链表，如: <code>1-&gt;2-&gt;3-&gt;4-&gt;5</code>，要求删除倒数第N个节点，假设 <code>N = 2</code>，并返回头节点。</p><p>则返回结果：<code>1-&gt;2-&gt;3-&gt;5</code> .</p><h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><p>这一题的难度标记为 <code>medium</code>，解法一比较容易想出来，我个人觉得难度不大。</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>循环两遍：</p><ol><li>先遍历一遍，求得整个链表的长度。</li><li>再遍历一遍，当总长度<code>len</code>减去 <code>n</code> ，恰好等于循环的下标<code>i</code>时，就找到对应要删除的目标元素，将<code>prev</code>节点与<code>next</code>节点连接起来即可。</li></ol><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(ListNode curr = head ; curr != <span class="keyword">null</span>;)&#123;</span><br><span class="line">            len++;</span><br><span class="line">            curr = curr.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// remove head</span></span><br><span class="line">        <span class="keyword">if</span>(len == n)&#123;</span><br><span class="line">            <span class="keyword">return</span> head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ListNode prev = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(ListNode curr = head; curr != <span class="keyword">null</span>;)&#123;</span><br><span class="line">            i++;</span><br><span class="line">            prev = curr;</span><br><span class="line">            curr = curr.next;</span><br><span class="line">         </span><br><span class="line">            <span class="keyword">if</span>(i == (len - n))&#123;</span><br><span class="line">                prev.next = curr.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Leetcode测试的运行时间为<code>6ms</code>，超过了<code>98.75%</code>的java代码。</p><h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><p>这种解法，比较巧妙，没有想出来，查了网上的解法，思路如下：</p><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>只需要循环一遍，定义两个指针，一个快指针，一个慢指针，让快指针的巧好领先于慢指针<code>n</code>步。当快指针到达tail节点时，满指针巧好就是我们需要删除的目标元素。</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(fast == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ListNode prev = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span>(ListNode curr = slow; curr != <span class="keyword">null</span>; )&#123;</span><br><span class="line">            <span class="comment">// when fast arrived at tail, remove slow.</span></span><br><span class="line">            <span class="keyword">if</span>(fast == <span class="keyword">null</span>)&#123;</span><br><span class="line">                prev.next =  curr.next;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            prev = curr;</span><br><span class="line">            curr = curr.next;</span><br><span class="line">            <span class="comment">// move fast forward</span></span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码在LeetCode上的测试结果与解法一的一样。</p><p>这种解法与之前的 <a href="https://wangwei.one/posts/java-algoDS-linked-list-cycle.html">链表环检测</a> 题目中都使用到了快慢指针，用来定位特定的元素。</p><h2 id="相关练习"><a href="#相关练习" class="headerlink" title="相关练习"></a>相关练习</h2><ul><li><a href="https://wangwei.one/posts/java-algoDS-reverse-linked-list.html">链表反转</a></li><li><a href="https://wangwei.one/posts/java-algoDS-linked-list-cycle.html">链表环检测</a></li><li><a href="https://wangwei.one/posts/java-algoDS-Merge-Two-Sorted-Linked-Lists.html">有序链表合并</a></li><li><a href="https://wangwei.one/posts/java-algoDS-middle-of-the-linked-list.html">求链表的中间结点</a></li><li><a href="https://wangwei.one/posts/java-algoDS-LRU-implement-by-linkedlist.html">LRU算法实现</a></li><li><a href="https://wangwei.one/posts/java-algoDS-palindrome-linked-list.html">回文链表检测</a></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《<a href="http://gk.link/a/101Nt" target="_blank" rel="noopener">数据结构与算法之美</a>》</li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AlgoDS </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法 | Leetcode 21. Merge Two Sorted Lists]]></title>
      <url>/posts/java-algoDS-Merge-Two-Sorted-Linked-Lists.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/bicycle_journey-wallpaper-960x600.jpg?imageslim" alt="bicycle_journey-wallpaper"></p><p>前面，我们实现了链表的 <a href="https://wangwei.one/posts/java-algoDS-linked-list-cycle.html">环检测</a> 操作，本篇来聊聊，如何合并两个有序链表。</p><a id="more"></a><h2 id="有序链表合并"><a href="#有序链表合并" class="headerlink" title="有序链表合并"></a>有序链表合并</h2><blockquote><p><a href="https://leetcode.com/problems/merge-two-sorted-lists/" target="_blank" rel="noopener">Leetcode 21. Merge Two Sorted Lists</a></p></blockquote><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 1-&gt;2-&gt;4, 1-&gt;3-&gt;4</span><br><span class="line">Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</span><br></pre></td></tr></table></figure><h3 id="使用虚假的Head节点"><a href="#使用虚假的Head节点" class="headerlink" title="使用虚假的Head节点"></a>使用虚假的Head节点</h3><p>定义一个临时虚假的Head节点，再创建一个指向tail的指针，以便于在尾部添加节点。</p><p>对ListNode1和ListNode2同时进行遍历，比较每次取出来的节点大小，并绑定到前面tail指针上去，直到最终所有的元素全部遍历完。</p><p>最后，返回 <code>dummyNode.next</code> ，即为新链表的head节点。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        ListNode dummyNode = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode tail = dummyNode;  </span><br><span class="line">    </span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l1 == <span class="keyword">null</span>)&#123;</span><br><span class="line">                tail.next = l2;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(l2 == <span class="keyword">null</span>)&#123;</span><br><span class="line">                tail.next = l1;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">            ListNode next1 = l1;</span><br><span class="line">            ListNode next2 = l2;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(next1.val &lt;= next2.val)&#123;</span><br><span class="line">                tail.next = next1;</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                tail.next = next2;</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">            &#125; </span><br><span class="line">            tail = tail.next;</span><br><span class="line">        &#125;        </span><br><span class="line">        <span class="keyword">return</span> dummyNode.next;       </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>使用递归的方式，代码比遍历看上去简洁很多，但是它所占用的栈空间会随着链表节点数量的增加而增加。</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    	</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        ListNode result = <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(l1 == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> l2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(l2 == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> l1;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(l1.val &lt;= l2.val)&#123;</span><br><span class="line">            result = l1;</span><br><span class="line">            result.next = mergeTwoLists(l1.next, l2);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            result = l2;</span><br><span class="line">            result.next = mergeTwoLists(l1, l2.next);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="相关练习"><a href="#相关练习" class="headerlink" title="相关练习"></a>相关练习</h2><ul><li><a href="https://wangwei.one/posts/java-algoDS-reverse-linked-list.html">链表反转</a></li><li><a href="https://wangwei.one/posts/java-algoDS-linked-list-cycle.html">链表环检测</a></li><li><a href="https://wangwei.one/posts/java-algoDS-Remove-Nth-Node-From-End-of-List.html">删除倒数第N个节点</a></li><li><a href="https://wangwei.one/posts/java-algoDS-middle-of-the-linked-list.html">求链表的中间结点</a></li><li><a href="https://wangwei.one/posts/java-algoDS-LRU-implement-by-linkedlist.html">LRU算法实现</a></li><li><a href="https://wangwei.one/posts/java-algoDS-palindrome-linked-list.html">回文链表检测</a></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《<a href="http://gk.link/a/101Nt" target="_blank" rel="noopener">数据结构与算法之美</a>》</li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AlgoDS </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法 | Leetcode 141. Linked List Cycle]]></title>
      <url>/posts/java-algoDS-linked-list-cycle.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/pexels-photo-589810.jpeg?imageslim" alt="pexels-photo-589810"></p><p>前面，我们实现了链表的 <a href="https://wangwei.one/posts/java-algoDS-reverse-linked-list.html">反转</a> 操作，本篇来聊聊，如何检测单链表中的环。</p><a id="more"></a><h2 id="单链表环检测"><a href="#单链表环检测" class="headerlink" title="单链表环检测"></a>单链表环检测</h2><blockquote><p><a href="https://leetcode.com/problems/linked-list-cycle/" target="_blank" rel="noopener">Leetcode 141. Linked List Cycle</a></p></blockquote><p>有两种方法来解决这个问题：</p><h3 id="使用Hashing"><a href="#使用Hashing" class="headerlink" title="使用Hashing"></a>使用Hashing</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>定义一个Map，当循环遍历Linked List时，依次将Node放入Map中，等到循环到下一轮时，检查Node是否存在于Map中，若存在则表示有环存在。</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> IdentityHashMap();</span><br><span class="line">        <span class="keyword">for</span>(ListNode x = head; x != <span class="keyword">null</span>;)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(x))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(x, <span class="keyword">null</span>);</span><br><span class="line">            x = x.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Floyd判圈算法"><a href="#Floyd判圈算法" class="headerlink" title="Floyd判圈算法"></a>Floyd判圈算法</h3><p>这一种方法，不上网查资料是怎么也想不到的，非常巧妙！！！</p><blockquote><p><a href="https://zh.wikipedia.org/wiki/Floyd%E5%88%A4%E5%9C%88%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">Floyd判圈算法</a></p><p>如果有限状态机、迭代函数或者链表上存在环，那么在某个环上以不同速度前进的2个<a href="https://zh.wikipedia.org/wiki/%E6%8C%87%E9%92%88_(%E4%BF%A1%E6%81%AF%E5%AD%A6" target="_blank" rel="noopener">指针</a>)必定会在某个时刻相遇。同时显然地，如果从同一个起点(即使这个起点不在某个环上)同时开始以不同速度前进的2个指针最终相遇，那么可以判定存在一个环，且可以求出2者相遇处所在的环的起点与长度。</p></blockquote><p>从Linked List的Head节点出发，我们定义两个移动指针，一个的移动速度为每次前进一个节点，另一个每次前进两个节点。然后判断这两个指针移动后的结果是否相等。</p><blockquote><p>这就类似于两个人在操场上的跑步一样，一个快，一个慢，他们总会在某一个位置相遇。</p></blockquote><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            <span class="keyword">if</span>(slow == fast)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两种方式的时间复杂度均为O(n)，空间复杂度均为O(1).</p><h2 id="相关练习"><a href="#相关练习" class="headerlink" title="相关练习"></a>相关练习</h2><ul><li><a href="https://wangwei.one/posts/java-algoDS-reverse-linked-list.html">链表反转</a></li><li><a href="https://wangwei.one/posts/java-algoDS-Merge-Two-Sorted-Linked-Lists.html">有序链表合并</a></li><li><a href="https://wangwei.one/posts/java-algoDS-Remove-Nth-Node-From-End-of-List.html">删除倒数第N个节点</a></li><li><a href="https://wangwei.one/posts/java-algoDS-middle-of-the-linked-list.html">求链表的中间结点</a></li><li><a href="https://wangwei.one/posts/java-algoDS-LRU-implement-by-linkedlist.html">LRU算法实现</a></li><li><a href="https://wangwei.one/posts/java-algoDS-palindrome-linked-list.html">回文链表检测</a></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.geeksforgeeks.org/detect-loop-in-a-linked-list/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/detect-loop-in-a-linked-list/</a></li><li><a href="https://marcin-chwedczuk.github.io/find-cycle-start-in-singly-linked-list" target="_blank" rel="noopener">https://marcin-chwedczuk.github.io/find-cycle-start-in-singly-linked-list</a></li><li><a href="https://zh.wikipedia.org/wiki/Floyd%E5%88%A4%E5%9C%88%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">Floyd判圈算法</a></li><li>《<a href="http://gk.link/a/101Nt" target="_blank" rel="noopener">数据结构与算法之美</a>》</li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AlgoDS </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法 | Leetcode 206. Reverse Linked List]]></title>
      <url>/posts/java-algoDS-reverse-linked-list.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/62466_miscellaneous_small_mountain_village.jpg?imageslim" alt="pexels-photo-356807"></p><p>前面我们实现了几种常见的 <a href="https://wangwei.one/java-data-structures-and-algorithms-linkedlist.html">链表</a> ，接下来，我们来聊聊如何实现 <a href="https://github.com/wangweiX/java-algorithms/blob/master/src/main/java/one/wangwei/algorithms/datastructures/list/impl/SingleLinkedList.java" target="_blank" rel="noopener">单链表</a> 的反转。</p><a id="more"></a><h2 id="链表反转"><a href="#链表反转" class="headerlink" title="链表反转"></a>链表反转</h2><blockquote><p><a href="https://leetcode.com/problems/reverse-linked-list/" target="_blank" rel="noopener">Leetcode 206: Reverse Linked List</a></p></blockquote><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</span><br><span class="line">Output: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</span><br><span class="line"></span><br><span class="line">Input: NULL</span><br><span class="line">Output: NULL</span><br></pre></td></tr></table></figure><p>我们可以通过循环遍历和递归这两种方式来实现链表的反转。</p><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>定义三个指针，分别为prev、curr、next，然后遍历所有node结点，并移动这三个指针，改变curr结点的next指向，指向prev结点，实现linkedList的反转。</p><p><img src="https://img.i7years.com/blog/LinkedList-Reverse-Iteratively&amp;.gif" alt="LinkedList-Reverse-Iteratively"></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode prev = <span class="keyword">null</span>;</span><br><span class="line">        ListNode curr = head;</span><br><span class="line">        ListNode next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(curr != <span class="keyword">null</span>)&#123;</span><br><span class="line">            next = curr.next;</span><br><span class="line">            curr.next = prev;        </span><br><span class="line">            prev = curr;</span><br><span class="line">            curr = next;</span><br><span class="line">        &#125;</span><br><span class="line">        head = prev;</span><br><span class="line">        <span class="keyword">return</span> head; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/wangweiX/java-algorithms/blob/master/src/main/java/one/wangwei/algorithms/datastructures/list/impl/SingleLinkedList.java#L304" target="_blank" rel="noopener">源码</a></p></blockquote><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>其实递归的实现方式和前面循环的方式非常相似，前者是通过循环来移动指针，后者是通过递归来移动指针。</p><p>定义一个递归接口，传入curr与prev节点作为参数，内部再将curr的作为下次递归调用的prev入参，<code>curr.next</code> 作为下次递归调用的curr入参。</p><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> reverseRecursively(head, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseRecursively</span><span class="params">(ListNode curr, ListNode prev)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(curr == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(curr.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">            ListNode head = curr;</span><br><span class="line">            curr.next = prev;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode next1 = curr.next;</span><br><span class="line">        curr.next = prev;</span><br><span class="line">        </span><br><span class="line">        ListNode head = reverseRecursively(next1, curr);</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/wangweiX/java-algorithms/blob/master/src/main/java/one/wangwei/algorithms/datastructures/list/impl/SingleLinkedList.java#L324" target="_blank" rel="noopener">源码</a></p></blockquote><p>这两种方式的时间复杂度均为O(n)，空间复杂度均为O(1)。</p><h2 id="相关练习"><a href="#相关练习" class="headerlink" title="相关练习"></a>相关练习</h2><ul><li><a href="https://wangwei.one/posts/java-algoDS-linked-list-cycle.html">链表环检测</a></li><li><a href="https://wangwei.one/posts/java-algoDS-Merge-Two-Sorted-Linked-Lists.html">有序链表合并</a></li><li><a href="https://wangwei.one/posts/java-algoDS-Remove-Nth-Node-From-End-of-List.html">删除倒数第N个节点</a></li><li><a href="https://wangwei.one/posts/java-algoDS-middle-of-the-linked-list.html">求链表的中间结点</a></li><li><a href="https://wangwei.one/posts/java-algoDS-LRU-implement-by-linkedlist.html">LRU算法实现</a></li><li><a href="https://wangwei.one/posts/java-algoDS-palindrome-linked-list.html">回文链表检测</a></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《<a href="http://gk.link/a/101Nt" target="_blank" rel="noopener">数据结构与算法之美</a>》</li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AlgoDS </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法 | 线性表 —— 链表]]></title>
      <url>/posts/java-data-structures-and-algorithms-linkedlist.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/pexels-photo-1322185.jpeg?imageslim" alt="pexels-photo-1322185"></p><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>逻辑结构上一个挨一个的数据，在实际存储时，并没有像顺序表那样也相互紧挨着。恰恰相反，数据随机分布在内存中的各个位置，这种存储结构称为<strong>线性表的链式存储</strong>。</p><a id="more"></a><p>由于分散存储，为了能够体现出数据元素之间的逻辑关系，每个数据元素在存储的同时，要配备一个指针，用于指向它的直接后继元素，即每一个数据元素都指向下一个数据元素（最后一个指向NULL(空)）。这种结构成为 “<strong>单向链表</strong>“。</p><p><img src="https://img.i7years.com/blog/SingleLinkedList&amp;.png" alt="SingleLinkedList"></p><p>在单向链表的基础上，给各个结点额外配备一个指针变量，用于指向每个结点的直接前趋元素。这样的链表被称为“<strong>双向链表</strong>”或者“双链表”。</p><p><img src="https://img.i7years.com/blog/DoublyLinkedList&amp;.png" alt="DoublyLinkedList"></p><p>当单向链表的尾部数据指向头部数据时，就构成了<strong>单向循环链表</strong>。</p><p><img src="https://img.i7years.com/blog/SinglyCircularLinkedList&amp;.png" alt="SinglyCircularLinkedList"></p><p>当双向链表的头部和尾部相互指向时，就构成了<strong>双向循环链表</strong>。</p><p><img src="https://img.i7years.com/blog/DoublyCircularLinkedList&amp;.png" alt="DoublyCircularLinkedList"></p><h2 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h2><p>单向链表在插入元素、删除元素时，需要获取前驱元素，需要从head开始遍历，时间复杂度为O(n)。</p><p>根据index查询对应元素，也需要从head开始遍历，时间复杂度为O(n)。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.algorithms.datastructures.list.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> one.wangwei.algorithms.datastructures.list.IList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Single Linked List</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> https://wangwei.one</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/12/25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleLinkedList</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">IList</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * size</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * head node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Node&lt;T&gt; head;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * tail node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Node&lt;T&gt; tail;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * add element</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(T element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> addLast(element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * add element at index</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, T element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span> + index + <span class="string">", Size: "</span> + size);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index == size) &#123;</span><br><span class="line">            <span class="keyword">return</span> add(element);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> addBefore(index, element);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Add Last element</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">addLast</span><span class="params">(T element)</span> </span>&#123;</span><br><span class="line">        Node&lt;T&gt; last = tail;</span><br><span class="line">        Node&lt;T&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(<span class="keyword">null</span>, element);</span><br><span class="line">        tail = newNode;</span><br><span class="line">        <span class="comment">// if linked list is empty</span></span><br><span class="line">        <span class="keyword">if</span> (last == <span class="keyword">null</span>) &#123;</span><br><span class="line">            head = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            last.next = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * add element before certain element</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">addBefore</span><span class="params">(<span class="keyword">int</span> index, T element)</span> </span>&#123;</span><br><span class="line">        checkPositionIndex(index);</span><br><span class="line">        <span class="comment">// prev node</span></span><br><span class="line">        Node&lt;T&gt; prev = <span class="keyword">null</span>;</span><br><span class="line">        Node&lt;T&gt; x = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">            prev = x;</span><br><span class="line">            x = x.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// current node</span></span><br><span class="line">        Node&lt;T&gt; current = x;</span><br><span class="line">        <span class="comment">// new node</span></span><br><span class="line">        Node&lt;T&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(current, element);</span><br><span class="line">        <span class="comment">// if current node is head</span></span><br><span class="line">        <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">            head = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            prev.next = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * remove element</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(T element)</span> </span>&#123;</span><br><span class="line">        Node&lt;T&gt; prev = <span class="keyword">null</span>;</span><br><span class="line">        Node&lt;T&gt; x = head;</span><br><span class="line">        <span class="keyword">if</span> (element == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (x != <span class="keyword">null</span> &amp;&amp; x.element != <span class="keyword">null</span>) &#123;</span><br><span class="line">                prev = x;</span><br><span class="line">                x = x.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (x != <span class="keyword">null</span> &amp;&amp; !x.element.equals(element)) &#123;</span><br><span class="line">                prev = x;</span><br><span class="line">                x = x.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if this linked is null OR don't find element</span></span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node&lt;T&gt; next = x.next;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if delete node is head</span></span><br><span class="line">        <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">            head = next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            prev.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// if delete node is tail</span></span><br><span class="line">        <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            tail = prev;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// for GC</span></span><br><span class="line">        x.element = <span class="keyword">null</span>;</span><br><span class="line">        x = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * remove element by index</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        checkPositionIndex(index);</span><br><span class="line">        Node&lt;T&gt; prev = <span class="keyword">null</span>;</span><br><span class="line">        Node&lt;T&gt; x = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">            prev = x;</span><br><span class="line">            x = x.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if linked is empty</span></span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node&lt;T&gt; next = x.next;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if delete node is head</span></span><br><span class="line">        <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">            head = next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            prev.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if delete node is tail</span></span><br><span class="line">        <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            tail = prev;</span><br><span class="line">        &#125;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> x.element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * set element by index</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> old element</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, T element)</span> </span>&#123;</span><br><span class="line">        checkPositionIndex(index);</span><br><span class="line">        Node&lt;T&gt; node = node(index);</span><br><span class="line">        T oldElement = node.element;</span><br><span class="line">        node.element = element;</span><br><span class="line">        <span class="keyword">return</span> oldElement;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get element by index</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        Node&lt;T&gt; node = node(index);</span><br><span class="line">        <span class="keyword">return</span> node == <span class="keyword">null</span> ? <span class="keyword">null</span> : node.element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get element by index</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node&lt;T&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        checkPositionIndex(index);</span><br><span class="line">        Node&lt;T&gt; x = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">            x = x.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * check index</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkPositionIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span> + index + <span class="string">", Size: "</span> + size);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * clear list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;T&gt; x = head; x != <span class="keyword">null</span>; ) &#123;</span><br><span class="line">            Node&lt;T&gt; next = x.next;</span><br><span class="line">            x.element = <span class="keyword">null</span>;</span><br><span class="line">            x.next = <span class="keyword">null</span>;</span><br><span class="line">            x = next;</span><br><span class="line">        &#125;</span><br><span class="line">        head = tail = <span class="keyword">null</span>;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * contain certain element</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(T element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (element == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;T&gt; x = head; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">                <span class="keyword">if</span> (x.element == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;T&gt; x = head; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">                <span class="keyword">if</span> (x.element.equals(element)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get list size</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Linked List Node</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Node&lt;T&gt; next;</span><br><span class="line">        <span class="keyword">private</span> T element;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Node&lt;T&gt; next, T element)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">            <span class="keyword">this</span>.element = element;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/wangweiX/java-algorithms/blob/master/src/main/java/one/wangwei/algorithms/datastructures/list/impl/SingleLinkedList.java" target="_blank" rel="noopener">源码</a></p></blockquote><h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><p>相比于单向链表，双向链表多了一个前驱指针，在查找前驱节点时，时间复杂度降低为了O(1)。</p><p>通过index查询，删除某个node节点，时间复杂度都降为了O(1)。代码如下：</p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.algorithms.datastructures.list.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> one.wangwei.algorithms.datastructures.list.IList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Doubly Linked List</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> https://wangwei.one</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/04/28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoublyLinkedList</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">IList</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * size</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * head element</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Node&lt;T&gt; head = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * tail element</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Node&lt;T&gt; tail = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * add element</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(T element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> addLast(element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * add element at index</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, T element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span> + index + <span class="string">", Size: "</span> + size);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index == size) &#123;</span><br><span class="line">            <span class="keyword">return</span> add(element);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> addBefore(element, node(index));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Add Last element</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">addLast</span><span class="params">(T element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;T&gt; last = tail;</span><br><span class="line">        Node&lt;T&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(last, element, <span class="keyword">null</span>);</span><br><span class="line">        tail = newNode;</span><br><span class="line">        <span class="keyword">if</span> (last == <span class="keyword">null</span>) &#123;</span><br><span class="line">            head = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            last.next = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * add element before certain element</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">addBefore</span><span class="params">(T element, Node&lt;T&gt; target)</span> </span>&#123;</span><br><span class="line">        Node&lt;T&gt; prev = target.prev;</span><br><span class="line">        Node&lt;T&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(prev, element, target);</span><br><span class="line">        target.prev = newNode;</span><br><span class="line">        <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">            head = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            prev.next = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * remove node by element</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(T element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (element == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;T&gt; x = head; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">                <span class="keyword">if</span> (x.element == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    unlink(x);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;T&gt; x = head; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">                <span class="keyword">if</span> (element.equals(x.element)) &#123;</span><br><span class="line">                    unlink(x);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * remove node by index</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> unlink(node(index));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get element by index</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node&lt;T&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        checkPositionIndex(index);</span><br><span class="line">        <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">            Node&lt;T&gt; x = head;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">                x = x.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;T&gt; x = tail;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--) &#123;</span><br><span class="line">                x = x.prev;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * unlink node</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> T <span class="title">unlink</span><span class="params">(Node&lt;T&gt; node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> T element = node.element;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;T&gt; prev = node.prev;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;T&gt; next = node.next;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if unlink is head</span></span><br><span class="line">        <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">            head = next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            prev.next = next;</span><br><span class="line">            <span class="comment">// clear prev</span></span><br><span class="line">            node.prev = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if unlink is tail</span></span><br><span class="line">        <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            tail = prev;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            next.prev = prev;</span><br><span class="line">            node.next = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        node.element = <span class="keyword">null</span>;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkPositionIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span> + index + <span class="string">", Size: "</span> + size);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * set element by index</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, T element)</span> </span>&#123;</span><br><span class="line">        checkPositionIndex(index);</span><br><span class="line">        Node&lt;T&gt; oldNode = node(index);</span><br><span class="line">        T oldElement = oldNode.element;</span><br><span class="line">        oldNode.element = element;</span><br><span class="line">        <span class="keyword">return</span> oldElement;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get element by index</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        Node&lt;T&gt; node = node(index);</span><br><span class="line">        <span class="keyword">return</span> node == <span class="keyword">null</span> ? <span class="keyword">null</span> : node.element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * clear list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;T&gt; x = head; x != <span class="keyword">null</span>; ) &#123;</span><br><span class="line">            Node&lt;T&gt; next = x.next;</span><br><span class="line">            x.element = <span class="keyword">null</span>;</span><br><span class="line">            x.next = <span class="keyword">null</span>;</span><br><span class="line">            x.prev = <span class="keyword">null</span>;</span><br><span class="line">            x = next;</span><br><span class="line">        &#125;</span><br><span class="line">        head = tail = <span class="keyword">null</span>;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * contain certain element</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(T element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (element == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;T&gt; x = head; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">                <span class="keyword">if</span> (x.element == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;T&gt; x = head; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">                <span class="keyword">if</span> (element.equals(x.element)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get list size</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * node</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> T element;</span><br><span class="line">        <span class="keyword">private</span> Node&lt;T&gt; prev;</span><br><span class="line">        <span class="keyword">private</span> Node&lt;T&gt; next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Node&lt;T&gt; prev, T element, Node&lt;T&gt; next)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.element = element;</span><br><span class="line">            <span class="keyword">this</span>.prev = prev;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/wangweiX/java-algorithms/blob/master/src/main/java/one/wangwei/algorithms/datastructures/list/impl/DoublyLinkedList.java" target="_blank" rel="noopener">源代码</a></p></blockquote><h2 id="单向循环链表"><a href="#单向循环链表" class="headerlink" title="单向循环链表"></a>单向循环链表</h2><p>与单向链表一样，在寻找前驱节点时，需要遍历整个链表，时间复杂度为O(n).</p><p>在第一次添加元素时，特别注意，head与tail为同一节点，并且需要自指向。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.algorithms.datastructures.list.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> one.wangwei.algorithms.datastructures.list.IList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Singly Circular Linked List</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> https://wangwei.one</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/05/03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SinglyCircularLinkedList</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">IList</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * size</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * head node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Node&lt;T&gt; head = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * tail node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Node&lt;T&gt; tail = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * add element</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(T element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> addLast(element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * add element at index</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, T element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span> + index + <span class="string">", Size: "</span> + size);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index == size) &#123;</span><br><span class="line">            <span class="keyword">return</span> add(element);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> addBefore(index, element);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Add Last element</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">addLast</span><span class="params">(T element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;T&gt; last = tail;</span><br><span class="line">        Node&lt;T&gt; newElement = <span class="keyword">new</span> Node&lt;&gt;(element, head);</span><br><span class="line">        tail = newElement;</span><br><span class="line">        <span class="keyword">if</span> (last == <span class="keyword">null</span>) &#123;</span><br><span class="line">            head = newElement;</span><br><span class="line">            <span class="comment">// we need linked itself when add an element at first time</span></span><br><span class="line">            tail.next = head;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            last.next = newElement;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * add element before certain element</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">addBefore</span><span class="params">(<span class="keyword">int</span> index, T element)</span> </span>&#123;</span><br><span class="line">        checkPositionIndex(index);</span><br><span class="line">        <span class="comment">// prev node, start with tail</span></span><br><span class="line">        Node&lt;T&gt; prev = tail;</span><br><span class="line">        Node&lt;T&gt; x = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">            prev = x;</span><br><span class="line">            x = x.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// current node</span></span><br><span class="line">        Node&lt;T&gt; current = x;</span><br><span class="line">        <span class="comment">// new node</span></span><br><span class="line">        Node&lt;T&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(element, current);</span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">            head = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        prev.next = newNode;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * remove node by element</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(T element)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// start with tail</span></span><br><span class="line">        Node&lt;T&gt; prev = tail;</span><br><span class="line">        <span class="comment">// start with head</span></span><br><span class="line">        Node&lt;T&gt; x = head;</span><br><span class="line">        <span class="comment">// start with index -1</span></span><br><span class="line">        <span class="keyword">int</span> prevIndex = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (element == <span class="keyword">null</span> &amp;&amp; x.element == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (element != <span class="keyword">null</span> &amp;&amp; element.equals(x.element)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            prev = x;</span><br><span class="line">            x = x.next;</span><br><span class="line">            prevIndex = i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if this linked list is empty</span></span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if don't match element</span></span><br><span class="line">        <span class="keyword">if</span> (prevIndex == size - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node&lt;T&gt; next = x.next;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if delete node is head</span></span><br><span class="line">        <span class="keyword">if</span> (prevIndex == -<span class="number">1</span>) &#123;</span><br><span class="line">            head = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if delete node is tail</span></span><br><span class="line">        <span class="keyword">if</span> (prevIndex == size - <span class="number">2</span>) &#123;</span><br><span class="line">            tail = prev;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        prev.next = next;</span><br><span class="line"></span><br><span class="line">        size--;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">            head = tail = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// for GC</span></span><br><span class="line">        x = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * remove element by index</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        checkPositionIndex(index);</span><br><span class="line">        Node&lt;T&gt; prev = tail;</span><br><span class="line">        Node&lt;T&gt; x = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">            prev = x;</span><br><span class="line">            x = x.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if linked is empty</span></span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node&lt;T&gt; next = x.next;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if delete node is head</span></span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">            head = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if delete node is tail</span></span><br><span class="line">        <span class="keyword">if</span> (index == size - <span class="number">1</span>) &#123;</span><br><span class="line">            tail = prev;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        prev.next = next;</span><br><span class="line"></span><br><span class="line">        size--;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">            head = tail = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x.element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get element by index</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node&lt;T&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        checkPositionIndex(index);</span><br><span class="line">        Node&lt;T&gt; x = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">            x = x.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkPositionIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span> + index + <span class="string">", Size: "</span> + size);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * set element by index</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, T element)</span> </span>&#123;</span><br><span class="line">        checkPositionIndex(index);</span><br><span class="line">        Node&lt;T&gt; oldNode = node(index);</span><br><span class="line">        T oldElement = oldNode.element;</span><br><span class="line">        oldNode.element = element;</span><br><span class="line">        <span class="keyword">return</span> oldElement;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get element by index</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> node(index).element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * clear list element</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;T&gt; x = head; x != <span class="keyword">null</span>; ) &#123;</span><br><span class="line">            Node&lt;T&gt; next = x.next;</span><br><span class="line">            x.element = <span class="keyword">null</span>;</span><br><span class="line">            x.next = <span class="keyword">null</span>;</span><br><span class="line">            x = next;</span><br><span class="line">        &#125;</span><br><span class="line">        head = tail = <span class="keyword">null</span>;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * contain certain element</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(T element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node&lt;T&gt; x = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (element == <span class="keyword">null</span> &amp;&amp; x.element == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (element != <span class="keyword">null</span> &amp;&amp; element.equals(x.element)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            x = x.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get list size</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Node</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> T element;</span><br><span class="line">        <span class="keyword">private</span> Node&lt;T&gt; next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(T element, Node&lt;T&gt; next)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.element = element;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/wangweiX/java-algorithms/blob/master/src/main/java/one/wangwei/algorithms/datastructures/list/impl/SinglyCircularLinkedList.java" target="_blank" rel="noopener">源代码</a></p></blockquote><h2 id="双向循环链表"><a href="#双向循环链表" class="headerlink" title="双向循环链表"></a>双向循环链表</h2><p>双向循环链表相比单向循环链表，降低了查找前驱节点的复杂度，时间复杂度为O(1).</p><p>同样第一次添加元素时，head与tail为同一元素，需要自指向。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.algorithms.datastructures.list.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> one.wangwei.algorithms.datastructures.list.IList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Doubly circular linked list</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> https://wangwei.one</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/12/21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoublyCircularLinkedList</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">IList</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * size</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * head node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Node&lt;T&gt; head;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * tail node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Node&lt;T&gt; tail;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * add element</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(T element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> addLast(element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * add element at index</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, T element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span> + index + <span class="string">", Size: "</span> + size);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index == size) &#123;</span><br><span class="line">            <span class="keyword">return</span> add(element);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> addBefore(index, element);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Add last element</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">addLast</span><span class="params">(T element)</span> </span>&#123;</span><br><span class="line">        Node&lt;T&gt; last = tail;</span><br><span class="line">        Node&lt;T&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(element, last, head);</span><br><span class="line">        tail = newNode;</span><br><span class="line">        <span class="comment">// add element at first time</span></span><br><span class="line">        <span class="keyword">if</span> (last == <span class="keyword">null</span>) &#123;</span><br><span class="line">            head = newNode;</span><br><span class="line">            tail.next = head;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            last.next = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        head.prev = tail;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * add element before certain element</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">addBefore</span><span class="params">(<span class="keyword">int</span> index, T element)</span> </span>&#123;</span><br><span class="line">        Node&lt;T&gt; target = node(index);</span><br><span class="line">        Node&lt;T&gt; prev = target.prev;</span><br><span class="line">        Node&lt;T&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(element, prev, target);</span><br><span class="line"></span><br><span class="line">        prev.next = newNode;</span><br><span class="line">        target.prev = newNode;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">            head = newNode;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * remove element</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(T element)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// start with head</span></span><br><span class="line">        Node&lt;T&gt; x = head;</span><br><span class="line">        <span class="comment">// start with index -1</span></span><br><span class="line">        <span class="keyword">int</span> prevIndex = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (element == <span class="keyword">null</span> &amp;&amp; x.element == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (element != <span class="keyword">null</span> &amp;&amp; element.equals(x.element)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            x = x.next;</span><br><span class="line">            prevIndex = i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if this linked list is empty</span></span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if don't match element</span></span><br><span class="line">        <span class="keyword">if</span> (prevIndex == size - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node&lt;T&gt; prev = x.prev;</span><br><span class="line">        Node&lt;T&gt; next = x.next;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if delete node is head</span></span><br><span class="line">        <span class="keyword">if</span> (prevIndex == -<span class="number">1</span>) &#123;</span><br><span class="line">            head = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if delete node is tail</span></span><br><span class="line">        <span class="keyword">if</span> (prevIndex == size - <span class="number">2</span>) &#123;</span><br><span class="line">            tail = prev;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        prev.next = next;</span><br><span class="line">        next.prev = prev;</span><br><span class="line"></span><br><span class="line">        size--;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">            head = tail = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// for GC</span></span><br><span class="line">        x = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * remove element by index</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        checkPositionIndex(index);</span><br><span class="line">        Node&lt;T&gt; x = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">            x = x.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if linked is empty</span></span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node&lt;T&gt; prev = x.prev;</span><br><span class="line">        Node&lt;T&gt; next = x.next;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if delete node is head</span></span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">            head = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if delete node is tail</span></span><br><span class="line">        <span class="keyword">if</span> (index == size - <span class="number">1</span>) &#123;</span><br><span class="line">            tail = prev;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        prev.next = next;</span><br><span class="line">        next.prev = prev;</span><br><span class="line"></span><br><span class="line">        size--;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">            head = tail = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x.element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkPositionIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span> + index + <span class="string">", Size: "</span> + size);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * set element by index</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> old element</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, T element)</span> </span>&#123;</span><br><span class="line">        Node&lt;T&gt; oldNode = node(index);</span><br><span class="line">        T oldElement = oldNode.element;</span><br><span class="line">        oldNode.element = element;</span><br><span class="line">        <span class="keyword">return</span> oldElement;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get element by index</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> node(index).element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get element by index</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node&lt;T&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        checkPositionIndex(index);</span><br><span class="line">        <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">            Node&lt;T&gt; x = head;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">                x = x.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;T&gt; x = tail;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--) &#123;</span><br><span class="line">                x = x.prev;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * clear list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;T&gt; x = head; x != <span class="keyword">null</span>; ) &#123;</span><br><span class="line">            Node&lt;T&gt; next = x.next;</span><br><span class="line">            x.element = <span class="keyword">null</span>;</span><br><span class="line">            x.next = <span class="keyword">null</span>;</span><br><span class="line">            x = next;</span><br><span class="line">        &#125;</span><br><span class="line">        head = tail = <span class="keyword">null</span>;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * contain certain element</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(T element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node&lt;T&gt; x = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (element == <span class="keyword">null</span> &amp;&amp; x.element == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (element != <span class="keyword">null</span> &amp;&amp; element.equals(x.element)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            x = x.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get list size</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Node</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> T element;</span><br><span class="line">        <span class="keyword">private</span> Node&lt;T&gt; prev;</span><br><span class="line">        <span class="keyword">private</span> Node&lt;T&gt; next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(T element, Node&lt;T&gt; prev, Node&lt;T&gt; next)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.element = element;</span><br><span class="line">            <span class="keyword">this</span>.prev = prev;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/wangweiX/java-algorithms/blob/master/src/main/java/one/wangwei/algorithms/datastructures/list/impl/DoublyCircularLinkedList.java" target="_blank" rel="noopener">源代码</a></p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>写链表代码特别需要注意边界条件的处理：</p><ul><li>如果链表为空，代码能否正常工作？</li><li>如果链表只有一个节点时，代码能否正常工作？</li><li>如果链表只有两个节点时，代码能否正常工作？</li><li>代码在删除或插入Head和Tail节点时，这四种的链表结构是否</li></ul><h2 id="ArrayList-vs-LinkedList"><a href="#ArrayList-vs-LinkedList" class="headerlink" title="ArrayList vs LinkedList"></a>ArrayList vs LinkedList</h2><table><thead><tr><th></th><th>ArrayList</th><th>LinkedList</th></tr></thead><tbody><tr><td>插入&amp;<br>删除</td><td>O(n)</td><td>O(1)</td></tr><tr><td>随机访问</td><td>O(1)</td><td>O(n)</td></tr><tr><td>优点</td><td>连续的内存空间，可以借助CPU的预取机制</td><td>内存不连续，天然支持动态扩容</td></tr><tr><td>缺点</td><td>无法存储大数据，数组扩容耗性能</td><td>频繁地插入删除操作，会导致内存碎片的增加，导致频繁的GC</td></tr></tbody></table><h2 id="相关练习"><a href="#相关练习" class="headerlink" title="相关练习"></a>相关练习</h2><ul><li><a href="https://wangwei.one/posts/java-algoDS-reverse-linked-list.html">链表反转</a></li><li><a href="https://wangwei.one/posts/java-algoDS-linked-list-cycle.html">链表环检测</a></li><li><a href="https://wangwei.one/posts/java-algoDS-Merge-Two-Sorted-Linked-Lists.html">有序链表合并</a></li><li><a href="https://wangwei.one/posts/java-algoDS-Remove-Nth-Node-From-End-of-List.html">删除倒数第N个节点</a></li><li><a href="https://wangwei.one/posts/java-algoDS-middle-of-the-linked-list.html">求链表的中间结点</a></li><li><a href="https://wangwei.one/posts/java-algoDS-LRU-implement-by-linkedlist.html">LRU算法实现</a></li><li><a href="https://wangwei.one/posts/java-algoDS-palindrome-linked-list.html">回文链表检测</a></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://data.biancheng.net/view/5.html" target="_blank" rel="noopener">http://data.biancheng.net/view/5.html</a></li><li><a href="https://github.com/phishman3579/java-algorithms-implementation" target="_blank" rel="noopener">https://github.com/phishman3579/java-algorithms-implementation</a></li><li>《<a href="http://gk.link/a/101Nt" target="_blank" rel="noopener">数据结构与算法之美</a>》</li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AlgoDS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法 | 线性表 —— 顺序表]]></title>
      <url>/posts/java-data-structures-and-algorithms-arraylist.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/pexels-photo-577585.jpeg?imageslim" alt="pexels-photo-577585"></p><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>将具有线性关系的数据存储到计算机中所使用的存储结构称为线性表。</p><p>线性，是指数据在<strong>逻辑结构</strong>上具有线性关系。</p><a id="more"></a><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>逻辑结构上相邻的数据在物理结构存储分两种形式：</p><ul><li>数据在内存中集中存储，采用顺序表示结构，称为”顺序存储”；</li><li>数据在内存中分散存储，采用链式表示结构，称为”链式存储”；</li></ul><h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>逻辑上具有线性关系的数据按照前后的次序全部存储在一整块连续的内存空间中，之间不存在空隙，这样的存储结构称为顺序存储结构。</p><p>使用线性表的顺序存储结构生成的表，称为顺序表。</p><p><img src="https://img.i7years.com/blog/2-1FHG4324N34.png" alt=""></p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>顺序表的存放数据的特点和数组一样，所以我们这里采用数组来实现，这里我们来用数组来简单实现Java中常用的ArrayList。</p><p>接口定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.algorithms.datastructures.list;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * List Interface</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> https://wangwei.one/</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/04/27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IList</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * add element</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(T element)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * add element at index</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, T element)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * remove element</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(T element)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * remove element by index</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * set element by index</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> old element</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, T element)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get element by index</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * clear list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * contain certain element</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(T element)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get list size</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/wangweiX/java-algorithms/blob/master/src/main/java/one/wangwei/algorithms/datastructures/list/IList.java" target="_blank" rel="noopener">源代码</a></p></blockquote><p>接口实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.algorithms.datastructures.list.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> one.wangwei.algorithms.datastructures.list.IList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Array List</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> https://wangwei.one</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/04/27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyArrayList</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">IList</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * default array size</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_SIZE = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * array size</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> T[] array = (T[]) <span class="keyword">new</span> Object[DEFAULT_SIZE];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * add element</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(T element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> add(size, element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * add element at index</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, T element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">"Index: "</span> + index + <span class="string">", Size: "</span> + size);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// need grow</span></span><br><span class="line">        <span class="keyword">if</span> (size &gt;= array.length) &#123;</span><br><span class="line">            grow();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// copy array element</span></span><br><span class="line">        <span class="keyword">if</span> (index &lt; size) &#123;</span><br><span class="line">            System.arraycopy(array, index, array, index + <span class="number">1</span>, size - index);</span><br><span class="line">        &#125;</span><br><span class="line">        array[index] = element;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * grow 50%</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> growSize = size + (size &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        array = Arrays.copyOf(array, growSize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * remove element</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(T element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (element == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array[i] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    remove(i);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (array[i].equals(element)) &#123;</span><br><span class="line">                    remove(i);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * remove element by index</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        checkPositionIndex(index);</span><br><span class="line">        T oldElement = array[index];</span><br><span class="line">        <span class="comment">// need copy element</span></span><br><span class="line">        <span class="keyword">if</span> (index != (size - <span class="number">1</span>)) &#123;</span><br><span class="line">            System.arraycopy(array, index + <span class="number">1</span>, array, index, size - index - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        --size;</span><br><span class="line">        array[size] = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// shrink 25%</span></span><br><span class="line">        <span class="keyword">int</span> shrinkSize = size - (size &gt;&gt; <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (shrinkSize &gt;= DEFAULT_SIZE &amp;&amp; shrinkSize &gt; size) &#123;</span><br><span class="line">            shrink();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> oldElement;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * shrink 25%</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">shrink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> shrinkSize = size - (size &gt;&gt; <span class="number">2</span>);</span><br><span class="line">        array = Arrays.copyOf(array, shrinkSize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * set element by index</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, T element)</span> </span>&#123;</span><br><span class="line">        checkPositionIndex(index);</span><br><span class="line">        T oldElement = array[index];</span><br><span class="line">        array[index] = element;</span><br><span class="line">        <span class="keyword">return</span> oldElement;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get element by index</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        checkPositionIndex(index);</span><br><span class="line">        <span class="keyword">return</span> array[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * check index</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkPositionIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span> + index + <span class="string">", Size: "</span> + size);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * clear list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            array[i] = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * contain certain element</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(T element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (element == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array[i] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (array[i].equals(element)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get list size</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/wangweiX/java-algorithms/blob/master/src/main/java/one/wangwei/algorithms/datastructures/list/impl/MyArrayList.java" target="_blank" rel="noopener">源代码</a></p></blockquote><p>主要注意以下几点：</p><ul><li>添加元素时 ，判断是否需要对Array进行扩容；</li><li>删除元素时，判断是否需要对Array进行收缩；</li><li>remove与contains接口，注意element为null的情况；</li></ul><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>对数据进行遍历的时候，数据在连续的物理空间中进行存放，CPU的内部缓存结构会缓存连续的内存片段，可以大幅降低读取内存的性能开销，所以查询比较快；</li><li>删除线性表中的元素的时候，后面的元素会整体向前移动，所以删除的效率较低，插入类似，时间复杂度为O(n)；</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://data.biancheng.net/view/4.html" target="_blank" rel="noopener">http://data.biancheng.net/view/4.html</a></li><li><a href="https://github.com/phishman3579/java-algorithms-implementation" target="_blank" rel="noopener">https://github.com/phishman3579/java-algorithms-implementation</a></li><li>《<a href="http://gk.link/a/101Nt" target="_blank" rel="noopener">数据结构与算法之美</a>》</li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AlgoDS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 11 教程]]></title>
      <url>/posts/java-11-base-tutorial.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/cover/architecture-buildings-city-313782.webp?imageslim" alt="new era"></p><blockquote><p>原文：<a href="https://winterbe.com/posts/2018/09/24/java-11-tutorial/" target="_blank" rel="noopener">链接</a></p><p>作者：<a href="https://github.com/winterbe" target="_blank" rel="noopener">Benjamin Winterberg</a></p><p>翻译：<a href="https://wangwei.one">Wang Wei</a></p></blockquote><p><a href="http://openjdk.java.net/projects/jdk/11/" target="_blank" rel="noopener">Java11</a> 已于 2018/09/25 成功发布，不过目前 <a href="https://twitter.com/winterbe_/status/1035864662976413696" target="_blank" rel="noopener">绝大多数人</a> 在生产环境仍旧使用的是Java 8。这篇以案例为主的教程涵盖了从 Java 9 到 Java 11的绝大多数重要的语法与API特性。让我们开始吧！</p><a id="more"></a><h2 id="局部变量类型推断"><a href="#局部变量类型推断" class="headerlink" title="局部变量类型推断"></a>局部变量类型推断</h2><p>Java 10引入了一个新的语言关键字<code>var</code>，它可以在声明<em>局部变量</em> 时替换类型信息（ <em>局部</em> 意味着方法体内的变量声明）。</p><p>Java 10之前，变量的声明形式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String text = <span class="string">"Hello Java 9"</span>;</span><br></pre></td></tr></table></figure><p>现在，你可以使用 <code>var</code> 替换 <code>String</code> 。编译器将会从变量的赋值中推断出它的正确类型。在这个例子里 变量<code>text</code> 即为 <code>String</code> 类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var text = <span class="string">"Hello Java 10"</span>;</span><br></pre></td></tr></table></figure><p>不同于 Javascript 中的 <code>var</code> 关键字，Java中的 <code>var</code> 声明的变量仍旧是静态类型。你不能再次赋予另一个与原类型不符的变量值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var text = <span class="string">"Hello Java 11"</span>;</span><br><span class="line">text = <span class="number">23</span>;  <span class="comment">// ERROR: Incompatible types(类型错误)</span></span><br></pre></td></tr></table></figure><p><code>var</code> 关键字还可以与 <code>final</code> 一起使用，意义同之前的版本一样，表示不可修改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> var text = <span class="string">"Hello Java 10"</span>;</span><br><span class="line">text = <span class="string">"Hello Java 11"</span>; <span class="comment">// Cannot assign a value to final variable 'text'</span></span><br></pre></td></tr></table></figure><p>当编译器不能正确识别出变量的数值类型时，<code>var</code>将不被允许使用。下面这些代码都是没法编译的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Cannot infer type:</span></span><br><span class="line">var a;</span><br><span class="line">var nothing = <span class="keyword">null</span>;</span><br><span class="line">var lambda = () -&gt; System.out.println(<span class="string">"Pity!"</span>);</span><br><span class="line">var method = <span class="keyword">this</span>::someMethod;</span><br></pre></td></tr></table></figure><p>局部变量类型推断在与复杂的泛型类型结合时，能放大它的价值。在下面这个例子中，<code>current</code> 是有着一个冗长的数据类型 <code>Map&lt;String, List&lt;Integer&gt;&gt;</code> ，不过它的类型声明可以被 <code>var</code> 这个关键字简单地替换掉，让你避免了写一大窜的类型麻烦事。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var myList = <span class="keyword">new</span> ArrayList&lt;Map&lt;String, List&lt;Integer&gt;&gt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (var current : myList) &#123;</span><br><span class="line">    <span class="comment">// current is infered to type: Map&lt;String, List&lt;Integer&gt;&gt;</span></span><br><span class="line">    System.out.println(current);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从Java 11开始，lambda表达式的参数也允许使用var关键字，这样使得你可以为这些参数添加注解标识：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Predicate&lt;String&gt; predicate = (<span class="meta">@Nullable</span> var a) -&gt; <span class="keyword">true</span>;</span><br></pre></td></tr></table></figure><blockquote><p>Tip：在Intellij IDEA中，你可以在按住CMD / CTRL的同时将鼠标悬停在变量上，以显示变量的推断类型。</p></blockquote><h2 id="HTTP-Client"><a href="#HTTP-Client" class="headerlink" title="HTTP Client"></a>HTTP Client</h2><p>Java 9引入了一个新的孵化<code>HttpClient</code> API来处理HTTP请求。从Java 11开始，这个API已经可以在标准库 <code>java.net</code> 中使用了。让我们来探索一下通过这个API我们可以做些什么。</p><p>这个新的 <code>HttpClient</code> 既可以被同步使用，也可以被异步使用。同步请求将会阻塞当前的线程，直到返回响应消息。<code>BodyHandlers</code> 定义了响应消息体的类型（e.g string，byte-array 或 file）:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var request = HttpRequest.newBuilder()</span><br><span class="line">    .uri(URI.create(<span class="string">"https://wangwei.one"</span>))</span><br><span class="line">    .GET()</span><br><span class="line">    .build();</span><br><span class="line">var client = HttpClient.newHttpClient();</span><br><span class="line">HttpResponse&lt;String&gt; response = client.send(request, HttpResponse.BodyHandlers.ofString());</span><br><span class="line">System.out.println(response.body());</span><br></pre></td></tr></table></figure><p>同样的请求也可以被异步执行。调用 <code>sendAsync</code> 方法不会阻塞当前线程，并且会返回 <code>CompletableFuture</code> 对象，用来构建异步执行结果的操作流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var request = HttpRequest.newBuilder()</span><br><span class="line">    .uri(URI.create(<span class="string">"https://wangwei.one"</span>))</span><br><span class="line">    .build();</span><br><span class="line">var client = HttpClient.newHttpClient();</span><br><span class="line">client.sendAsync(request, HttpResponse.BodyHandlers.ofString())</span><br><span class="line">    .thenApply(HttpResponse::body)</span><br><span class="line">    .thenAccept(System.out::println);</span><br></pre></td></tr></table></figure><blockquote><p>我们可以省略 <code>.GET()</code> 的调用，因为它默认的请求方式。</p></blockquote><p>下面这个列子，我们以<code>POST</code>的方法向指定的URL发送数据。类似于 <code>BodyHandlers</code> ，你可以使用 <code>BodyPublishers</code> 去定义请求消息体中你想要发送的数据类型，例如 strings, byte-arrays,files 或 input-streams:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var request = HttpRequest.newBuilder()</span><br><span class="line">    .uri(URI.create(<span class="string">"https://postman-echo.com/post"</span>))</span><br><span class="line">    .header(<span class="string">"Content-Type"</span>, <span class="string">"text/plain"</span>)</span><br><span class="line">    .POST(HttpRequest.BodyPublishers.ofString(<span class="string">"Hi there!"</span>))</span><br><span class="line">    .build();</span><br><span class="line">var client = HttpClient.newHttpClient();</span><br><span class="line">var response = client.send(request, HttpResponse.BodyHandlers.ofString());</span><br><span class="line">System.out.println(response.statusCode());      <span class="comment">// 200</span></span><br></pre></td></tr></table></figure><p>最后这个列子来演示如何通过 <code>BASIC-AUTH</code> 来执行身份认证。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var request = HttpRequest.newBuilder()</span><br><span class="line">    .uri(URI.create(<span class="string">"https://postman-echo.com/basic-auth"</span>))</span><br><span class="line">    .build();</span><br><span class="line">var client = HttpClient.newBuilder()</span><br><span class="line">    .authenticator(<span class="keyword">new</span> Authenticator() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> PasswordAuthentication <span class="title">getPasswordAuthentication</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> PasswordAuthentication(<span class="string">"postman"</span>, <span class="string">"password"</span>.toCharArray());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .build();</span><br><span class="line">var response = client.send(request, HttpResponse.BodyHandlers.ofString());</span><br><span class="line">System.out.println(response.statusCode());      <span class="comment">// 200</span></span><br></pre></td></tr></table></figure><h2 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h2><p>像<code>List</code>, <code>Set</code> 和 <code>Map</code> 这样的集合，它们的API也得到了扩展。<code>List.of</code> 可以从给定的参数中创建一个不可变的list。<code>List.copyOf</code> 可以创建一个 list 的不可变副本。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var list = List.of(<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>);</span><br><span class="line">var copy = List.copyOf(list);</span><br><span class="line">System.out.println(list == copy);   <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>因为 <code>list</code> 已经是不可变的，所以实际上不需要实际地地去创建 <code>list</code> 实例的副本，因此 <code>list</code> 和 <code>copy</code> 是相同的实例。 但是，如果你复制一个可变列表，那么 <code>copy</code> 确定就是一个新实例，因此在改变原始 list 时，要保证没有副作用产生：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">var copy = List.copyOf(list);</span><br><span class="line">System.out.println(list == copy);   <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>当创建不可变的 maps 时，你不需要亲自去创建一个完整的 map 集合，你可以直接通过 <code>Map.of</code> 来进行创建：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var map = Map.of(<span class="string">"A"</span>, <span class="number">1</span>, <span class="string">"B"</span>, <span class="number">2</span>);</span><br><span class="line">System.out.println(map);    <span class="comment">// &#123;B=2, A=1&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>Java 11中的不可变集合仍然使用旧<a href="https://docs.oracle.com/javase/10/docs/api/java/util/Collection.html" target="_blank" rel="noopener">Collection API</a>中的相同接口。 但是，如果尝试通过添加或删除元素来修改不可变集合，则会抛出java.lang.UnsupportedOperationException。 幸运的是，如果你尝试改变不可变集合，Intellij IDEA会通过检查发出警告。</p></blockquote><h2 id="Streams"><a href="#Streams" class="headerlink" title="Streams"></a>Streams</h2><p>Java8中介绍的Stream也新增了方法。<code>Stream.ofNullable</code> 可以从单个元素中构造一个Stream:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream.ofNullable(<span class="keyword">null</span>).count(); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p><code>dropWhile</code> 与 <code>takeWhile</code> 方法可以用来决定stream中的哪些元素可以被抛弃：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">    .dropWhile(n -&gt; n &lt; <span class="number">3</span>)</span><br><span class="line">    .collect(Collectors.toList());  <span class="comment">// [3, 2, 1]</span></span><br><span class="line"></span><br><span class="line">Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">    .takeWhile(n -&gt; n &lt; <span class="number">3</span>)</span><br><span class="line">    .collect(Collectors.toList());  <span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure><blockquote><p>如果你对Streams不是很熟悉，你可以看看这篇文章 <a href="https://winterbe.com/posts/2014/07/31/java8-stream-tutorial-examples/" target="_blank" rel="noopener">Java 8 Streams Tutorial</a>.</p></blockquote><h2 id="Optionals"><a href="#Optionals" class="headerlink" title="Optionals"></a>Optionals</h2><p><code>Optionals</code> 也新增了一些非常好用的方法。例如，现在你可以简单地将 <code>Optionals</code> 转换为 <code>Streams</code>，或者使用另一个optional作为一个空optional的fallback。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Optional.of(<span class="string">"foo"</span>).orElseThrow();     <span class="comment">// foo</span></span><br><span class="line">Optional.of(<span class="string">"foo"</span>).stream().count();  <span class="comment">// 1</span></span><br><span class="line">Optional.ofNullable(<span class="keyword">null</span>)</span><br><span class="line">    .or(() -&gt; Optional.of(<span class="string">"fallback"</span>))</span><br><span class="line">    .get();                           <span class="comment">// fallback</span></span><br></pre></td></tr></table></figure><h2 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h2><p>最基本的类之一 <code>String</code> 新增了一些辅助方法，用以修剪或检查空格以及对字符串进行流化处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">" "</span>.isBlank();                <span class="comment">// true</span></span><br><span class="line"><span class="string">" Foo Bar "</span>.strip();          <span class="comment">// "Foo Bar"</span></span><br><span class="line"><span class="string">" Foo Bar "</span>.stripTrailing();  <span class="comment">// " Foo Bar"</span></span><br><span class="line"><span class="string">" Foo Bar "</span>.stripLeading();   <span class="comment">// "Foo Bar "</span></span><br><span class="line"><span class="string">"Java"</span>.repeat(<span class="number">3</span>);             <span class="comment">// "JavaJavaJava"</span></span><br><span class="line"><span class="string">"A\nB\nC"</span>.lines().count();    <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h2 id="InputStreams"><a href="#InputStreams" class="headerlink" title="InputStreams"></a>InputStreams</h2><p>最后但并非最不重要的是，<code>InputStream</code>最终获得了一个非常有用的方法来将数据传输到OutputStream，这是一个在处理原始数据流时非常常见的用例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var classLoader = ClassLoader.getSystemClassLoader();</span><br><span class="line">var inputStream = classLoader.getResourceAsStream(<span class="string">"myFile.txt"</span>);</span><br><span class="line">var tempFile = File.createTempFile(<span class="string">"myFileCopy"</span>, <span class="string">"txt"</span>);</span><br><span class="line"><span class="keyword">try</span> (var outputStream = <span class="keyword">new</span> FileOutputStream(tempFile)) &#123;</span><br><span class="line">    inputStream.transferTo(outputStream);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他JVM特性"><a href="#其他JVM特性" class="headerlink" title="其他JVM特性"></a>其他JVM特性</h2><p>这些是 - 在我看来 - 从Java 8迁移到11时最有趣的语言新API功能。但是功能列表并没有在这里结束。 最新的Java版本中包含了更多内容：</p><ul><li><a href="https://community.oracle.com/docs/DOC-1006738" target="_blank" rel="noopener">Flow API for reactive programming</a></li><li><a href="https://www.oracle.com/corporate/features/understanding-java-9-modules.html" target="_blank" rel="noopener">Java Module System</a></li><li><a href="https://blog.codefx.org/java/application-class-data-sharing/" target="_blank" rel="noopener">Application Class Data Sharing</a></li><li><a href="http://openjdk.java.net/jeps/309" target="_blank" rel="noopener">Dynamic Class-File Constants</a></li><li><a href="https://docs.oracle.com/javase/10/jshell/introduction-jshell.htm#JSHEL-GUID-630F27C8-1195-4989-9F6B-2C51D46F52C8" target="_blank" rel="noopener">Java REPL (JShell)</a></li><li><a href="http://openjdk.java.net/jeps/328" target="_blank" rel="noopener">Flight Recorder</a></li><li><a href="http://openjdk.java.net/jeps/327" target="_blank" rel="noopener">Unicode 10</a></li><li><a href="https://blog.idrsolutions.com/2018/04/java-10-improvements-to-garbage-collection-explained-in-5-minutes/" target="_blank" rel="noopener">G1: Full Parallel Garbage Collector</a></li><li><a href="http://openjdk.java.net/jeps/333" target="_blank" rel="noopener">ZGC: Scalable Low-Latency Garbage Collector</a></li><li><a href="http://openjdk.java.net/jeps/318" target="_blank" rel="noopener">Epsilon: No-Op Garbage Collector</a></li><li><a href="http://openjdk.java.net/jeps/335" target="_blank" rel="noopener">Deprecate the Nashorn JavaScript Engine</a></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java11 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于Java语言构建区块链（七）—— 交易脚本（智能合约）]]></title>
      <url>/posts/build-blockchain-in-java-transaction-script.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/rawpixel-652547-unsplash.jpg-webp" alt=""></p><p><a href="https://wangwei.one/posts/630e7ae5.html">上一篇</a> 文章我们引入 UTXOset 和 Merkle Tree 对交易流程做了些许优化，本篇文章我们将介绍比特币另一个更加重要的机制 —— 交易脚本。</p><p>在介绍 <a href="https://wangwei.one/posts/9cf9e42a.html">UTXO的文章</a> 中，我们已经了解到比特币的交易输出由锁定脚本锁定，它只能被交易输出所被指向的交易输入中的解锁脚本所解锁，今天让我们来详细讨论一下它们的实现机制。</p><a id="more"></a><h2 id="交易详情"><a href="#交易详情" class="headerlink" title="交易详情"></a>交易详情</h2><p>如今，大多数比特币网络处理的交易是以“Alice付给Bob”的形式存在的。同时，它们是以一种称为“P2PKH”（Pay-to-Public-Key-Hash）脚本为基础的。然而，通过使用脚本来锁定输出和解锁输入意味着通过使用编程语言，比特币交易可以包含无限数量的条件。当然，比特币交易并不限于“Alice付给Bob” 的形式和模式。”</p><p>这只是这个脚本语言可以表达的可能性的冰山一角。稍后， 我们将会全面展示比特币交易脚本语言的各个组成部分；同时，我们也会演示如何使用它去表达复杂的使用条件以及解锁脚本如何去满足这些花费条件。</p><blockquote><p>比特币交易验证并不基于一个不变的模式，而是通过运行脚本语言来实现。这种语言可以表达出多到数不尽的条件变种。这也是比特币作为一种“可编程的货币”所拥有的权力。</p></blockquote><p>我们以<a href="https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch02.asciidoc" target="_blank" rel="noopener">《精通比特币（第二版）》第二章节</a> 中 Alice向Bob购买咖啡为例，点击查看该笔 <a href="https://blockchain.info/tx/0627052b6f28912f2703066a912ea577f2ce4da4caa5a5fbd8a57286c345c2f2" target="_blank" rel="noopener">交易详情</a></p><blockquote><p>交易输入：0.1000 BTC</p><p>手续费用：0.0005 BTC</p><p>支付费用：0.0150 BTC</p><p>找 零： 0.0845 BTC</p></blockquote><p><img src="https://img.i7years.com/blog/tx-stream.png" alt="tx"></p><p>该笔交易的数据如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"hash"</span>: <span class="string">"0627052b6f28912f2703066a912ea577f2ce4da4caa5a5fbd8a57286c345c2f2"</span>,</span><br><span class="line">    <span class="attr">"locktime"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"size"</span>: <span class="number">258</span>,</span><br><span class="line">    <span class="attr">"txid"</span>: <span class="string">"0627052b6f28912f2703066a912ea577f2ce4da4caa5a5fbd8a57286c345c2f2"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"vin"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"scriptSig"</span>: &#123;</span><br><span class="line">                <span class="attr">"asm"</span>: <span class="string">"3045022100884d142d86652a3f47ba4746ec719bbfbd040a570b1deccbb6498c75c4ae24cb02204b9f039ff08df09cbe9f6addac960298cad530a863ea8f53982c09db8f6e3813[ALL] 0484ecc0d46f1918b30928fa0e4ed99f16a0fb4fde0735e7ade8416ab9fe423cc5412336376789d172787ec3457eee41c04f4938de5cc17b4a10fa336a8d752adf"</span>,</span><br><span class="line">                <span class="attr">"hex"</span>: <span class="string">"483045022100884d142d86652a3f47ba4746ec719bbfbd040a570b1deccbb6498c75c4ae24cb02204b9f039ff08df09cbe9f6addac960298cad530a863ea8f53982c09db8f6e381301410484ecc0d46f1918b30928fa0e4ed99f16a0fb4fde0735e7ade8416ab9fe423cc5412336376789d172787ec3457eee41c04f4938de5cc17b4a10fa336a8d752adf"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"sequence"</span>: <span class="number">4294967295</span>,</span><br><span class="line">            <span class="attr">"txid"</span>: <span class="string">"7957a35fe64f80d234d76d83a2a8f1a0d8149a41d81de548f0a65a8a999f6f18"</span>,</span><br><span class="line">            <span class="attr">"vout"</span>: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"vout"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"n"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">"scriptPubKey"</span>: &#123;</span><br><span class="line">                <span class="attr">"addresses"</span>: [</span><br><span class="line">                    <span class="string">"1GdK9UzpHBzqzX2A9JFP3Di4weBwqgmoQA"</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">"asm"</span>: <span class="string">"OP_DUP OP_HASH160 ab68025513c3dbd2f7b92a94e0581f5d50f654e7 OP_EQUALVERIFY OP_CHECKSIG"</span>,</span><br><span class="line">                <span class="attr">"hex"</span>: <span class="string">"76a914ab68025513c3dbd2f7b92a94e0581f5d50f654e788ac"</span>,</span><br><span class="line">                <span class="attr">"reqSigs"</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"pubkeyhash"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"value"</span>: <span class="number">0.015</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"n"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">"scriptPubKey"</span>: &#123;</span><br><span class="line">                <span class="attr">"addresses"</span>: [</span><br><span class="line">                    <span class="string">"1Cdid9KFAaatwczBwBttQcwXYCpvK8h7FK"</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">"asm"</span>: <span class="string">"OP_DUP OP_HASH160 7f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a8 OP_EQUALVERIFY OP_CHECKSIG"</span>,</span><br><span class="line">                <span class="attr">"hex"</span>: <span class="string">"76a9147f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a888ac"</span>,</span><br><span class="line">                <span class="attr">"reqSigs"</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"pubkeyhash"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"value"</span>: <span class="number">0.0845</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"vsize"</span>: <span class="number">258</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="交易输入"><a href="#交易输入" class="headerlink" title="交易输入"></a>交易输入</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">"vin": [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"scriptSig"</span>: &#123;</span><br><span class="line">            <span class="attr">"asm"</span>: <span class="string">"3045022100884d142d86652a3f47ba4746ec719bbfbd040a570b1deccbb6498c75c4ae24cb02204b9f039ff08df09cbe9f6addac960298cad530a863ea8f53982c09db8f6e3813[ALL] 0484ecc0d46f1918b30928fa0e4ed99f16a0fb4fde0735e7ade8416ab9fe423cc5412336376789d172787ec3457eee41c04f4938de5cc17b4a10fa336a8d752adf"</span>,</span><br><span class="line">            <span class="attr">"hex"</span>: <span class="string">"483045022100884d142d86652a3f47ba4746ec719bbfbd040a570b1deccbb6498c75c4ae24cb02204b9f039ff08df09cbe9f6addac960298cad530a863ea8f53982c09db8f6e381301410484ecc0d46f1918b30928fa0e4ed99f16a0fb4fde0735e7ade8416ab9fe423cc5412336376789d172787ec3457eee41c04f4938de5cc17b4a10fa336a8d752adf"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"sequence"</span>: <span class="number">4294967295</span>,</span><br><span class="line">        <span class="attr">"txid"</span>: <span class="string">"7957a35fe64f80d234d76d83a2a8f1a0d8149a41d81de548f0a65a8a999f6f18"</span>,</span><br><span class="line">        <span class="attr">"vout"</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>它所包含的信息：</p><ul><li>交易ID。包含了它所指向的UTXO的交易的Hash值。</li><li>UTXO下标。定义了它所指向的UTXO在上一笔交易中交易输出数组的位置(下标值)。</li><li>签名。用于满足它所指向的UTXO上所设定的花费条件。</li></ul><h4 id="交易输出"><a href="#交易输出" class="headerlink" title="交易输出"></a>交易输出</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">"vout": [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"n"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"scriptPubKey"</span>: &#123;</span><br><span class="line">            <span class="attr">"addresses"</span>: [</span><br><span class="line">                <span class="string">"1GdK9UzpHBzqzX2A9JFP3Di4weBwqgmoQA"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"asm"</span>: <span class="string">"OP_DUP OP_HASH160 ab68025513c3dbd2f7b92a94e0581f5d50f654e7 OP_EQUALVERIFY OP_CHECKSIG"</span>,</span><br><span class="line">            <span class="attr">"hex"</span>: <span class="string">"76a914ab68025513c3dbd2f7b92a94e0581f5d50f654e788ac"</span>,</span><br><span class="line">            <span class="attr">"reqSigs"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"pubkeyhash"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"value"</span>: <span class="number">0.015</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"n"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"scriptPubKey"</span>: &#123;</span><br><span class="line">            <span class="attr">"addresses"</span>: [</span><br><span class="line">                <span class="string">"1Cdid9KFAaatwczBwBttQcwXYCpvK8h7FK"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"asm"</span>: <span class="string">"OP_DUP OP_HASH160 7f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a8 OP_EQUALVERIFY OP_CHECKSIG"</span>,</span><br><span class="line">            <span class="attr">"hex"</span>: <span class="string">"76a9147f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a888ac"</span>,</span><br><span class="line">            <span class="attr">"reqSigs"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"pubkeyhash"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"value"</span>: <span class="number">0.0845</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>它所包含的信息：</p><ul><li><p>比特币的数量。单位：satoshis（聪）</p></li><li><p>比特币地址。交易输出所绑定的地址。</p></li><li><p>锁定脚本。定义了花费这笔交易输出所需要满足的限制条件。其中包含了一些字符串，例如：<code>OP_DUP</code>、<code>OP_HASH160</code>、<code>OP_EQUALVERIFY</code>、<code>OP_CHECKSIG</code>，这些叫操作码，后面会做介绍。</p></li></ul><p>那么，交易输入中的<code>script</code> 是如何满足交易输出中<code>script_string</code>的限制条件的呢？接下来，我们来一起看下比特币的交易脚本是如何工作的。首先，我们来了解一下比特币所用到脚本语言的特性以及它的工作原理。</p><h2 id="比特币脚本语言"><a href="#比特币脚本语言" class="headerlink" title="比特币脚本语言"></a>比特币脚本语言</h2><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p>脚本是一种类似Forth的基于堆栈的逆波兰表示法的图灵非完备语言。接下来，让我们逐个解释一下：</p><h4 id="图灵非完备（Turing-Incomplete）"><a href="#图灵非完备（Turing-Incomplete）" class="headerlink" title="图灵非完备（Turing Incomplete）"></a>图灵非完备（<strong>Turing Incomplete</strong>）</h4><blockquote><p>什么是图灵完备</p><p>在<a href="https://zh.wikipedia.org/wiki/%E5%8F%AF%E8%AE%A1%E7%AE%97%E6%80%A7%E7%90%86%E8%AE%BA" target="_blank" rel="noopener">可计算性理论</a>里，如果一系列操作数据的规则（如<a href="https://zh.wikipedia.org/wiki/%E6%8C%87%E4%BB%A4%E9%9B%86" target="_blank" rel="noopener">指令集</a>、<a href="https://zh.wikipedia.org/wiki/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80" target="_blank" rel="noopener">编程语言</a>、<a href="https://zh.wikipedia.org/wiki/%E7%B4%B0%E8%83%9E%E8%87%AA%E5%8B%95%E6%A9%9F" target="_blank" rel="noopener">细胞自动机</a>）可以用来模拟<a href="https://zh.wikipedia.org/wiki/%E5%9B%BE%E7%81%B5%E6%9C%BA" target="_blank" rel="noopener">单带图灵机</a>，那么它是<strong>图灵完备的</strong>。这个词源于引入图灵机概念的数学家<a href="https://zh.wikipedia.org/wiki/%E8%89%BE%E4%BC%A6%C2%B7%E5%9B%BE%E7%81%B5" target="_blank" rel="noopener">艾倫·图灵</a>。</p><p>虽然<a href="https://zh.wikipedia.org/wiki/%E5%9B%BE%E7%81%B5%E6%9C%BA" target="_blank" rel="noopener">图灵机</a>会受到储存能力的<a href="https://zh.wikipedia.org/wiki/%E7%89%A9%E7%90%86" target="_blank" rel="noopener">物理</a>限制，图灵完全性通常指「具有无限存储能力的通用物理机器或编程语言」。</p><p>来源：<a href="https://zh.wikipedia.org/wiki/%E5%9C%96%E9%9D%88%E5%AE%8C%E5%82%99%E6%80%A7" target="_blank" rel="noopener">维基百科</a></p><p><a href="https://en.wikipedia.org/wiki/Turing_completeness" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Turing_completeness</a></p></blockquote><p>图灵非完备语言将会有有限的功能，不能进行跳转或/和循环。因此它们不能进入无线循环。图灵完备就意味着，在给定的计算资源和内存下，图灵完备程序，能够解决任何问题。<a href="https://blockgeeks.com/guides/solidity/" target="_blank" rel="noopener">Solidity</a> 就是其中一种图灵完备语言。</p><h4 id="为什么比特币脚本是图灵非完备的"><a href="#为什么比特币脚本是图灵非完备的" class="headerlink" title="为什么比特币脚本是图灵非完备的"></a>为什么比特币脚本是图灵非完备的</h4><p>因为没有必要。比特币脚本没有必要做到像以太坊智能合约那样复杂。事实上，如果一个脚本是图灵完备的，它会给恶意的人以机会去随意创造复杂的交易，这将会吃掉比特币网络的哈希率并降低整个系统的性能。</p><blockquote><p><strong>哈希率</strong>是比特币网络的处理能力的衡量单位。为了安全，比特币网络必须进行高强度的数学运算。网络的哈希率达到10TH/s，意味着这个网络每秒能处理10亿次计算。</p></blockquote><h4 id="逆波兰表示法-Reverse-Polish-notation"><a href="#逆波兰表示法-Reverse-Polish-notation" class="headerlink" title="逆波兰表示法(Reverse Polish notation)"></a>逆波兰表示法(<strong>Reverse Polish notation</strong>)</h4><blockquote><p><strong>逆波兰表示法</strong>（<strong>Reverse Polish notation</strong>，<strong>RPN</strong>，或<strong>逆波兰记法</strong>），是一种是由<a href="https://zh.wikipedia.org/wiki/%E6%B3%A2%E5%85%B0" target="_blank" rel="noopener">波兰</a><a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E5%AD%A6%E5%AE%B6" target="_blank" rel="noopener">数学家</a><a href="https://zh.wikipedia.org/wiki/%E6%89%AC%C2%B7%E6%AD%A6%E5%8D%A1%E8%B0%A2%E7%BB%B4%E5%A5%87" target="_blank" rel="noopener">扬·武卡谢维奇</a>1920年引入的数学表达式方式，在逆波兰记法中，所有<a href="https://zh.wikipedia.org/w/index.php?title=%E6%93%8D%E4%BD%9C%E7%AC%A6&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener">操作符</a>置于<a href="https://zh.wikipedia.org/wiki/%E6%93%8D%E4%BD%9C%E6%95%B0" target="_blank" rel="noopener">操作数</a>的后面，因此也被称为<strong>后缀表示法</strong>。逆波兰记法不需要括号来标识操作符的优先级。</p><p>来源：<a href="https://zh.wikipedia.org/wiki/%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E7%A4%BA%E6%B3%95" target="_blank" rel="noopener">维基百科</a></p></blockquote><p>例如：</p><table><thead><tr><th>解释</th><th>常规表示</th><th>逆波兰表示法</th></tr></thead><tbody><tr><td>三加四</td><td>3 + 4</td><td>34+</td></tr><tr><td>先3减去4，再加上5</td><td>3 - 4 + 5</td><td>3 4 - 5 +</td></tr><tr><td>先3减去4，再乘以5</td><td>(3 - 4)*5</td><td>3 4 - 5 *</td></tr></tbody></table><h4 id="基于堆栈"><a href="#基于堆栈" class="headerlink" title="基于堆栈"></a>基于堆栈</h4><p>这是一种具有 LIFO（Last In First Out）特性的数据结构，熟悉数据结构的应该非常清楚，这里不多做介绍。</p><blockquote><p>想深入了解的朋友，可以查看我的另一篇文章</p><p><a href="https://wangwei.one/posts/java-data-structures-and-algorithms-stack.html">https://wangwei.one/posts/java-data-structures-and-algorithms-stack.html</a></p></blockquote><p><img src="https://img.i7years.com/blog/stack-1.png" alt="stack"></p><h4 id="类Forth脚本语言"><a href="#类Forth脚本语言" class="headerlink" title="类Forth脚本语言"></a>类Forth脚本语言</h4><p>比特币脚本恰好类似于编程语言“Forth”，它也恰好是基于堆栈的一种编程语言。</p><blockquote><p>查看：<a href="https://zh.wikipedia.org/wiki/Forth" target="_blank" rel="noopener">Forth编程语言</a></p></blockquote><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p>比特币的脚本语言非常简单，这种语言的代码无非就是一系列数据和操作符。脚本语言通过从左至右地处理每个项目的方式执行脚本。数字（常数）被推送至堆栈，操作符向堆栈推送（或移除）一个或多个参数，对它们进行处理，甚至可能会向堆栈推送一个结果。例如，OP_ADD将从堆栈移除两个项目，将二者相加，然后再将二者相加之和推送到堆栈。</p><p>条件操作符评估一项条件，产生一个真或假的结果。例如，OP_EQUAL从堆栈移除两个项目，假如二者相等则推送真（表示为1），假如二者不等则推送为假（表示为0）。比特币交易脚本常含条件操作符，当一笔交易有效时，就会产生True的结果。</p><p>我们以一个简单的脚本来进行演示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> <span class="number">3</span> OP_ADD <span class="number">5</span> OP_EQUAL</span><br></pre></td></tr></table></figure><p>从左至右，依次执行，过程如下：</p><p><img src="https://img.i7years.com/blog/script-example1.png" alt=""></p><p>弄明白这个过程之后，你会发现其中所蕴含的堆栈特性以及逆波兰表示法特性。接下来，我们来看下比特币脚本的锁定与解锁逻辑。</p><h2 id="锁定与解锁逻辑"><a href="#锁定与解锁逻辑" class="headerlink" title="锁定与解锁逻辑"></a>锁定与解锁逻辑</h2><p>比特币的交易验证引擎依赖于两类脚本来验证比特币交易：一个锁定脚本和一个解锁脚本。</p><p><strong>锁定脚本</strong>是放置在输出上的消费条件：它指定将来要花费输出必须满足的条件。锁定脚本常被称为<code>scriptPubKey</code>，因为它通常包含公钥或比特币地址（公钥哈希）。</p><p><strong>解锁脚本</strong>是通过“解决”或满足锁定脚本上的交易输出条件并允许交易输出花费的脚本。 解锁脚本是每个交易输入的一部分。大多数情况下，它包含了由用户私钥所产生的数字签名。解锁脚本常被称为 <code>scriptSig</code> ，因为它通常包含数字签名。</p><p>每当要验证一笔交易的有效性时，解锁脚本和锁定脚本会随着堆栈的传递被分别执行。首先，使用堆栈执行引擎执行解锁脚本。如果解锁脚本在执行过程中未报错(例如:没有“悬挂”操作码)，则复制 主堆栈(而不是备用堆栈)，并执行锁定脚本。如果从解锁脚本中复制而来的堆栈数据执行锁定脚本的结果 为“TRUE”，那么解锁脚本就成功地满足了锁定脚本所设置的条件，因此，该输入是一个能使用该UTXO的有效授 权。如果在合并脚本后的结果不是”TRUE“以外的任何结果，输入都是无效的，因为它不能满足UTXO中所设置的使 用该笔资金的条件。</p><p>下图所示是最为常见类型的比特币交易（向公钥哈希进行一笔支付）的解锁和锁定脚本样本，该样本展示了在脚本验证之前将解锁脚本和锁定脚本串联而成的组合脚本。</p><p><img src="https://img.i7years.com/blog/bitcoin-script.png" alt=""></p><p>这是比特币脚本中使用最为常见的一种形式，名叫 <em>Pay to Public Key Hash</em> (P2PKH)。基于前面 <code>2 + 3 = 5</code> 的验证过程，我们可以得到 P2PKH 脚本在堆栈引擎中的验证过程如下所示：</p><p><img src="https://img.i7years.com/blog/P2PKH.png" alt=""></p><p>好了， 到此为止，你已经对比特币的交易脚本以及它的工作原理已经有了一个非常清楚的理解与认识。</p><p>参考资料</p><ul><li><a href="https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch06.asciidoc" target="_blank" rel="noopener">《精通比特币（第二版）》第六章</a></li><li><a href="https://jeiwan.cc/posts/building-blockchain-in-go-part-6" target="_blank" rel="noopener">https://jeiwan.cc/posts/building-blockchain-in-go-part-6</a></li><li><a href="https://blockgeeks.com/guides/best-bitcoin-script-guide" target="_blank" rel="noopener">https://blockgeeks.com/guides/best-bitcoin-script-guide</a></li><li><a href="https://blockgeeks.com/guides/bitcoin-script-guide-part-2" target="_blank" rel="noopener">https://blockgeeks.com/guides/bitcoin-script-guide-part-2</a></li><li><a href="https://en.bitcoin.it/wiki/Script" target="_blank" rel="noopener">https://en.bitcoin.it/wiki/Script</a></li></ul>]]></content>
      
        <categories>
            
            <category> blockchain </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> bitcoin </tag>
            
            <tag> bitcoin-script </tag>
            
            <tag> smart contract </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于Java语言构建区块链（六）—— 交易（Merkle Tree）]]></title>
      <url>/posts/build-blockchain-in-java-transaction-merkle-tree.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/pexels-photo-38136.webp?imageslim" alt="pexels-photo-38136"></p><blockquote><p>文章的主要思想和内容均来自 <a href="https://jeiwan.cc/posts/building-blockchain-in-go-part-6/" target="_blank" rel="noopener">https://jeiwan.cc/posts/building-blockchain-in-go-part-6/</a></p></blockquote><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在这一系列文章的最开始部分，我们提到过区块链是一个分布式的数据库。那时候，我们决定跳过”分布式”这一环节，并且聚焦于”数据存储”这一环节。到目前为止，我们几乎实现了区块链的所有组成部分。在本篇文章中，我们将会涉及一些在前面的文章中所忽略的一些机制，并且在下一篇文章中我们将开始研究区块链的分布式特性。</p><a id="more"></a><p>前面各个部分内容：</p><ol><li><a href="https://wangwei.one/posts/df195d9.html">基本原型</a></li><li><a href="https://wangwei.one/posts/7890ab7e.html">工作量证明</a></li><li><a href="https://wangwei.one/posts/35c768a3.html">持久化 &amp; 命令行</a></li><li><a href="https://wangwei.one/posts/9cf9e42a.html">交易（UTXO）</a></li><li><a href="https://wangwei.one/posts/f9088e0f.html">地址（钱包）</a></li></ol><h2 id="UTXO池"><a href="#UTXO池" class="headerlink" title="UTXO池"></a>UTXO池</h2><p>在 <a href="https://wangwei.one/posts/35c768a3.html">持久化 &amp; 命令行</a> 这篇文章中，我们研究了比特币核心存储区块的方式。当中我们提到过与区块相关的数据存储在 <strong>blocks</strong> 这个数据桶中，而交易数据则存储在 <strong>chainstate</strong> 这个数据桶中，让我们来回忆一下，<strong>chainstate</strong> 数据桶的数据结构：</p><ul><li><p>‘c’ + 32-byte transaction hash -&gt; unspent transaction output record for that transaction</p><blockquote><p>某笔交易的UTXO记录</p></blockquote></li></ul><ul><li><p>‘B’ -&gt; 32-byte block hash: the block hash up to which the database represents the unspent transaction outputs</p><blockquote><p>数据库所表示的UTXO的区块Hash</p></blockquote></li></ul><p>从那篇文章开始，我们已经实现了比特币的交易机制，但是我们还没有用到 <strong>chainstate</strong> 数据桶去存储我们的交易输出。所以，这将是我们现在要去做的事情。</p><p><strong>chainstate</strong> 不会去存储交易数据。相反，它存储的是 UTXO 集，也就是未被花费的交易输出集合。除此之外，它还存储了”数据库所表示的UTXO的区块Hash”，我们这里先暂且忽略这一点，因为我们还没有用到区块高度（这一点我们会在后面的文章进行实现）。</p><p>那么，我们为什么需要 UTXO 池呢？</p><p>一起来看一下我们前面实现的 <strong>findUnspentTransactions</strong> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 查找钱包地址对应的所有未花费的交易</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> pubKeyHash 钱包公钥Hash</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> Transaction[] findUnspentTransactions(<span class="keyword">byte</span>[] pubKeyHash) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">     Map&lt;String, <span class="keyword">int</span>[]&gt; allSpentTXOs = <span class="keyword">this</span>.getAllSpentTXOs(pubKeyHash);</span><br><span class="line">     Transaction[] unspentTxs = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 再次遍历所有区块中的交易输出</span></span><br><span class="line">     <span class="keyword">for</span> (BlockchainIterator blockchainIterator = <span class="keyword">this</span>.getBlockchainIterator(); blockchainIterator.hashNext(); ) &#123;</span><br><span class="line">         Block block = blockchainIterator.next();</span><br><span class="line">         <span class="keyword">for</span> (Transaction transaction : block.getTransactions()) &#123;</span><br><span class="line"></span><br><span class="line">             String txId = Hex.encodeHexString(transaction.getTxId());</span><br><span class="line"></span><br><span class="line">             <span class="keyword">int</span>[] spentOutIndexArray = allSpentTXOs.get(txId);</span><br><span class="line"></span><br><span class="line">             <span class="keyword">for</span> (<span class="keyword">int</span> outIndex = <span class="number">0</span>; outIndex &lt; transaction.getOutputs().length; outIndex++) &#123;</span><br><span class="line">                 <span class="keyword">if</span> (spentOutIndexArray != <span class="keyword">null</span> &amp;&amp; ArrayUtils.contains(spentOutIndexArray, outIndex)) &#123;</span><br><span class="line">                     <span class="keyword">continue</span>;</span><br><span class="line">                 &#125;</span><br><span class="line"></span><br><span class="line">                 <span class="comment">// 保存不存在 allSpentTXOs 中的交易</span></span><br><span class="line">                 <span class="keyword">if</span> (transaction.getOutputs()[outIndex].isLockedWithKey(pubKeyHash)) &#123;</span><br><span class="line">                     unspentTxs = ArrayUtils.add(unspentTxs, transaction);</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> unspentTxs;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>该方法是用来查找钱包地址对应的包含未花费交易输出的交易信息。由于交易信息是存储在区块当中，所以我们现有的做法是遍历区块链中的每个区块，然后遍历每个区块中的交易信息，再然后遍历每个交易中的交易输出，并检查交易输出是否被相应的钱包地址所锁定，效率非常低下。截止2018年3月29号，比特币中有 <a href="https://blockchain.info/zh-cn/block-height/515698" target="_blank" rel="noopener">515698</a> 个区块，并且这些数据占据了140+Gb 的磁盘空间。这也就意味着一个人必须运行全节点（下载所有的区块数据）才能验证交易信息。此外，验证交易信息需要遍历所有的区块。</p><p>针对这个问题的解决办法是需要有一个存储了所有UTXOs（未花费交易输出）的索引，这就是 UTXOs 池所要做的事情：UTXOs池其实是一个缓存空间，它所缓存的数据需要从构建区块链中所有的交易数据中获得（通过遍历所有的区块链，不过这个构建操作只需要执行一次即可），并且它后续还会用于钱包余额的计算以及新的交易数据的验证。截止到2017年9月，UTXOs池大约为 2.7Gb。</p><p>好了，让我们来想一下，为了实现 UTXOs 池我们需要做哪些事情。当前，有下列方法被用于查找交易信息：</p><ol><li><p><strong>Blockchain.getAllSpentTXOs</strong> —— 查询所有已被花费的交易输出。它需要遍历区块链中所有区块中交易信息。</p></li><li><p><strong>Blockchain.findUnspentTransactions</strong> —— 查询包含未被花费的交易输出的交易信息。它也需要遍历区块链中所有区块中交易信息。</p></li><li><p><strong>Blockchain.findSpendableOutputs</strong> —— 该方法用于新的交易创建之时。它需要找到足够多的交易输出，以满足所需支付的金额。需要调用 <strong>Blockchain.findUnspentTransactions</strong> 方法。</p></li><li><p><strong>Blockchain.findUTXO</strong> —— 查询钱包地址所对应的所有未花费交易输出，然后用于计算钱包余额。需要调用</p><p><strong>Blockchain.findUnspentTransactions</strong> 方法。</p></li><li><p><strong>Blockchain.findTransaction</strong> —— 通过交易ID查询交易信息。它需要遍历所有的区块直到找到交易信息为止。</p></li></ol><p>如你所见，上面这些方法都需要去遍历数据库中的所有区块。由于UTXOs池只存储未被花费的交易输出，而不会存储所有的交易信息，因此我们不会对有 <strong>Blockchain.findTransaction</strong> 进行优化。</p><p>那么，我们需要下列这些方法：</p><ol><li><strong>Blockchain.findUTXO</strong> —— 通过遍历所有的区块来找到所有未被花费的交易输出.</li><li><strong>UTXOSet.reindex</strong> —— 调用上面 <strong>findUTXO</strong> 方法，然后将查询结果存储在数据库中。也即需要进行缓存的地方。</li><li><strong>UTXOSet.findSpendableOutputs</strong> —— 与 <strong>Blockchain.findSpendableOutputs</strong> 类似，区别在于会使用 UTXO 池。</li><li><strong>UTXOSet.findUTXO</strong> —— 与<strong>Blockchain.findUTXO</strong> 类似，区别在于会使用 UTXO 池。</li><li><strong>Blockchain.findTransaction</strong> —— 逻辑保持不变。</li></ol><p>这样，两个使用最频繁的方法将从现在开始使用缓存！让我们开始编码吧！</p><p>定义 <strong>UTXOSet</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UTXOSet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Blockchain blockchain;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重建 UTXO 池索引:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UTXOSet</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   ...</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 重建 UTXO 池索引</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Synchronized</span>   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"Start to reIndex UTXO set !"</span>);</span><br><span class="line">        RocksDBUtils.getInstance().cleanChainStateBucket();</span><br><span class="line">        Map&lt;String, TXOutput[]&gt; allUTXOs = blockchain.findAllUTXOs();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, TXOutput[]&gt; entry : allUTXOs.entrySet()) &#123;</span><br><span class="line">            RocksDBUtils.getInstance().putUTXOs(entry.getKey(), entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">"ReIndex UTXO set finished ! "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此方法用于初始化 UTXOSet。首先，需要清空 <code>chainstate</code> 数据桶，然后查询所有未被花费的交易输出，并将它们保存到 <code>chainstate</code> 数据桶中。</p><p>实现 <strong>findSpendableOutputs</strong> 方法，供 <strong>Transation.newUTXOTransaction</strong> 调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UTXOSet</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   ... </span><br><span class="line"> </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 寻找能够花费的交易</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pubKeyHash 钱包公钥Hash</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount     花费金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SpendableOutputResult <span class="title">findSpendableOutputs</span><span class="params">(<span class="keyword">byte</span>[] pubKeyHash, <span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, <span class="keyword">int</span>[]&gt; unspentOuts = Maps.newHashMap();</span><br><span class="line">        <span class="keyword">int</span> accumulated = <span class="number">0</span>;</span><br><span class="line">        Map&lt;String, <span class="keyword">byte</span>[]&gt; chainstateBucket = RocksDBUtils.getInstance().getChainstateBucket();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, <span class="keyword">byte</span>[]&gt; entry : chainstateBucket.entrySet()) &#123;</span><br><span class="line">            String txId = entry.getKey();</span><br><span class="line">            TXOutput[] txOutputs = (TXOutput[]) SerializeUtils.deserialize(entry.getValue());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> outId = <span class="number">0</span>; outId &lt; txOutputs.length; outId++) &#123;</span><br><span class="line">                TXOutput txOutput = txOutputs[outId];</span><br><span class="line">                <span class="keyword">if</span> (txOutput.isLockedWithKey(pubKeyHash) &amp;&amp; accumulated &lt; amount) &#123;</span><br><span class="line">                    accumulated += txOutput.getValue();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">int</span>[] outIds = unspentOuts.get(txId);</span><br><span class="line">                    <span class="keyword">if</span> (outIds == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        outIds = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;outId&#125;;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        outIds = ArrayUtils.add(outIds, outId);</span><br><span class="line">                    &#125;</span><br><span class="line">                    unspentOuts.put(txId, outIds);</span><br><span class="line">                    <span class="keyword">if</span> (accumulated &gt;= amount) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SpendableOutputResult(accumulated, unspentOuts);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现 <strong>findUTXOs</strong> 接口，供 <strong>CLI.getBalance</strong> 调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UTXOSet</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   ... </span><br><span class="line"> </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找钱包地址对应的所有UTXO</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pubKeyHash 钱包公钥Hash</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> TXOutput[] findUTXOs(<span class="keyword">byte</span>[] pubKeyHash) &#123;</span><br><span class="line">        TXOutput[] utxos = &#123;&#125;;</span><br><span class="line">        Map&lt;String, <span class="keyword">byte</span>[]&gt; chainstateBucket = RocksDBUtils.getInstance().getChainstateBucket();</span><br><span class="line">        <span class="keyword">if</span> (chainstateBucket.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> utxos;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">byte</span>[] value : chainstateBucket.values()) &#123;</span><br><span class="line">            TXOutput[] txOutputs = (TXOutput[]) SerializeUtils.deserialize(value);</span><br><span class="line">            <span class="keyword">for</span> (TXOutput txOutput : txOutputs) &#123;</span><br><span class="line">                <span class="keyword">if</span> (txOutput.isLockedWithKey(pubKeyHash)) &#123;</span><br><span class="line">                    utxos = ArrayUtils.add(utxos, txOutput);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> utxos;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上这些方法都是先前 <strong>Blockchain</strong> 中相应方法的微调版，先前的方法将不再使用。</p><p>有了UTXO池之后，意味着我们的交易数据分开存储到了两个不同的数据桶中：交易数据存储到了 <strong>block</strong> 数据桶中，而UTXO存储到了 <strong>chainstate</strong> 数据桶中。这就需要一种同步机制来保证每当一个新的区块产生时，UTXO池能够及时同步最新区块中的交易数据，毕竟我们不想频地进行 <strong>reIndex</strong> 。因此，我们需要如下方法：</p><p>更新UTXO池：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UTXOSet</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   ... </span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新UTXO池</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 当一个新的区块产生时，需要去做两件事情：</span></span><br><span class="line"><span class="comment">     * 1）从UTXO池中移除花费掉了的交易输出；</span></span><br><span class="line"><span class="comment">     * 2）保存新的未花费交易输出；</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tipBlock 最新的区块</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Synchronized</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Block tipBlock)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tipBlock == <span class="keyword">null</span>) &#123;</span><br><span class="line">            log.error(<span class="string">"Fail to update UTXO set ! tipBlock is null !"</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Fail to update UTXO set ! "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Transaction transaction : tipBlock.getTransactions()) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 根据交易输入排查出剩余未被使用的交易输出</span></span><br><span class="line">            <span class="keyword">if</span> (!transaction.isCoinbase()) &#123;</span><br><span class="line">                <span class="keyword">for</span> (TXInput txInput : transaction.getInputs()) &#123;</span><br><span class="line">                    <span class="comment">// 余下未被使用的交易输出</span></span><br><span class="line">                    TXOutput[] remainderUTXOs = &#123;&#125;;</span><br><span class="line">                    String txId = Hex.encodeHexString(txInput.getTxId());</span><br><span class="line">                    TXOutput[] txOutputs = RocksDBUtils.getInstance().getUTXOs(txId);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (txOutputs == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> outIndex = <span class="number">0</span>; outIndex &lt; txOutputs.length; outIndex++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (outIndex != txInput.getTxOutputIndex()) &#123;</span><br><span class="line">                            remainderUTXOs = ArrayUtils.add(remainderUTXOs, txOutputs[outIndex]);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 没有剩余则删除，否则更新</span></span><br><span class="line">                    <span class="keyword">if</span> (remainderUTXOs.length == <span class="number">0</span>) &#123;</span><br><span class="line">                        RocksDBUtils.getInstance().deleteUTXOs(txId);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        RocksDBUtils.getInstance().putUTXOs(txId, remainderUTXOs);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 新的交易输出保存到DB中</span></span><br><span class="line">            TXOutput[] txOutputs = transaction.getOutputs();</span><br><span class="line">            String txId = Hex.encodeHexString(transaction.getTxId());</span><br><span class="line">            RocksDBUtils.getInstance().putUTXOs(txId, txOutputs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>让我们将 UTXOSet 用到它们所需之处去：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CLI</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建区块链</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> address</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createBlockchain</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        Blockchain blockchain = Blockchain.createBlockchain(address);</span><br><span class="line">        UTXOSet utxoSet = <span class="keyword">new</span> UTXOSet(blockchain);</span><br><span class="line">        utxoSet.reIndex();</span><br><span class="line">        log.info(<span class="string">"Done ! "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当创建一个新的区块链是，我们需要重建 UTXO 池索引。截止目前，这是唯一一处用到 <strong>reIndex</strong> 的地方，尽管看起有些多余，因为在区块链创建之初仅仅只有一个区块和一笔交易。</p><p>修改 <strong>CLI.send</strong> 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CLI</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转账</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> from</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> to</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String from, String to, <span class="keyword">int</span> amount)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        </span><br><span class="line">        ...</span><br><span class="line">        </span><br><span class="line">        Blockchain blockchain = Blockchain.createBlockchain(from);</span><br><span class="line">        Transaction transaction = Transaction.newUTXOTransaction(from, to, amount, blockchain);</span><br><span class="line">        Block newBlock = blockchain.mineBlock(<span class="keyword">new</span> Transaction[]&#123;transaction&#125;);</span><br><span class="line">        <span class="keyword">new</span> UTXOSet(blockchain).update(newBlock);</span><br><span class="line">		</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当一个新的区块产生后，需要去更新 UTXO 池数据。</p><p>让我们来检查一下它们的运行情况：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">$ ./blochchain.sh  createwallet</span><br><span class="line">wallet address : <span class="number">1</span>JgppX2xMshr35wHzvNWQBejUAZ3Te5Mdf</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  createwallet</span><br><span class="line">wallet address : <span class="number">1</span>HX7bWwCjvxkjq65GUgAVRFfTZy6yKWkoG</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  createwallet</span><br><span class="line">wallet address : <span class="number">1</span>L1RoFgyjCrNPCPHmSEBtNiV3h2wiF9mZV</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  createblockchain -address <span class="number">1</span>JgppX2xMshr35wHzvNWQBejUAZ3Te5Mdf</span><br><span class="line"></span><br><span class="line">Elapsed Time: <span class="number">164.961</span> seconds </span><br><span class="line">correct hash Hex: <span class="number">00225493862611</span>bc517cb6b3610e99d26d98a6b52484c9fa745df6ceff93f445 </span><br><span class="line"></span><br><span class="line">Done ! </span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  getbalance -address <span class="number">1</span>JgppX2xMshr35wHzvNWQBejUAZ3Te5Mdf</span><br><span class="line">Balance of <span class="string">'1JgppX2xMshr35wHzvNWQBejUAZ3Te5Mdf'</span>: <span class="number">10</span></span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  send -from <span class="number">1</span>HX7bWwCjvxkjq65GUgAVRFfTZy6yKWkoG -to  <span class="number">1</span>JgppX2xMshr35wHzvNWQBejUAZ3Te5Mdf -amount <span class="number">5</span></span><br><span class="line">java.lang.Exception: ERROR: Not enough funds</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  send -from <span class="number">1</span>JgppX2xMshr35wHzvNWQBejUAZ3Te5Mdf -to <span class="number">1</span>HX7bWwCjvxkjq65GUgAVRFfTZy6yKWkoG -amount <span class="number">2</span></span><br><span class="line">Elapsed Time: <span class="number">54.92</span> seconds </span><br><span class="line">correct hash Hex: <span class="number">0001</span>ab21f71ff2d6d532bf3b3388db790c2b03e28d7bd27bd669c5f6380a4e5b </span><br><span class="line"></span><br><span class="line">Success!</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  send -from <span class="number">1</span>JgppX2xMshr35wHzvNWQBejUAZ3Te5Mdf -to <span class="number">1</span>L1RoFgyjCrNPCPHmSEBtNiV3h2wiF9mZV -amount <span class="number">2</span></span><br><span class="line">Elapsed Time: <span class="number">54.92</span> seconds </span><br><span class="line">correct hash Hex: <span class="number">0009</span>b925cc94e3db8bab2958b1fc2d1764aa15531e20756d92c3a93065c920f0 </span><br><span class="line"></span><br><span class="line">Success!</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  getbalance -address <span class="number">1</span>JgppX2xMshr35wHzvNWQBejUAZ3Te5Mdf</span><br><span class="line">Balance of <span class="string">'1JgppX2xMshr35wHzvNWQBejUAZ3Te5Mdf'</span>: <span class="number">6</span></span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  getbalance -address <span class="number">1</span>HX7bWwCjvxkjq65GUgAVRFfTZy6yKWkoG</span><br><span class="line">Balance of <span class="string">'1HX7bWwCjvxkjq65GUgAVRFfTZy6yKWkoG'</span>: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  getbalance -address <span class="number">1</span>L1RoFgyjCrNPCPHmSEBtNiV3h2wiF9mZV</span><br><span class="line">Balance of <span class="string">'1L1RoFgyjCrNPCPHmSEBtNiV3h2wiF9mZV'</span>: <span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="奖励机制"><a href="#奖励机制" class="headerlink" title="奖励机制"></a>奖励机制</h2><p>前面的章节中我们省略了矿工挖矿的奖励机制。时机已经成熟，该实现它了。</p><p>矿工奖励其实是一个 coinbase 交易（创币交易）。当一个矿工节点开始去生产一个新的区块时，他会从队列中取出一些交易数据，并且为它们预制一个 coinbase 交易。这笔 coinbase 交易中仅有的交易输出包含了矿工的公钥hash。</p><p>只需要更新 <strong>send</strong> 命令接口，我们就可以轻松实现矿工的奖励机制：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CLI</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转账</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> from</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> to</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String from, String to, <span class="keyword">int</span> amount)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        </span><br><span class="line">        ...</span><br><span class="line">        </span><br><span class="line">        Blockchain blockchain = Blockchain.createBlockchain(from);</span><br><span class="line">        <span class="comment">// 新交易</span></span><br><span class="line">        Transaction transaction = Transaction.newUTXOTransaction(from, to, amount, blockchain);</span><br><span class="line">        <span class="comment">// 奖励</span></span><br><span class="line">        Transaction rewardTx = Transaction.newCoinbaseTX(from, <span class="string">""</span>);</span><br><span class="line">        Block newBlock = blockchain.mineBlock(<span class="keyword">new</span> Transaction[]&#123;transaction, rewardTx&#125;);</span><br><span class="line">        <span class="keyword">new</span> UTXOSet(blockchain).update(newBlock);</span><br><span class="line">		</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line"> 	   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还需要修改交易验证方法，coinbase 交易直接验证通过：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blockchain</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交易签名验证</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tx</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">verifyTransactions</span><span class="params">(Transaction tx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tx.isCoinbase()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在我们的实现逻辑中，代币的发送也是区块的生产者，因此，奖励也归他所有。</p><p>让我们来验证一下奖励机制：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">$ ./blochchain.sh  createwallet </span><br><span class="line">wallet address : <span class="number">1</span>MpdtjTEsDvrkrLWmMswq4K3VPtevXXnUD</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  createwallet </span><br><span class="line">wallet address : <span class="number">17</span>crpQoWy7TEkY9UPjZ3Qt9Fc2rWPUt8KX</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  createwallet </span><br><span class="line">wallet address : <span class="number">12</span>L868QZW1ySYzf2oT5ha9py9M5JrSRhvT</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  createblockchain -address <span class="number">1</span>MpdtjTEsDvrkrLWmMswq4K3VPtevXXnUD</span><br><span class="line"></span><br><span class="line">Elapsed Time: <span class="number">17.973</span> seconds</span><br><span class="line">correct hash Hex: <span class="number">0000</span>defe83a851a5db3803d5013bbc20c6234f176b2c52ae36fdb53d28b33d93 </span><br><span class="line"></span><br><span class="line">Done ! </span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  send -from <span class="number">1</span>MpdtjTEsDvrkrLWmMswq4K3VPtevXXnUD -to <span class="number">17</span>crpQoWy7TEkY9UPjZ3Qt9Fc2rWPUt8KX -amount <span class="number">6</span></span><br><span class="line">Elapsed Time: <span class="number">30.887</span> seconds</span><br><span class="line">correct hash Hex: <span class="number">00005</span>fd36a2609b43fd940577f93b8622e88e854f5ccfd70e113f763b6df69f7 </span><br><span class="line"></span><br><span class="line">Success!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  send -from <span class="number">1</span>MpdtjTEsDvrkrLWmMswq4K3VPtevXXnUD -to <span class="number">12</span>L868QZW1ySYzf2oT5ha9py9M5JrSRhvT -amount <span class="number">3</span></span><br><span class="line">Elapsed Time: <span class="number">45.267</span> seconds</span><br><span class="line">correct hash Hex: <span class="number">00009</span>fd7c59b830b60ec21ade7672921d2fb0962a1b06a42c245450e47582a13 </span><br><span class="line"></span><br><span class="line">Success!</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  getbalance -address <span class="number">1</span>MpdtjTEsDvrkrLWmMswq4K3VPtevXXnUD</span><br><span class="line">Balance of <span class="string">'1MpdtjTEsDvrkrLWmMswq4K3VPtevXXnUD'</span>: <span class="number">21</span></span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  getbalance -address <span class="number">17</span>crpQoWy7TEkY9UPjZ3Qt9Fc2rWPUt8KX</span><br><span class="line">Balance of <span class="string">'17crpQoWy7TEkY9UPjZ3Qt9Fc2rWPUt8KX'</span>: <span class="number">6</span></span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  getbalance -address <span class="number">12</span>L868QZW1ySYzf2oT5ha9py9M5JrSRhvT</span><br><span class="line">Balance of <span class="string">'12L868QZW1ySYzf2oT5ha9py9M5JrSRhvT'</span>: <span class="number">3</span></span><br></pre></td></tr></table></figure><p><strong>1MpdtjTEsDvrkrLWmMswq4K3VPtevXXnUD</strong> 这个地址一共收到了三份奖励：</p><ul><li><p>第一次是开采创世区块；</p></li><li><p>第二次是开采区块：00005fd36a2609b43fd940577f93b8622e88e854f5ccfd70e113f763b6df69f7</p></li><li><p>第三次是开采区块：00009fd7c59b830b60ec21ade7672921d2fb0962a1b06a42c245450e47582a13</p></li></ul><h2 id="Merkle-Tree"><a href="#Merkle-Tree" class="headerlink" title="Merkle Tree"></a>Merkle Tree</h2><p>Merkle Tree（默克尔树） 是这篇文章中我们需要重点讨论的一个机制。</p><p>正如我前面提到的那样，整个比特币的数据库占到了大约140G的磁盘空间。由于比特币的分布式特性，网络中的每一个节点必须是独立且自给自足的。每个比特币节点都是路由、区块链数据库、挖矿、钱包服务的功能集合。每个节点都参与全网络的路由功能，同时也可能包含其他功能。每个节点都参与验证并传播交易及区块信息，发现并维持与对等节点的连接。一个全节点（full node）包括以下四个功能：</p><p><img src="https://img.i7years.com/blog/full_node.png-zoom50" alt="full node"></p><p>随着越来越多的人开始使用比特币，这条规则开始变得越来越难以遵循：让每一个人都去运行一个完整的节点不太现实。在中本聪发布的 <a href="https://bitcoin.org/bitcoin.pdf" target="_blank" rel="noopener">比特币白皮书</a> 中，针对这个问题提出了一个解决方案：Simplified Payment Verification (SPV)（简易支付验证）。SPV是比特币的轻量级节点，它不需要下载所有的区块链数据，也<strong>不需要验证区块和交易数据</strong>。相反，当SPV想要验证一笔交易的有效性时，它会从它所连接的全节点上检索所需要的一些数据。这种机制保证了在只有一个全节点的情况，可以运行多个SPV轻钱包节点。</p><blockquote><p>更多有关SPV的介绍，请查看：<a href="https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch08.asciidoc#simplified-payment-verification-spv-nodes" target="_blank" rel="noopener">《精通比特币（第二版）》第八章</a></p></blockquote><p>为了使SPV成为可能，就需要有一种方法在没有全量下载区块数据的情况下，来检查一个区块是否包含了某笔交易。这就是 <strong>Merkle Tree</strong> 发挥作用的地方了。</p><p>比特币中所使用的Merkle Tree是为了获得交易的Hash值，随后这个已经被Pow（工作量证明）系统认可了的Hash值会被保存到区块头中。到目前为止，我们只是简单地计算了一个区块中每笔交易的Hash值，然后在准备Pow数据时，再对这些交易进行 <strong>SHA-256</strong> 计算。虽然这是一个用于获取区块交易唯一表示的一个不错的方式，但是这种方式不具备 Merkle Tree 的优点。</p><blockquote><p>更多有关Merkle Tree的介绍，请查看：<a href="https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch09.asciidoc#merkle-trees" target="_blank" rel="noopener">《精通比特币（第二版）》第九章</a></p></blockquote><p>来看一下Merkle Tree的结构：</p><p><img src="https://img.i7years.com/blog/merkle-tree-diagram.png" alt=""></p><p>每一个区块都会构建一个Merkle Tree，它从最底部的叶子节点开始往上构建，每一个交易的Hash就是一个叶子节点（比特币中用的双SHA256算法）。叶子节点的数量必须是偶数个，但是并不是每一个区块都能包含偶数笔交易数据。如果存在奇数笔交易数据，那么最后一笔交易数据将会被复制一份（这仅仅发生在Merkle Tree中，而不是区块中）。</p><p>从下往上移动，叶子节点成对分组，它们的Hash值被连接到一起，并且在此基础上再次计算出新的Hash值。新的Hash 形成新的树节点。这个过程不断地被重复，直到最后仅剩一个被称为根节点的树节点。这个根节点的Hash就是区块中交易数据们的唯一代表，它会被保存到区块头中，并被用于参与POW系统的计算。</p><p>Merkle树的好处是节点可以在不下载整个块的情况下验证某笔交易的合法性。 为此，只需要交易Hash，Merkle树根Hash和Merkle路径。</p><p>Merkle Tree代码实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.blockchain.transaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Lists;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> one.wangwei.blockchain.util.ByteUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.digest.DigestUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 默克尔树</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/04/15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MerkleTree</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Node root;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 叶子节点Hash</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[][] leafHashes;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MerkleTree</span><span class="params">(<span class="keyword">byte</span>[][] leafHashes)</span> </span>&#123;</span><br><span class="line">        constructTree(leafHashes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从底部叶子节点开始往上构建整个Merkle Tree</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> leafHashes</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">constructTree</span><span class="params">(<span class="keyword">byte</span>[][] leafHashes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (leafHashes == <span class="keyword">null</span> || leafHashes.length &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"ERROR:Fail to construct merkle tree ! leafHashes data invalid ! "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.leafHashes = leafHashes;</span><br><span class="line">        List&lt;Node&gt; parents = bottomLevel(leafHashes);</span><br><span class="line">        <span class="keyword">while</span> (parents.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            parents = internalLevel(parents);</span><br><span class="line">        &#125;</span><br><span class="line">        root = parents.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建一个层级节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> children</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;Node&gt; <span class="title">internalLevel</span><span class="params">(List&lt;Node&gt; children)</span> </span>&#123;</span><br><span class="line">        List&lt;Node&gt; parents = Lists.newArrayListWithCapacity(children.size() / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; children.size() - <span class="number">1</span>; i += <span class="number">2</span>) &#123;</span><br><span class="line">            Node child1 = children.get(i);</span><br><span class="line">            Node child2 = children.get(i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            Node parent = constructInternalNode(child1, child2);</span><br><span class="line">            parents.add(parent);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 内部节点奇数个，只对left节点进行计算</span></span><br><span class="line">        <span class="keyword">if</span> (children.size() % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            Node child = children.get(children.size() - <span class="number">1</span>);</span><br><span class="line">            Node parent = constructInternalNode(child, <span class="keyword">null</span>);</span><br><span class="line">            parents.add(parent);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> parents;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 底部节点构建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hashes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;Node&gt; <span class="title">bottomLevel</span><span class="params">(<span class="keyword">byte</span>[][] hashes)</span> </span>&#123;</span><br><span class="line">        List&lt;Node&gt; parents = Lists.newArrayListWithCapacity(hashes.length / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; hashes.length - <span class="number">1</span>; i += <span class="number">2</span>) &#123;</span><br><span class="line">            Node leaf1 = constructLeafNode(hashes[i]);</span><br><span class="line">            Node leaf2 = constructLeafNode(hashes[i + <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">            Node parent = constructInternalNode(leaf1, leaf2);</span><br><span class="line">            parents.add(parent);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (hashes.length % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            Node leaf = constructLeafNode(hashes[hashes.length - <span class="number">1</span>]);</span><br><span class="line">            <span class="comment">// 奇数个节点的情况，复制最后一个节点</span></span><br><span class="line">            Node parent = constructInternalNode(leaf, leaf);</span><br><span class="line">            parents.add(parent);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> parents;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建叶子节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hash</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Node <span class="title">constructLeafNode</span><span class="params">(<span class="keyword">byte</span>[] hash)</span> </span>&#123;</span><br><span class="line">        Node leaf = <span class="keyword">new</span> Node();</span><br><span class="line">        leaf.hash = hash;</span><br><span class="line">        <span class="keyword">return</span> leaf;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建内部节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> leftChild</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rightChild</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">constructInternalNode</span><span class="params">(Node leftChild, Node rightChild)</span> </span>&#123;</span><br><span class="line">        Node parent = <span class="keyword">new</span> Node();</span><br><span class="line">        <span class="keyword">if</span> (rightChild == <span class="keyword">null</span>) &#123;</span><br><span class="line">            parent.hash = leftChild.hash;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            parent.hash = internalHash(leftChild.hash, rightChild.hash);</span><br><span class="line">        &#125;</span><br><span class="line">        parent.left = leftChild;</span><br><span class="line">        parent.right = rightChild;</span><br><span class="line">        <span class="keyword">return</span> parent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算内部节点Hash</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> leftChildHash</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rightChildHash</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] internalHash(<span class="keyword">byte</span>[] leftChildHash, <span class="keyword">byte</span>[] rightChildHash) &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] mergedBytes = ByteUtils.merge(leftChildHash, rightChildHash);</span><br><span class="line">        <span class="keyword">return</span> DigestUtils.sha256(mergedBytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Merkle Tree节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">byte</span>[] hash;</span><br><span class="line">        <span class="keyword">private</span> Node left;</span><br><span class="line">        <span class="keyword">private</span> Node right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后修改 <strong>Block.hashTransaction</strong> 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Block</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">   ... </span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对区块中的交易信息进行Hash计算</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] hashTransaction() &#123;</span><br><span class="line">        <span class="keyword">byte</span>[][] txIdArrays = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="keyword">this</span>.getTransactions().length][];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.getTransactions().length; i++) &#123;</span><br><span class="line">            txIdArrays[i] = <span class="keyword">this</span>.getTransactions()[i].hash();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MerkleTree(txIdArrays).getRoot().getHash();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MerkleTree的根节点的Hash值，就是区块中交易信息的唯一代表。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这一节我们主要是对前面的交易机制做了进一步的优化，加入UTXO池和Merkle Tree机制。</p><p>下一讲，我们来介绍一下比特币的交易脚本相关的内容。</p><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ol><li>源码：<a href="https://github.com/wangweiX/blockchain-java/tree/part6-transaction2" target="_blank" rel="noopener">https://github.com/wangweiX/blockchain-java/tree/part6-transaction2</a></li><li><a href="https://github.com/bitcoinbook/bitcoinbook" target="_blank" rel="noopener">《精通比特币（第二版）》</a></li><li><a href="https://en.bitcoin.it/wiki/Bitcoin_Core_0.11_(ch_2" target="_blank" rel="noopener">The UTXO Set</a>:_Data_Storage#The_UTXO_set_.28chainstate_leveldb.29)</li><li><a href="https://statoshi.info/dashboard/db/unspent-transaction-output-set" target="_blank" rel="noopener">UTXO set statistics</a></li><li><a href="https://en.bitcoin.it/wiki/Protocol_documentation#Merkle_Trees" target="_blank" rel="noopener">Merkle Tree</a></li><li><a href="https://medium.com/@jonaldfyookball/why-every-bitcoin-user-should-understand-spv-security-520d1d45e0b9" target="_blank" rel="noopener">Why every Bitcoin user should understand “SPV security”</a></li><li><a href="https://en.bitcoin.it/wiki/Script" target="_blank" rel="noopener">Script</a></li><li><a href="https://github.com/sipa/bitcoin/commit/450cbb0944cd20a06ce806e6679a1f4c83c50db2" target="_blank" rel="noopener">“Ultraprune” Bitcoin Core commit</a></li><li><a href="https://medium.com/@maraoz/smart-contracts-and-bitcoin-a5d61011d9b1" target="_blank" rel="noopener">Smart contracts and Bitcoin</a></li></ol><p><img src="https://img.i7years.com/blog/blockchain_exploer.png" alt=""></p><blockquote><p><a href="https://press.one/file/v?s=26e600c30e75eaa13e96be514125b88979ee8ec589372b3f60eb5e3d6884f3e35992f70a44875916b4efc8d87f3021bbf4dea9c23253a8496120b75cc47a6cb30&amp;h=5da52a1d62de45729187a3eed46039f776095760c0848e670140ced8c3c0c32a&amp;a=23fe9bfd7ceef4b44c2ce44dcac8e4a49caf8026&amp;f=P1&amp;v=2" target="_blank" rel="noopener">https://press.one/file/v?s=26e600c30e75eaa13e96be514125b88979ee8ec589372b3f60eb5e3d6884f3e35992f70a44875916b4efc8d87f3021bbf4dea9c23253a8496120b75cc47a6cb30&amp;h=5da52a1d62de45729187a3eed46039f776095760c0848e670140ced8c3c0c32a&amp;a=23fe9bfd7ceef4b44c2ce44dcac8e4a49caf8026&amp;f=P1&amp;v=2</a></p></blockquote>]]></content>
      
        <categories>
            
            <category> blockchain </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> bitcoin </tag>
            
            <tag> Merkle Tree </tag>
            
            <tag> UTXO </tag>
            
            <tag> SPV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于Java语言构建区块链（五）—— 地址（钱包）]]></title>
      <url>/posts/build-blockchain-in-java-wallet-address.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/pexels-photo-730547.webp?imageslim" alt="wallet"></p><blockquote><p>文章的主要思想和内容均来自 <a href="https://jeiwan.cc/posts/building-blockchain-in-go-part-5/" target="_blank" rel="noopener">https://jeiwan.cc/posts/building-blockchain-in-go-part-5/</a></p></blockquote><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在 <a href="https://wangwei.one/posts/9cf9e42a.html">上一篇</a> 文章当中，我们开始了交易机制的实现。你已经了解到交易的一些非个人特征：没有用户账户，您的个人数据（例如：姓名、护照号码以及SSN(美国社会安全卡（Social Security Card）上的9 位数字)）不是必需的，并且不存储在比特币的任何地方。但仍然必须有一些东西能够识别你是这些交易输出的所有者（例如：锁定在这些输出上的币的所有者）。这就是比特币地址的作用所在。到目前为止，我们只是使用了任意的用户定义的字符串当做地址，现在是时候来实现真正的地址了，就像它们在比特币中实现的一样。</p><a id="more"></a><h2 id="比特币地址"><a href="#比特币地址" class="headerlink" title="比特币地址"></a>比特币地址</h2><p>这里有一个比特币地址的示例：<a href="https://blockchain.info/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa" target="_blank" rel="noopener">1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa</a>。这是一个非常早期的比特币地址，据称是属于中本聪的比特币地址。比特币地址是公开的。如果你想要给某人发送比特币，你需要知道对方的比特币地址。但是地址（尽管它是唯一的）并不能作为你是一个钱包所有者的凭证。事实上，这样的地址是公钥的一种可读性更好的表示 。在比特币中，你的身份是存储在你计算机上（或存储在你有权访问的其他位置）的一对（或多对）私钥和公钥。比特币依靠加密算法的组合来创建这些密钥，并保证世界上没有其他人任何人可以在没有物理访问密钥的情况下访问您的比特币。</p><blockquote><p>比特币地址与公钥不同。比特币地址是由公钥经过单向的哈希函数生成的</p></blockquote><p><img src="https://img.i7years.com/blog/mbc2_0405_wangwei.png" alt="PubKey to bitcoin address"></p><p>接下来，让我们来讨论一下这些加密算法。</p><blockquote><p><strong>注意</strong>：不要向本篇文章中的代码所生成的任何比特币地址发送真实的比特币来进行测试，否则后果自负……</p></blockquote><h2 id="公钥密码学"><a href="#公钥密码学" class="headerlink" title="公钥密码学"></a>公钥密码学</h2><p>公钥加密算法（public-key cryptography）使用的是密钥对：公钥和私钥。公钥属于非敏感信息，可以向任何人透露。相比之下，私钥不能公开披露：除了所有者之外，任何人都不能拥有私钥的权限，因为它是用作所有者标识的私钥。你的私钥代表就是你（当然是在加密货币世界里的）。</p><p>本质上，比特币钱包就是一对这样的密钥。当你安装一个钱包应用程序或者使用比特币客户端去生成一个新的地址时，它们就为你创建好了一个密钥对。在比特币种，谁控制了私钥，谁就掌握了所有发往对应公钥地址上所有比特币的控制权。</p><p>私钥和公钥只是随机的字节序列，因此它们不能被打印在屏幕上供人读取。这就是为什么比特币会用一种算法将公钥的字节序列转化为人类可读的字符串形式。</p><blockquote><p>如果你曾今使用过比特币钱包的应用程序，它可能会为你生成助记词密码短语。这些助记词可以用来替代私钥，并且能够生成私钥。这种机制是通过 <a href="https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki" target="_blank" rel="noopener">BIP-039</a> 来实现的。</p></blockquote><p>好了，现在我们已经知道在比特币中由什么来决定用户的标识了。但是，比特币是如何校验交易输出（和它里面存储的一些币）的所有权的呢？</p><h2 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h2><p>在数学和密码学中，有个数字签名的概念，这套算法保证了以下几点：</p><ol><li>保证数据从发送端传递到接收端的过程中不会被篡改；</li><li>数据由某个发送者创建；</li><li>发送者不能否认发送的数据；</li></ol><p>通过对数据应用签名算法（即签署数据），可以得到一个签名，以后可以对其进行验证。数字签名需要使用私钥，而验证则需要公钥。</p><p>为了能够签署数据我们需要：</p><ol><li>用于被签名的数据；</li><li>私钥。</li></ol><p>签名操作会产生一个存储在交易输入中的签名。为了能够验证一个签名，我们需要：</p><ol><li>签名之后的数据；</li><li>签名；</li><li>公钥。</li></ol><p>简单来讲，这个验证的过程可以被描述为：检查签名是由被签名数据加上私钥得来，并且这个公钥也是由该私钥生成。</p><blockquote><p>数字签名并不是一种加密方法，你无法从签名反向构造出源数据。这个和我们 <a href="https://wangwei.one/posts/7890ab7e.html">前面</a> 提到过的Hash算法有点类似：通过对一个数据使用Hash算法，你可以得到该数据的唯一表示。它们两者的不同之处在于，签名算法多了一个密钥对：它让数字签名得以验证成为可能。</p><p>但是密钥对也能够用于去加密数据：私钥用于加密数据，公钥用于解密数据。不过比特币并没有使用加密算法。</p></blockquote><p>在比特币中，每一笔交易输入都会被该笔交易的创建者进行签名。比特币中的每一笔交易在放入区块之前都必须得到验证。验证的意思就是：</p><ul><li>检查交易输入是否拥有引用前一笔交易中交易输出的权限</li><li>检查交易的签名是否正确</li></ul><p>数据签名以及签名验证的过程如下图所示：</p><p><img src="https://img.i7years.com/blog/signing-scheme.png" alt="signing-scheme"></p><p>让我们来回顾一下交易的完整生命周期：</p><ol><li>最开始，会有一个包含了Coinbase交易的创世区块。由于在Coinbase交易中没有真正的交易输入，所以它不需要签名。Coinbase交易的交易输出会包含一个Hashing之后的公钥（使用的算法为 <code>RIPEMD16(SHA256(PubKey))</code> ）</li><li>当一个人发送比特币时，会创建一笔交易。这笔交易的交易输入会引用前一笔或多笔交易的交易输出。每一个交易输入将会存储未经Hashing处理的公钥以及整个交易的签名信息。</li><li>当比特币网络中的其他节点收到其他节点广播的交易数据之后将，将会对其进行验证。其他的事情除外，他们将会验证：<ul><li>检查交易输入中公钥的Hash值是否与它所引用的交易输出的Hash值想匹配，这是确保发送方只能发送属于他们自己的比特币。</li><li>检查签名是否正确，这是为了确保这笔交易是由比特币的真正所有者创建的。</li></ul></li><li>当一个矿工准备开始开采一个新的区块时，他会将交易信息放入区块中，然后开始挖矿。</li><li>当一个区块完成挖矿之后，网络中的其他节点将会收到一条区块已挖矿完毕的消息，并且他们会把这个区块添加到区块链中去。</li><li>当一个区块被添加到区块链之后，就标志着这笔交易已经完成，它所产生的交易输出将会在新的交易中被引用。</li></ol><h2 id="椭圆曲线密码学"><a href="#椭圆曲线密码学" class="headerlink" title="椭圆曲线密码学"></a>椭圆曲线密码学</h2><p>正如前面所提到的那样，公钥和私钥是一串随机的字符序列。由于私钥是用来识别比特币所有者身份的缘故，因此有一个必要的条件：这个随机算法必须产生真正的随机序列。我们不希望意外地生成其他人所拥有的私钥。也就是要保证随机序列的绝对唯一性。</p><p>比特币是使用的椭圆曲线来生成的私钥。椭圆曲线是一个非常复杂的数学概念，这里我们不做详细的介绍（如果你对此非常好奇，可以点击 <a href="http://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/" target="_blank" rel="noopener">this gentle introduction to elliptic curves</a> 进行详细的 了解，警告：数学公式）。我们需要知道的是，这些曲线可以用来生成真正大而随机的数字。比特币所采用的曲线算法能够随机生成一个介于0到 2^2^56之间的数字（这是一个非常大的数字，用十进制表示的话，大约是10^77， 而整个可见的宇宙中，原子数在 10^78 到 10^82 之间） 。这么巨大的上限意味着产生两个一样的私钥是几乎不可能的事情。</p><p>另外，我们将会使用比特币中所使用的 ECDSA （椭圆曲线数字签名算法）去签署交易信息。</p><h2 id="Base58和Base58Check编码"><a href="#Base58和Base58Check编码" class="headerlink" title="Base58和Base58Check编码"></a>Base58和Base58Check编码</h2><p>现在让我们回到上面提到的比特币地址：<a href="https://blockchain.info/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa" target="_blank" rel="noopener">1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa</a> . 现在我们知道这个地址其实是公钥的一种可读高的表示方式。如果我们对他进行解码，我们会看到公钥看起来是这样子的（字节序列的十六进制的表示方式）：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0062</span>E907B15CBF27D5425399EBF6F0FB50EBB88F18C29B7D93</span><br></pre></td></tr></table></figure><h4 id="Base58"><a href="#Base58" class="headerlink" title="Base58"></a>Base58</h4><p>Base64使用了26个小写字母、26个大写字母、10个数字以及两个符号（例如“+”和“/”），用于在电子邮件这样的基于文本的媒介中传输二进制数据。Base64通常用于编码邮件中的附件。Base58是一种基于文本的二进制编码格式，用在比特币和其它的加密货币中。这种编码格式不仅实现了数据压缩，保持了易读性，还具有错误诊断功能。Base58是Base64编码格式的子集，同样使用大小写字母和10个数字，但舍弃了一些容易错读和在特定字体中容易混淆的字符。具体地，Base58不含Base64中的0（数字0）、O（大写字母o）、l（小写字母L）、I（大写字母i），以及“+”和“/”两个字符。简而言之，Base58就是由不包括（0，O，l，I）的大小写字母和数字组成。</p><p>比特币的Base58字母表：</p><blockquote><p>123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz</p></blockquote><h4 id="Base58Check"><a href="#Base58Check" class="headerlink" title="Base58Check"></a>Base58Check</h4><p>Base58Check是一种常用在比特币中的Base58编码格式，增加了错误校验码来检查数据在转录中出现的错误。校验码长4个字节，添加到需要编码的数据之后。校验码是从需要编码的数据的哈希值中得到的，所以可以用来检测并避免转录和输入中产生的错误。使用Base58check编码格式时，编码软件会计算原始数据的校验码并和结果数据中自带的校验码进行对比。二者不匹配则表明有错误产生，那么这个Base58Check格式的数据就是无效的。例如，一个错误比特币地址就不会被钱包认为是有效的地址，否则这种错误会造成资金的丢失。</p><p>为了使用Base58Check编码格式对数据（数字）进行编码，首先我们要对数据添加一个称作“版本字节”的前缀，这个前缀用来明确需要编码的数据的类型。例如，比特币地址的前缀是0（十六进制是0x00），而对私钥编码时前缀是128（十六进制是0x80）。</p><p>让我们以示意图的形式展示一下从公钥得到地址的过程：</p><p><img src="https://img.i7years.com/blog/mbc2_0406_wangwei.png" alt="Base58Check Encoding"></p><p>因此，上述解码的公钥由三部分组成：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Version  Public key hash                           Checksum</span><br><span class="line"><span class="number">00</span>       <span class="number">62</span>E907B15CBF27D5425399EBF6F0FB50EBB88F18  C29B7D93</span><br></pre></td></tr></table></figure><p>由于哈希函数是单向的（也就说无法逆转回去），所以不可能从一个哈希中提取公钥。不过通过执行哈希函数并进行哈希比较，我们可以检查一个公钥是否被用于哈希的生成。</p><p>OK，现在我们有了所有的东西，让我们来编写一些代码。 当一些概念被写成代码时，我们会对此理解的更加清晰和深刻。</p><h2 id="地址实现"><a href="#地址实现" class="headerlink" title="地址实现"></a>地址实现</h2><p>让我们从 <strong>Wallet</strong> 的构成开始，这里我们需要先引入一个maven包：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.bouncycastle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bcprov-jdk15on<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.59<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>钱包结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 钱包</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/03/14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wallet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 校验码长度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ADDRESS_CHECKSUM_LEN = <span class="number">4</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> BCECPrivateKey privateKey;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 公钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] publicKey;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Wallet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        initWallet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化钱包</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initWallet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            KeyPair keyPair = newECKeyPair();</span><br><span class="line">            BCECPrivateKey privateKey = (BCECPrivateKey) keyPair.getPrivate();</span><br><span class="line">            BCECPublicKey publicKey = (BCECPublicKey) keyPair.getPublic();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span>[] publicKeyBytes = publicKey.getQ().getEncoded(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.setPrivateKey(privateKey);</span><br><span class="line">            <span class="keyword">this</span>.setPublicKey(publicKeyBytes);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建新的密钥对</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> KeyPair <span class="title">newKeyPair</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 注册 BC Provider</span></span><br><span class="line">        Security.addProvider(<span class="keyword">new</span> BouncyCastleProvider());</span><br><span class="line">        <span class="comment">// 创建椭圆曲线算法的密钥对生成器，算法为 ECDSA</span></span><br><span class="line">        KeyPairGenerator g = KeyPairGenerator.getInstance(<span class="string">"ECDSA"</span>, BouncyCastleProvider.PROVIDER_NAME);</span><br><span class="line">        <span class="comment">// 椭圆曲线（EC）域参数设定</span></span><br><span class="line">        <span class="comment">// bitcoin 为什么会选择 secp256k1，详见：https://bitcointalk.org/index.php?topic=151120.0</span></span><br><span class="line">        ECParameterSpec ecSpec = ECNamedCurveTable.getParameterSpec(<span class="string">"secp256k1"</span>);</span><br><span class="line">        g.initialize(ecSpec, <span class="keyword">new</span> SecureRandom());</span><br><span class="line">        <span class="keyword">return</span> g.generateKeyPair();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所谓的钱包，其实本质上就是一个密钥对。这里我们需要借助 <strong><em>KeyPairGenerator</em></strong> 生成密钥对。</p><p>接着，我们来生成比特币的钱包地址：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wallet</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">   </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取钱包地址</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 获取 ripemdHashedKey</span></span><br><span class="line">        <span class="keyword">byte</span>[] ripemdHashedKey = BtcAddressUtils.ripeMD160Hash(<span class="keyword">this</span>.getPublicKey();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 添加版本 0x00</span></span><br><span class="line">        ByteArrayOutputStream addrStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        addrStream.write((<span class="keyword">byte</span>) <span class="number">0</span>);</span><br><span class="line">        addrStream.write(ripemdHashedKey);</span><br><span class="line">        <span class="keyword">byte</span>[] versionedPayload = addrStream.toByteArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 计算校验码</span></span><br><span class="line">        <span class="keyword">byte</span>[] checksum = BtcAddressUtils.checksum(versionedPayload);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 得到 version + paylod + checksum 的组合</span></span><br><span class="line">        addrStream.write(checksum);</span><br><span class="line">        <span class="keyword">byte</span>[] binaryAddress = addrStream.toByteArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 执行Base58转换处理</span></span><br><span class="line">        <span class="keyword">return</span> Base58Check.rawBytesToBase58(binaryAddress);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候，你就可以得到 <strong>真实的比特币地址</strong> 了，并且你可以到 <a href="https://blockchain.info/" target="_blank" rel="noopener">blockchain.info</a> 上去检查这个地址的余额。</p><blockquote><p>例如，通过 <strong>getAddress</strong> 方法，得到了一个比特币地址为：<a href="https://blockchain.info/address/1rZ9SjXMRwnbW3Pu8itC1HtNBVHERSQhaACbL16" target="_blank" rel="noopener">1rZ9SjXMRwnbW3Pu8itC1HtNBVHERSQhaACbL16</a></p></blockquote><p>我敢保证，无论你生成多少次比特币地址，它的余额始终为0.这就是为什么选择适当的公钥密码算法如此重要：考虑到私钥是随机数字，产生相同数字的机会必须尽可能低。 理想情况下，它必须低至“永不”。</p><p>另外，需要注意的是你不需要连接到比特币的节点上去获取比特币的地址。有关地址生成的开源算法工具包已经有很多编程语言和库实现了。</p><p>现在，我们需要去修改交易输入与输出，让他们开始使用真实的地址：</p><h4 id="交易输入"><a href="#交易输入" class="headerlink" title="交易输入"></a>交易输入</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交易输入</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017/03/04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TXInput</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交易Id的hash值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] txId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交易输出索引</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> txOutputIndex;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 签名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] signature;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 公钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] pubKey;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查公钥hash是否用于交易输入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pubKeyHash</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">usesKey</span><span class="params">(<span class="keyword">byte</span>[] pubKeyHash)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] lockingHash = BtcAddressUtils.ripeMD160Hash(<span class="keyword">this</span>.getPubKey());</span><br><span class="line">        <span class="keyword">return</span> Arrays.equals(lockingHash, pubKeyHash);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="交易输出"><a href="#交易输出" class="headerlink" title="交易输出"></a>交易输出</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交易输出</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017/03/04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TXOutput</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> value;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 公钥Hash</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] pubKeyHash;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建交易输出</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> address</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TXOutput <span class="title">newTXOutput</span><span class="params">(<span class="keyword">int</span> value, String address)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 反向转化为 byte 数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] versionedPayload = Base58Check.base58ToBytes(address);</span><br><span class="line">        <span class="keyword">byte</span>[] pubKeyHash = Arrays.copyOfRange(versionedPayload, <span class="number">1</span>, versionedPayload.length);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TXOutput(value, pubKeyHash);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查交易输出是否能够使用指定的公钥</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pubKeyHash</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLockedWithKey</span><span class="params">(<span class="keyword">byte</span>[] pubKeyHash)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.equals(<span class="keyword">this</span>.getPubKeyHash(), pubKeyHash);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>代码中还有很多其他的地方需要变动，这里不一一指出，详见文末的源码连接。</p></blockquote><p>注意，由于我们不会去实现脚本语言特性，所以我们不再使用 <strong>scriptPubKey</strong> 和 <strong>scriptSig</strong> 字段。取而代之的是，我们将 <strong>scriptSig</strong> 拆分为了 <strong>signature</strong> 和 <strong>pubKey</strong> 字段，<strong>scriptPubKey</strong> 重命名为了 <strong>pubKeyHash</strong> 。我们将会实现类似于比特币中的交易输出锁定/解锁逻辑和交易输入的签名逻辑，但是我们会在方法中执行此操作。</p><p><strong>usesKey</strong> 用于检查交易输入中的公钥是否能够解锁交易输出。需要注意的是，交易输入中存储的是未经hash过的公钥，但是方法实现中对它做了一步 <code>ripeMD160Hash</code> 转化。</p><p><strong>isLockedWithKey</strong> 用于检查提供的公钥Hash是否能够用于解锁交易输出，这个方法是 <strong>usesKey</strong> 的补充。<strong>usesKey</strong> 被用于 <strong>getAllSpentTXOs</strong> 方法中，<strong>isLockedWithKey</strong> 被用于 <strong>findUnspentTransactions</strong> 方法中，这样使得在前后两笔交易之间建立起了连接。</p><p><strong>newTXOutput</strong> 方法中，将 value 锁定到了 address 上。当我们向别人发送比特币时，我们只知道他们的地址，因此函数将地址作为唯一的参数。然后解码地址，并从中提取公钥哈希并保存在PubKeyHash字段中。</p><p>现在，让我们一起来检查一下是否能够正常运行：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">$ ./blochchain.sh  createwallet</span><br><span class="line">wallet address : <span class="number">13</span>dJAkeMyjjXvWCmhsXpDqnszHvhFSLVdh</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  createwallet</span><br><span class="line">wallet address : <span class="number">1</span>BCY5gCXUMiFYc5ieBMfEUaZn3GYkvVZ2e</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  createwallet</span><br><span class="line">wallet address : <span class="number">19</span>aomsC58CQ1tPzNLx7kV9yjk1pqZtSzL1</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  createblockchain -address <span class="number">13</span>dJAkeMyjjXvWCmhsXpDqnszHvhFSLVdh</span><br><span class="line"></span><br><span class="line">Elapsed Time: <span class="number">6.77</span> seconds </span><br><span class="line">correct hash Hex: <span class="number">00000</span>e44be0c94c39a4fef24c67d85c428e8bfbd227e292d75c0f4d398e2e81c </span><br><span class="line"></span><br><span class="line">Done ! </span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  getbalance -address <span class="number">13</span>dJAkeMyjjXvWCmhsXpDqnszHvhFSLVdh</span><br><span class="line">Balance of <span class="string">'13dJAkeMyjjXvWCmhsXpDqnszHvhFSLVdh'</span>: <span class="number">10</span></span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  send -from <span class="number">1</span>BCY5gCXUMiFYc5ieBMfEUaZn3GYkvVZ2e -to  <span class="number">13</span>dJAkeMyjjXvWCmhsXpDqnszHvhFSLVd -amount <span class="number">5</span></span><br><span class="line">java.lang.Exception: ERROR: Not enough funds</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  send -from <span class="number">13</span>dJAkeMyjjXvWCmhsXpDqnszHvhFSLVdh -to <span class="number">1</span>BCY5gCXUMiFYc5ieBMfEUaZn3GYkvVZ2e-amount <span class="number">5</span></span><br><span class="line">Elapsed Time: <span class="number">4.477</span> seconds </span><br><span class="line">correct hash Hex: <span class="number">00000</span>da41dfacc8032a553ed5b1aa5e24318d5d89ca14a16c4f70129609c8365 </span><br><span class="line"></span><br><span class="line">Success!</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  getbalance -address <span class="number">13</span>dJAkeMyjjXvWCmhsXpDqnszHvhFSLVdh</span><br><span class="line">Balance of <span class="string">'13dJAkeMyjjXvWCmhsXpDqnszHvhFSLVdh'</span>: <span class="number">5</span></span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  getbalance -address <span class="number">1</span>BCY5gCXUMiFYc5ieBMfEUaZn3GYkvVZ2e</span><br><span class="line">Balance of <span class="string">'1BCY5gCXUMiFYc5ieBMfEUaZn3GYkvVZ2e'</span>: <span class="number">5</span></span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  getbalance -address <span class="number">19</span>aomsC58CQ1tPzNLx7kV9yjk1pqZtSzL1</span><br><span class="line">Balance of <span class="string">'19aomsC58CQ1tPzNLx7kV9yjk1pqZtSzL1'</span>: <span class="number">0</span></span><br></pre></td></tr></table></figure><p>Nice! 现在让我们一起来实现交易签名部分的内容。</p><h2 id="签名实现"><a href="#签名实现" class="headerlink" title="签名实现"></a>签名实现</h2><p>交易数据必须被签名，因为这是比特币中能够保证不能花费属于他人比特币的唯一方法。如果一个签名是无效的，那么这笔交易也是无效的，这样的话，这笔交易就不能被添加到区块链中去。</p><p>我们已经有了实现交易签名的所有片段，还有一个事情除外：用于签名的数据。交易数据中哪一部分是真正用于签名的呢？难道是全部数据？选择用于签名的数据相当的重要。用于签名的数据必须包含以独特且唯一的方式标识数据的信息。例如，仅对交易输出签名是没有意义的，因为此签名不会考虑发送发与接收方。</p><p>考虑到交易数据要解锁前面的交易输出，重新分配交易输出中的 <em>value</em> 值，并且锁定新的交易输出，因此下面这些数据是必须被签名的：</p><ol><li>存储在解锁了的交易输出中的公钥Hash。它标识了交易的发送方。</li><li>存储在新的、锁定的交易输出中的公钥Hash。它标识了交易的接收方。</li><li>新的交易输出中包含的 <em>value</em> 值。</li></ol><blockquote><p>在比特币中，锁定/解锁逻辑存储在脚本中，解锁脚本存储在交易输入的 <em>ScriptSig</em> 字段中，而锁定脚本存储在交易输出的 <em>ScriptPubKey</em> 的字段中。 由于比特币允许不同类型的脚本，因此它会对ScriptPubKey的全部内容进行签名。</p></blockquote><p>如你所见，我们不需要去对存储在交易输入中的公钥进行签名。正因为如此，在比特币中，所签名的并不是一个交易，而是一个去除部分内容的交易输入副本，交易输入里面存储了被引用交易输出的 <code>ScriptPubKey</code> 。</p><blockquote><p>获取修剪后的交易副本的详细过程在<a href="https://en.bitcoin.it/wiki/File:Bitcoin_OpCheckSig_InDetail.png" target="_blank" rel="noopener">这里</a>. 虽然它可能已经过时了，但是我并没有找到另一个更可靠的来源。</p></blockquote><p>OK，它看起来有点复杂，因此让我们来开始coding吧。我们将从 <strong>Sign</strong> 方法开始：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Transaction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 签名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> privateKey 私钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> prevTxMap  前面多笔交易集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sign</span><span class="params">(BCECPrivateKey privateKey, Map&lt;String, Transaction&gt; prevTxMap)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// coinbase 交易信息不需要签名，因为它不存在交易输入信息</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isCoinbase()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 再次验证一下交易信息中的交易输入是否正确，也就是能否查找对应的交易数据</span></span><br><span class="line">        <span class="keyword">for</span> (TXInput txInput : <span class="keyword">this</span>.getInputs()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (prevTxMap.get(Hex.encodeHexString(txInput.getTxId())) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"ERROR: Previous transaction is not correct"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建用于签名的交易信息的副本</span></span><br><span class="line">        Transaction txCopy = <span class="keyword">this</span>.trimmedCopy();</span><br><span class="line">      </span><br><span class="line">        Security.addProvider(<span class="keyword">new</span> BouncyCastleProvider());</span><br><span class="line">        Signature ecdsaSign = Signature.getInstance(<span class="string">"SHA256withECDSA"</span>, BouncyCastleProvider.PROVIDER_NAME);</span><br><span class="line">        ecdsaSign.initSign(privateKey);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; txCopy.getInputs().length; i++) &#123;</span><br><span class="line">            TXInput txInputCopy = txCopy.getInputs()[i];</span><br><span class="line">            <span class="comment">// 获取交易输入TxID对应的交易数据</span></span><br><span class="line">            Transaction prevTx = prevTxMap.get(Hex.encodeHexString(txInputCopy.getTxId()));</span><br><span class="line">            <span class="comment">// 获取交易输入所对应的上一笔交易中的交易输出</span></span><br><span class="line">            TXOutput prevTxOutput = prevTx.getOutputs()[txInputCopy.getTxOutputIndex()];</span><br><span class="line">            txInputCopy.setPubKey(prevTxOutput.getPubKeyHash());</span><br><span class="line">            txInputCopy.setSignature(<span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">// 得到要签名的数据，即交易ID</span></span><br><span class="line">            txCopy.setTxId(txCopy.hash());</span><br><span class="line">            txInputCopy.setPubKey(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 对整个交易信息仅进行签名，即对交易ID进行签名</span></span><br><span class="line">            ecdsaSign.update(txCopy.getTxId());</span><br><span class="line">            <span class="keyword">byte</span>[] signature = ecdsaSign.sign();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将整个交易数据的签名赋值给交易输入，因为交易输入需要包含整个交易信息的签名</span></span><br><span class="line">            <span class="comment">// 注意是将得到的签名赋值给原交易信息中的交易输入</span></span><br><span class="line">            <span class="keyword">this</span>.getInputs()[i].setSignature(signature);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法需要私钥和前面多笔交易集合作为参数。正如前面所提到的那样，为了能够对交易信息进行签名，我们需要能够访问到被交易数据中的交易输入所引用的交易输出，因此我们需要得到存储这些交易输出的交易信息。</p><p>让我们来一步一步review这个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.isCoinbase()) &#123;</span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于 coinbase 交易信息不存在交易输入信息，因此它不需要签名，直接return.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Transaction txCopy = <span class="keyword">this</span>.trimmedCopy();</span><br></pre></td></tr></table></figure><p>创建交易的副本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Transaction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   ...   </span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建用于签名的交易数据副本</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Transaction <span class="title">trimmedCopy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TXInput[] tmpTXInputs = <span class="keyword">new</span> TXInput[<span class="keyword">this</span>.getInputs().length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.getInputs().length; i++) &#123;</span><br><span class="line">            TXInput txInput = <span class="keyword">this</span>.getInputs()[i];</span><br><span class="line">            tmpTXInputs[i] = <span class="keyword">new</span> TXInput(txInput.getTxId(), txInput.getTxOutputIndex(), <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TXOutput[] tmpTXOutputs = <span class="keyword">new</span> TXOutput[<span class="keyword">this</span>.getOutputs().length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.getOutputs().length; i++) &#123;</span><br><span class="line">            TXOutput txOutput = <span class="keyword">this</span>.getOutputs()[i];</span><br><span class="line">            tmpTXOutputs[i] = <span class="keyword">new</span> TXOutput(txOutput.getValue(), txOutput.getPubKeyHash());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Transaction(<span class="keyword">this</span>.getTxId(), tmpTXInputs, tmpTXOutputs);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个交易数据的副本包含了交易输入与交易输出，但是交易输入的 <em>Signature</em> 与 <em>PubKey</em> 需要设置为null。</p><p>使用私钥初始化 <code>SHA256withECDSA</code> 签名算法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Security.addProvider(<span class="keyword">new</span> BouncyCastleProvider());</span><br><span class="line">Signature ecdsaSign = Signature.getInstance(<span class="string">"SHA256withECDSA"</span>,BouncyCastleProvider.PROVIDER_NAME);</span><br><span class="line">ecdsaSign.initSign(privateKey);</span><br></pre></td></tr></table></figure><p>接下来，我们迭代交易副本中的交易输入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (TXInput txInput : txCopy.getInputs()) &#123;</span><br><span class="line">      <span class="comment">// 获取交易输入TxID对应的交易数据</span></span><br><span class="line">      Transaction prevTx = prevTxMap.get(Hex.encodeHexString(txInputCopy.getTxId()));</span><br><span class="line">      <span class="comment">// 获取交易输入所对应的上一笔交易中的交易输出</span></span><br><span class="line">      TXOutput prevTxOutput = prevTx.getOutputs()[txInputCopy.getTxOutputIndex()];</span><br><span class="line">      txInputCopy.setPubKey(prevTxOutput.getPubKeyHash());</span><br><span class="line">      txInputCopy.setSignature(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p>在每一个 txInput中，<strong><em>signature</em></strong> 都需要设置为<code>null</code>（仅仅是为了二次确认检查），并且 <strong>pubKey</strong> 设置为它所引用的交易输出的 <strong><em>pubKeyHash</em></strong> 字段。在此刻，除了当前的正在循环的交易输入(txInput)外，其他所有的交易输入都是”空的”，也就是说他们的 <code>Signature</code> 和 <code>PubKey</code> 字段被设置为 <code>null</code>。因此，<strong>交易输入是被分开签名的</strong>，尽管这对于我们的应用并不十分紧要，但是比特币允许交易包含引用了不同地址的输入。</p><p><code>Hash</code> 方法对交易进行序列化，并使用 SHA-256 算法进行哈希。哈希后的结果就是我们要签名的数据。在获取完哈希，我们应该重置 <code>PubKey</code> 字段，以便于它不会影响后面的迭代。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 得到要签名的数据，即交易ID</span></span><br><span class="line">txCopy.setTxId(txCopy.hash());</span><br><span class="line">txInput.setPubKey(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p>现在，最关键的部分来了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对整个交易信息仅进行签名，即对交易ID进行签名</span></span><br><span class="line">Security.addProvider(<span class="keyword">new</span> BouncyCastleProvider());</span><br><span class="line">Signature ecdsaSign = Signature.getInstance(<span class="string">"SHA256withECDSA"</span>,BouncyCastleProvider.PROVIDER_NAME);</span><br><span class="line">ecdsaSign.initSign(privateKey);</span><br><span class="line">ecdsaSign.update(txCopy.getTxId());</span><br><span class="line"><span class="keyword">byte</span>[] signature = ecdsaSign.sign();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将整个交易数据的签名赋值给交易输入，因为交易输入需要包含整个交易信息的签名</span></span><br><span class="line"><span class="comment">// 注意是将得到的签名赋值给原交易信息中的交易输入</span></span><br><span class="line"><span class="keyword">this</span>.getInputs()[i].setSignature(signature);</span><br></pre></td></tr></table></figure><p>使用 <code>SHA256withECDSA</code> 签名算法加上私钥，来对交易ID进行签名，从而得到了交易输入所要设置的交易签名。</p><p>现在，让我们来实现交易的验证功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Transaction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证交易信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> prevTxMap 前面多笔交易集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">verify</span><span class="params">(Map&lt;String, Transaction&gt; prevTxMap)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// coinbase 交易信息不需要签名，也就无需验证</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isCoinbase()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 再次验证一下交易信息中的交易输入是否正确，也就是能否查找对应的交易数据</span></span><br><span class="line">        <span class="keyword">for</span> (TXInput txInput : <span class="keyword">this</span>.getInputs()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (prevTxMap.get(Hex.encodeHexString(txInput.getTxId())) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"ERROR: Previous transaction is not correct"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建用于签名验证的交易信息的副本</span></span><br><span class="line">        Transaction txCopy = <span class="keyword">this</span>.trimmedCopy();</span><br><span class="line">        </span><br><span class="line">        Security.addProvider(<span class="keyword">new</span> BouncyCastleProvider());</span><br><span class="line">        ECParameterSpec ecParameters = ECNamedCurveTable.getParameterSpec(<span class="string">"secp256k1"</span>);</span><br><span class="line">        KeyFactory keyFactory = KeyFactory.getInstance(<span class="string">"ECDSA"</span>, BouncyCastleProvider.PROVIDER_NAME);</span><br><span class="line">        Signature ecdsaVerify = Signature.getInstance(<span class="string">"SHA256withECDSA"</span>, BouncyCastleProvider.PROVIDER_NAME);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.getInputs().length; i++) &#123;</span><br><span class="line">            TXInput txInput = <span class="keyword">this</span>.getInputs()[i];</span><br><span class="line">            <span class="comment">// 获取交易输入TxID对应的交易数据</span></span><br><span class="line">            Transaction prevTx = prevTxMap.get(Hex.encodeHexString(txInput.getTxId()));</span><br><span class="line">            <span class="comment">// 获取交易输入所对应的上一笔交易中的交易输出</span></span><br><span class="line">            TXOutput prevTxOutput = prevTx.getOutputs()[txInput.getTxOutputIndex()];</span><br><span class="line"></span><br><span class="line">            TXInput txInputCopy = txCopy.getInputs()[i];</span><br><span class="line">            txInputCopy.setSignature(<span class="keyword">null</span>);</span><br><span class="line">            txInputCopy.setPubKey(prevTxOutput.getPubKeyHash());</span><br><span class="line">            <span class="comment">// 得到要签名的数据，即交易ID</span></span><br><span class="line">            txCopy.setTxId(txCopy.hash());</span><br><span class="line">            txInputCopy.setPubKey(<span class="keyword">null</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 使用椭圆曲线 x,y 点去生成公钥Key</span></span><br><span class="line">            BigInteger x = <span class="keyword">new</span> BigInteger(<span class="number">1</span>, Arrays.copyOfRange(txInput.getPubKey(), <span class="number">1</span>, <span class="number">33</span>));</span><br><span class="line">            BigInteger y = <span class="keyword">new</span> BigInteger(<span class="number">1</span>, Arrays.copyOfRange(txInput.getPubKey(), <span class="number">33</span>, <span class="number">65</span>));</span><br><span class="line">            ECPoint ecPoint = ecParameters.getCurve().createPoint(x, y);</span><br><span class="line"></span><br><span class="line">            ECPublicKeySpec keySpec = <span class="keyword">new</span> ECPublicKeySpec(ecPoint, ecParameters);</span><br><span class="line">            PublicKey publicKey = keyFactory.generatePublic(keySpec);</span><br><span class="line">            ecdsaVerify.initVerify(publicKey);</span><br><span class="line">            ecdsaVerify.update(txCopy.getTxId());</span><br><span class="line">            <span class="keyword">if</span> (!ecdsaVerify.verify(txInput.getSignature())) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首选，同前面签名一样，我们先获取交易的拷贝数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Transaction txCopy = <span class="keyword">this</span>.trimmedCopy();</span><br></pre></td></tr></table></figure><p>获取椭圆曲线参数和签名类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Security.addProvider(<span class="keyword">new</span> BouncyCastleProvider());</span><br><span class="line">ECParameterSpec ecParameters = ECNamedCurveTable.getParameterSpec(<span class="string">"secp256k1"</span>);</span><br><span class="line">KeyFactory keyFactory = KeyFactory.getInstance(<span class="string">"ECDSA"</span>, BouncyCastleProvider.PROVIDER_NAME);</span><br><span class="line">Signature ecdsaVerify = Signature.getInstance(<span class="string">"SHA256withECDSA"</span>, BouncyCastleProvider.PROVIDER_NAME);</span><br></pre></td></tr></table></figure><p>接下来，我们来检查每一个交易输入的签名是否正确：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.getInputs().length; i++) &#123;</span><br><span class="line">    TXInput txInput = <span class="keyword">this</span>.getInputs()[i];</span><br><span class="line">    <span class="comment">// 获取交易输入TxID对应的交易数据</span></span><br><span class="line">    Transaction prevTx = prevTxMap.get(Hex.encodeHexString(txInput.getTxId()));</span><br><span class="line">    <span class="comment">// 获取交易输入所对应的上一笔交易中的交易输出</span></span><br><span class="line">    TXOutput prevTxOutput = prevTx.getOutputs()[txInput.getTxOutputIndex()];</span><br><span class="line"></span><br><span class="line">    TXInput txInputCopy = txCopy.getInputs()[i];</span><br><span class="line">    txInputCopy.setSignature(<span class="keyword">null</span>);</span><br><span class="line">    txInputCopy.setPubKey(prevTxOutput.getPubKeyHash());</span><br><span class="line">    <span class="comment">// 得到要签名的数据，即交易ID</span></span><br><span class="line">    txCopy.setTxId(txCopy.hash());</span><br><span class="line">    txInputCopy.setPubKey(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这部分与Sign方法中的相同，因为在验证过程中我们需要签署相同的数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用椭圆曲线 x,y 点去生成公钥Key</span></span><br><span class="line">BigInteger x = <span class="keyword">new</span> BigInteger(<span class="number">1</span>, Arrays.copyOfRange(txInput.getPubKey(), <span class="number">1</span>, <span class="number">33</span>));</span><br><span class="line">BigInteger y = <span class="keyword">new</span> BigInteger(<span class="number">1</span>, Arrays.copyOfRange(txInput.getPubKey(), <span class="number">33</span>, <span class="number">65</span>));</span><br><span class="line">ECPoint ecPoint = ecParameters.getCurve().createPoint(x, y);</span><br><span class="line"></span><br><span class="line">ECPublicKeySpec keySpec = <span class="keyword">new</span> ECPublicKeySpec(ecPoint, ecParameters);</span><br><span class="line">PublicKey publicKey = keyFactory.generatePublic(keySpec);</span><br><span class="line">ecdsaVerify.initVerify(publicKey);</span><br><span class="line">ecdsaVerify.update(txCopy.getTxId());</span><br><span class="line"><span class="keyword">if</span> (!ecdsaVerify.verify(txInput.getSignature())) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于交易输入中存储的 <code>pubkey</code> ，实际上是椭圆曲线上的一对 x,y 坐标，所以我们可以从 pubKey 得到公钥<code>PublicKey</code>，然后在用公钥去签名进行验证。如果验证成功，则返回true，否则，返回false。</p><p>现在，我们需要一个方法来获取以前的交易。 由于这需要与区块链互动，我们将使其成为 <strong>blockchain</strong> 的一种方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blockchain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 依据交易ID查询交易信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> txId 交易ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Transaction <span class="title">findTransaction</span><span class="params">(<span class="keyword">byte</span>[] txId)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (BlockchainIterator iterator = <span class="keyword">this</span>.getBlockchainIterator(); iterator.hashNext(); ) &#123;</span><br><span class="line">            Block block = iterator.next();</span><br><span class="line">            <span class="keyword">for</span> (Transaction tx : block.getTransactions()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (Arrays.equals(tx.getTxId(), txId)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> tx;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"ERROR: Can not found tx by txId ! "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 进行交易签名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tx         交易数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> privateKey 私钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">signTransaction</span><span class="params">(Transaction tx, BCECPrivateKey privateKey)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 先来找到这笔新的交易中，交易输入所引用的前面的多笔交易的数据</span></span><br><span class="line">        Map&lt;String, Transaction&gt; prevTxMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (TXInput txInput : tx.getInputs()) &#123;</span><br><span class="line">            Transaction prevTx = <span class="keyword">this</span>.findTransaction(txInput.getTxId());</span><br><span class="line">            prevTxMap.put(Hex.encodeHexString(txInput.getTxId()), prevTx);</span><br><span class="line">        &#125;</span><br><span class="line">        tx.sign(privateKey, prevTxMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交易签名验证</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tx</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">verifyTransactions</span><span class="params">(Transaction tx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Map&lt;String, Transaction&gt; prevTx = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (TXInput txInput : tx.getInputs()) &#123;</span><br><span class="line">            Transaction transaction = <span class="keyword">this</span>.findTransaction(txInput.getTxId());</span><br><span class="line">            prevTx.put(Hex.encodeHexString(txInput.getTxId()), transaction);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tx.verify(prevTx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，我们需要对我们的交易进行真正的签名和验证了，交易的签名发生在 <strong>newUTXOTransaction</strong> 中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Transaction <span class="title">newUTXOTransaction</span><span class="params">(String from, String to, <span class="keyword">int</span> amount, Blockchain blockchain)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    Transaction newTx = <span class="keyword">new</span> Transaction(<span class="keyword">null</span>, txInputs, txOutput);</span><br><span class="line">    newTx.setTxId(newTx.hash());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进行交易签名</span></span><br><span class="line">    blockchain.signTransaction(newTx, senderWallet.getPrivateKey());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> newTx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>交易的验证发生在一笔交易被放入区块之前：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mineBlock</span><span class="params">(Transaction[] transactions)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 挖矿前，先验证交易记录</span></span><br><span class="line">    <span class="keyword">for</span> (Transaction tx : transactions) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.verifyTransactions(tx)) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"ERROR: Fail to mine block ! Invalid transaction ! "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OK，让我们再一次对整个工程的代码做一个测试，测试结果：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">$ ./blochchain.sh  createwallet</span><br><span class="line">wallet address : <span class="number">1</span>GTh9Yjh4eH2a69FMX2kvSpnkJAgLdXFD6</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  createwallet</span><br><span class="line">wallet address : <span class="number">1</span>NnmFCuNnhPZHfXu38wZi8uEb446pDhaGB</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  createwallet</span><br><span class="line">wallet address : <span class="number">13</span>K6rfHPifjdH4HXN2okpo4uxNRfVCx13f</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  createblockchain -address <span class="number">1</span>GTh9Yjh4eH2a69FMX2kvSpnkJAgLdXFD6</span><br><span class="line"></span><br><span class="line">Elapsed Time: <span class="number">164.961</span> seconds </span><br><span class="line">correct hash Hex: <span class="number">00000524231</span>ae1832c49957848d2d1871cc35ff4d113c23be1937c6dff5cdf2a </span><br><span class="line"></span><br><span class="line">Done ! </span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  getbalance -address <span class="number">1</span>GTh9Yjh4eH2a69FMX2kvSpnkJAgLdXFD6</span><br><span class="line">Balance of <span class="string">'1GTh9Yjh4eH2a69FMX2kvSpnkJAgLdXFD6'</span>: <span class="number">10</span></span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  send -from <span class="number">1</span>NnmFCuNnhPZHfXu38wZi8uEb446pDhaGB -to  <span class="number">13</span>K6rfHPifjdH4HXN2okpo4uxNRfVCx13f -amount <span class="number">5</span></span><br><span class="line">java.lang.Exception: ERROR: Not enough funds</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  send -from <span class="number">1</span>GTh9Yjh4eH2a69FMX2kvSpnkJAgLdXFD6 -to <span class="number">1</span>NnmFCuNnhPZHfXu38wZi8uEb446pDhaGB -amount <span class="number">5</span></span><br><span class="line">Elapsed Time: <span class="number">54.92</span> seconds </span><br><span class="line">correct hash Hex: <span class="number">00000354</span>f86cde369d4c39d2b3016ac9a74956425f1348b4c26b2cddb98c100b </span><br><span class="line"></span><br><span class="line">Success!</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  getbalance -address <span class="number">1</span>GTh9Yjh4eH2a69FMX2kvSpnkJAgLdXFD6</span><br><span class="line">Balance of <span class="string">'1GTh9Yjh4eH2a69FMX2kvSpnkJAgLdXFD6'</span>: <span class="number">5</span></span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  getbalance -address <span class="number">1</span>NnmFCuNnhPZHfXu38wZi8uEb446pDhaGB</span><br><span class="line">Balance of <span class="string">'1NnmFCuNnhPZHfXu38wZi8uEb446pDhaGB'</span>: <span class="number">5</span></span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh  getbalance -address <span class="number">13</span>K6rfHPifjdH4HXN2okpo4uxNRfVCx13f</span><br><span class="line">Balance of <span class="string">'13K6rfHPifjdH4HXN2okpo4uxNRfVCx13f'</span>: <span class="number">0</span></span><br></pre></td></tr></table></figure><p>Good！没有任何错误！</p><p>让我们注释掉 <code>NewUTXOTransaction</code> 方法中的一行代码，确保未被签名的交易不能被添加到区块中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    </span><br><span class="line"><span class="comment">// blockchain.signTransaction(newTx, senderWallet.getPrivateKey());</span></span><br><span class="line">    </span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>测试结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Exception: Fail to verify transaction ! transaction invalid ! </span><br><span class="line">	at one.wangwei.blockchain.block.Blockchain.verifyTransactions(Blockchain.java:<span class="number">334</span>)</span><br><span class="line">	at one.wangwei.blockchain.block.Blockchain.mineBlock(Blockchain.java:<span class="number">76</span>)</span><br><span class="line">	at one.wangwei.blockchain.cli.CLI.send(CLI.java:<span class="number">202</span>)</span><br><span class="line">	at one.wangwei.blockchain.cli.CLI.parse(CLI.java:<span class="number">79</span>)</span><br><span class="line">	at one.wangwei.blockchain.BlockchainTest.main(BlockchainTest.java:<span class="number">23</span>)</span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><p><strong><em>WalletUtils</em></strong> 如若抛出异常：Illegal key size or default parameters，请按以下方法进行解决：</p><p><a href="https://stackoverflow.com/questions/6481627/java-security-illegal-key-size-or-default-parameters" target="_blank" rel="noopener">https://stackoverflow.com/questions/6481627/java-security-illegal-key-size-or-default-parameters</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这一节，我们学到了:</p><ol><li>使用椭圆曲线加密算法，如何去创建钱包；</li><li>了解到了如何去生成比特币地址；</li><li>如何去对交易信息进行签名并对签名进行验证；</li></ol><p>到目前为止，我们已经实现了比特币的许多关键特性！ 我们已经实现了除外网络外的几乎所有功能，并且在下一篇文章中，我们将继续完善交易这一环节机制。</p><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul><li><p>源代码：<a href="https://github.com/wangweiX/blockchain-java/tree/part5-wallet" target="_blank" rel="noopener">https://github.com/wangweiX/blockchain-java/tree/part5-wallet</a></p></li><li><p><a href="https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch04.asciidoc" target="_blank" rel="noopener">《精通比特币（第二版）》—— 第四章</a></p></li><li><p><a href="http://www.bouncycastle.org/wiki/display/JA1/Elliptic+Curve+Key+Pair+Generation+and+Key+Factories" target="_blank" rel="noopener">Elliptic Curve Key Pair Generation and Key Factories</a></p></li><li><p><a href="https://stackoverflow.com/questions/30116758/generating-publickey-from-x-and-y-values-of-elliptic-curve-point" target="_blank" rel="noopener">How to create public key objects with x and y coordinates?</a></p></li><li><p><a href="https://en.wikipedia.org/wiki/Public-key_cryptography" target="_blank" rel="noopener">Public-key cryptography</a></p></li><li><p><a href="https://en.wikipedia.org/wiki/Digital_signature" target="_blank" rel="noopener">Digital signatures</a></p></li><li><p><a href="https://en.wikipedia.org/wiki/Elliptic_curve" target="_blank" rel="noopener">Elliptic curve</a></p></li><li><p><a href="https://en.wikipedia.org/wiki/Elliptic_curve_cryptography" target="_blank" rel="noopener">Elliptic curve cryptography</a></p></li><li><p><a href="https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm" target="_blank" rel="noopener">ECDSA</a></p></li><li><p><a href="https://en.bitcoin.it/wiki/Technical_background_of_version_1_Bitcoin_addresses" target="_blank" rel="noopener">Technical background of Bitcoin addresses</a></p></li><li><p><a href="https://en.bitcoin.it/wiki/Address" target="_blank" rel="noopener">Address</a></p></li><li><p><a href="https://en.bitcoin.it/wiki/Base58Check_encoding" target="_blank" rel="noopener">Base58</a></p></li><li><p><a href="http://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/" target="_blank" rel="noopener">A gentle introduction to elliptic curve cryptography</a></p></li></ul><p><img src="https://img.i7years.com/blog/blockchain_exploer.png" alt=""></p><blockquote><p><a href="https://press.one/file/v?s=e314e0662f84fc732e37faa7abfa5615ce04675d70c3fad51d534ac60c7f38a41e5f468d43d209823e008299b24bde00ffcbd172896c1be5a1655c37f332e1a71&amp;h=cf27d733b01c15c2dff665f44233f12735f93bf3a4529166506fce3caff2872a&amp;a=23fe9bfd7ceef4b44c2ce44dcac8e4a49caf8026&amp;f=P1&amp;v=2" target="_blank" rel="noopener">https://press.one/file/v?s=e314e0662f84fc732e37faa7abfa5615ce04675d70c3fad51d534ac60c7f38a41e5f468d43d209823e008299b24bde00ffcbd172896c1be5a1655c37f332e1a71&amp;h=cf27d733b01c15c2dff665f44233f12735f93bf3a4529166506fce3caff2872a&amp;a=23fe9bfd7ceef4b44c2ce44dcac8e4a49caf8026&amp;f=P1&amp;v=2</a></p></blockquote>]]></content>
      
        <categories>
            
            <category> blockchain </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> bitcoin </tag>
            
            <tag> Elliptic Curve </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于Java语言构建区块链（四）—— 交易（UTXO）]]></title>
      <url>/posts/build-blockchain-in-java-transaction-utxo.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/ecommerce-2140604.jpg?imageslim" alt="bitcoin-blockchain-transactions"></p><blockquote><p>文章的主要思想和内容均来自 <a href="https://jeiwan.cc/posts/building-blockchain-in-go-part-4/" target="_blank" rel="noopener">https://jeiwan.cc/posts/building-blockchain-in-go-part-4/</a></p></blockquote><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p><a href="https://wangwei.one/posts/35c768a3.html">上一篇</a> 文章，我们实现了区块数据的持久化，本篇开始交易环节的实现。交易这一环节是整个比特币系统当中最为关键的一环，并且区块链唯一的目的就是通过安全的、可信的方式来存储交易信息，防止它们创建之后被人恶意篡改。今天我们开始实现交易这一环节，但由于这是一个很大的话题，所以我们分为两部分：第一部分我们将实现区块链交易的基本机制，到第二部分，我们再来研究它的细节。</p><a id="more"></a><h2 id="比特币交易"><a href="#比特币交易" class="headerlink" title="比特币交易"></a>比特币交易</h2><p>如果你开发过Web应用程序，为了实现支付系统，你可能会在数据库中创建一些数据库表：<code>账户</code> 和 <code>交易记录</code>。账户用于存储用户的个人信息以及账户余额等信息，交易记录用于存储资金从一个账户转移到另一个账户的记录。但是在比特币中，支付系统是以一种完全不一样的方式实现的，在这里：</p><ul><li>没有账户</li><li>没有余额</li><li>没有地址</li><li>没有 Coins（币）</li><li>没有发送者和接受者</li></ul><p>由于区块链是一个公开的数据库，我们不希望存储有关钱包所有者的敏感信息。<code>Coins</code> 不会汇总到钱包中。交易不会将资金从一个地址转移到另一个地址。没有可保存帐户余额的字段或属性。只有交易信息。那比特币的交易信息里面到底存储的是什么呢？</p><h3 id="交易组成"><a href="#交易组成" class="headerlink" title="交易组成"></a>交易组成</h3><p>一笔比特币的交易由 <code>交易输入</code> 和 <code>交易输出</code> 组成，数据结构如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交易</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017/03/04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Transaction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交易的Hash</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] txId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交易输入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> TXInput[] inputs;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交易输出</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> TXOutput[] outputs;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一笔交易的 <code>交易输入</code> 其实是指向上一笔交易的<code>交易输出</code> （这个后面详细说明）。我们钱包里面的 Coin（币）实际是存储在这些 <code>交易输出</code> 里面。下图表示了区块链交易系统里面各个交易相互引用的关系：</p><p><img src="https://img.i7years.com/blog/transactions-diagram.png" alt="transactions-diagram"></p><p>注意：</p><ol><li>有些 <code>交易输出</code> 并不是由 <code>交易输入</code> 产生，而是凭空产生的（后面会详细介绍）。</li><li>但，<code>交易输入</code> 必须指向某个 <code>交易输出</code>，它不能凭空产生。</li><li>在一笔交易里面，<code>交易输入</code> 可能会来自多笔交易所产生的 <code>交易输出</code>。</li></ol><p>在整篇文章中，我们将使用诸如“钱”，“币”，“花费”，“发送”，“账户”等词语。但比特币中没有这样的概念，在比特币交易中，交易信息是由 <code>锁定脚本</code> 锁定一个数值，并且只能被所有者的 <code>解锁脚本</code> 解锁。（解铃还须系铃人）</p><h2 id="交易输出"><a href="#交易输出" class="headerlink" title="交易输出"></a>交易输出</h2><p>让我们先从交易输出开始，他的数据结构如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交易输出</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017/03/04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TXOutput</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> value;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 锁定脚本</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String scriptPubKey;</span><br><span class="line">	</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上，它表示的是能够存储 “coins（币）”的交易输出（注意 <strong>value</strong> 字段）。并且这里所谓的 <strong>value</strong> 实际上是由存储在 <strong>ScriptPubKey</strong> （锁定脚本）中的一个puzzle（难题） 所锁定。在内部，比特币使用称为脚本的脚本语言，用于定义输出锁定和解锁逻辑。这个语言很原始（这是故意的，以避免可能的黑客和滥用），但我们不会详细讨论它。 你可以在这里找到它的详细解释。<a href="https://en.bitcoin.it/wiki/Script" target="_blank" rel="noopener">here</a></p><blockquote><p>在比特币中，<em>value</em> 字段存储着 <em>satoshis</em> 的任意倍的数值，而不是BTC的数量。<em>satoshis</em> 是比特币的百万分之一（0.00000001 BTC），因此这是比特币中最小的货币单位（如1美分）。</p><blockquote><p><em>satoshis</em>：聪</p></blockquote><p>锁定脚本是一个放在一个输出值上的“障碍”，同时它明确了今后花费这笔输出的条件。由于锁定脚本往往含有一个公钥（即比特币地址），在历史上它曾被称作一个脚本公钥代码。在大多数比特币应用源代码中，脚本公钥代码便是我们所说的锁定脚本。</p></blockquote><p>由于我们还没有实现钱包地址的逻辑，所以这里先暂且忽略锁定脚本相关的逻辑。<strong>ScriptPubKey</strong> 将会存储任意的字符串（用户定义的钱包地址）</p><blockquote><p>顺便说一句，拥有这样的脚本语言意味着比特币也可以用作智能合约平台。</p></blockquote><p>关于 <code>交易输出</code> 的一个重要的事情是它们是<strong>不可分割的</strong>，这意味着你不能将它所存储的数值拆开来使用。当这个交易输出在新的交易中被交易输入所引用时，它将作为一个整体被花费掉。 如果其值大于所需值，那么剩余的部分则会作为零钱返回给付款方。 这与真实世界的情况类似，例如，您支付5美元的钞票用于购买1美元的东西，那么你将会得到4美元的零钱。</p><h2 id="交易输入"><a href="#交易输入" class="headerlink" title="交易输入"></a>交易输入</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交易输入</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017/03/04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TXInput</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交易Id的hash值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] txId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交易输出索引</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> txOutputIndex;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解锁脚本</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String scriptSig;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前面提到过，一个交易输入指向的是某一笔交易的交易输出：</p><ul><li><strong>txId</strong> 存储的是某笔交易的ID值</li><li><strong>txOutputIndex</strong> 存储的是交易中这个交易输出的索引位置（因为一笔交易可能包含多个交易输出）</li><li><strong>scriptSig</strong> 主要是提供用于交易输出中 <strong>ScriptPubKey</strong> 所需的验证数据。<ul><li>如果这个数据被验证正确，那么相应的交易输出将被解锁，并且其中的 value 能够生成新的交易输出；</li><li>如果不正确，那么相应的交易输出将不能被交易输入所引用；</li></ul></li></ul><p>通过锁定脚本与解锁脚本这种机制，保证了某个用户不能花费属于他人的Coins。</p><p>同样，由于我们尚未实现钱包地址功能，<strong>ScriptSig</strong> 将会存储任意的用户所定义的钱包地址。我们将会在下一章节实现公钥和数字签名验证。</p><p>说了这么多，我们来总结一下。交易输出是”Coins”实际存储的地方。每一个交易输出都带有一个锁定脚本，它决定了解锁的逻辑。每一笔新的交易必须至少有一个交易输入与交易输出。一笔交易的交易输入指向前一笔交易的交易输出，并且提供用于锁定脚本解锁需要的数据（<code>ScriptSig</code> 字段），然后利用交易输出中的 <code>value</code> 去创建新的交易输出。</p><blockquote><p>注意，这段话的原文如下，但是里面有表述错误的地方，交易输出带有的是锁定脚本，而不是解锁脚本。</p><p>Let’s sum it up. Outputs are where “coins” are stored. Each output comes with an unlocking script, which determines the logic of unlocking the output. Every new transaction must have at least one input and output. An input references an output from a previous transaction and provides data (the <code>ScriptSig</code> field) that is used in the output’s unlocking script to unlock it and use its value to create new outputs.</p></blockquote><p>那到底是先有交易输入还是先有交易输出呢？</p><h2 id="鸡与蛋的问题"><a href="#鸡与蛋的问题" class="headerlink" title="鸡与蛋的问题"></a>鸡与蛋的问题</h2><p>在比特币中，鸡蛋先于鸡出现。交易输入源自于交易输出的逻辑是典型的”先有鸡还是先有蛋”的问题：交易输入产生交易输出，交易输出又会被交易输入所引用。在比特币中，<strong>交易输出先于交易输入出现</strong>。</p><p>当矿工开始开采区块时，区块中会被添加一个 <strong>coinbase</strong> 交易（创币交易）。coinbase 交易是一种特殊的交易，它不需要以前已经存在的交易输出。它会凭空创建出交易输出（i.e: Coins）。也即，鸡蛋的出现并不需要母鸡，这笔交易是作为矿工成功挖出新的区块后的一笔奖励。</p><p>正如你所知道的那样，在区块链的最前端，即第一个区块，有一个创世区块。他产生了区块链中有史以来的第一个交易输出，并且由于没有前一笔交易，也就没有相应的输出，因此不需要前一笔交易的交易输出。</p><p>让我们来创建 coinbase 交易：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建CoinBase交易</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> to   收账的钱包地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data 解锁脚本数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Transaction <span class="title">newCoinbaseTX</span><span class="params">(String to, String data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(data)) &#123;</span><br><span class="line">        data = String.format(<span class="string">"Reward to '%s'"</span>, to);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建交易输入</span></span><br><span class="line">    TXInput txInput = <span class="keyword">new</span> TXInput(<span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;&#125;, -<span class="number">1</span>, data);</span><br><span class="line">    <span class="comment">// 创建交易输出</span></span><br><span class="line">    TXOutput txOutput = <span class="keyword">new</span> TXOutput(SUBSIDY, to);</span><br><span class="line">    <span class="comment">// 创建交易</span></span><br><span class="line">    Transaction tx = <span class="keyword">new</span> Transaction(<span class="keyword">null</span>, <span class="keyword">new</span> TXInput[]&#123;txInput&#125;, <span class="keyword">new</span> TXOutput[]&#123;txOutput&#125;);</span><br><span class="line">    <span class="comment">// 设置交易ID</span></span><br><span class="line">    tx.setTxId();</span><br><span class="line">    <span class="keyword">return</span> tx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>coinbase交易只有一个交易输入。在我们的代码实现中，<strong>txId</strong> 是空数组，<strong>txOutputIndex</strong> 设置为了 -1。另外，coinbase交易不会在 <strong>ScriptSig</strong> 字段上存储解锁脚本，相反，存了一个任意的数据。</p><blockquote><p>在比特币中，第一个 coinbase 交易报刊了如下的信息：”The Times 03/Jan/2009 Chancellor on brink of second bailout for banks”. <a href="https://blockchain.info/tx/4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b?show_adv=true" target="_blank" rel="noopener">点击查看</a></p></blockquote><p><strong>SUBSIDY</strong> 是挖矿奖励数量。在比特币中，这个奖励数量没有存储在任何地方，而是依据现有区块的总数进行计算而得到：区块总数 除以 210000。开采创世区块得到的奖励为50BTC，每过 210000 个区块，奖励会减半。在我们的实现中，我们暂且将挖矿奖励设置为常数。（至少目前是这样）</p><h2 id="在区块链中存储交易信息"><a href="#在区块链中存储交易信息" class="headerlink" title="在区块链中存储交易信息"></a>在区块链中存储交易信息</h2><p>从现在开始，每一个区块必须存储至少一个交易信息，并且尽可能地避免在没有交易数据的情况下进行挖矿。这意味着我们必须移除 <strong>Block</strong> 对象中的 <strong>date</strong> 字段，取而代之的是 <strong>transactions</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 区块</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/02/02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Block</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 区块hash值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String hash;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前一个区块的hash值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String previousHash;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交易信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Transaction[] transactions;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 区块创建时间(单位:秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> timeStamp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相应地，<strong>newGenesisBlock</strong> 与 <strong>newBlock</strong> 也都需要做改变：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 创建创世区块 &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> coinbase</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Block <span class="title">newGenesisBlock</span><span class="params">(Transaction coinbase)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Block.newBlock(<span class="string">""</span>, <span class="keyword">new</span> Transaction[]&#123;coinbase&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 创建新区块 &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> previousHash</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> transactions</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Block <span class="title">newBlock</span><span class="params">(String previousHash, Transaction[] transactions)</span> </span>&#123;</span><br><span class="line">     Block block = <span class="keyword">new</span> Block(<span class="string">""</span>, previousHash, transactions, Instant.now().getEpochSecond(), <span class="number">0</span>);</span><br><span class="line">     ProofOfWork pow = ProofOfWork.newProofOfWork(block);</span><br><span class="line">     PowResult powResult = pow.run();</span><br><span class="line">     block.setHash(powResult.getHash());</span><br><span class="line">     block.setNonce(powResult.getNonce());</span><br><span class="line">     <span class="keyword">return</span> block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，修改 <strong>newBlockchain</strong> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * &lt;p&gt; 创建区块链 &lt;/p&gt;</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> address 钱包地址</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Blockchain <span class="title">newBlockchain</span><span class="params">(String address)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    String lastBlockHash = RocksDBUtils.getInstance().getLastBlockHash();</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(lastBlockHash)) &#123;</span><br><span class="line">        <span class="comment">// 创建 coinBase 交易</span></span><br><span class="line">        Transaction coinbaseTX = Transaction.newCoinbaseTX(address, <span class="string">""</span>);</span><br><span class="line">        Block genesisBlock = Block.newGenesisBlock(coinbaseTX);</span><br><span class="line">        lastBlockHash = genesisBlock.getHash();</span><br><span class="line">        RocksDBUtils.getInstance().putBlock(genesisBlock);</span><br><span class="line">        RocksDBUtils.getInstance().putLastBlockHash(lastBlockHash);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> Blockchain(lastBlockHash);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，代码有钱包地址的接口，将会收到开采创世区块的奖励。</p><h2 id="工作量证明（Pow）"><a href="#工作量证明（Pow）" class="headerlink" title="工作量证明（Pow）"></a>工作量证明（Pow）</h2><p>Pow算法必须将存储在区块中的交易信息考虑在内，以保存交易信息存储的一致性和可靠性。因此，我们必须修改 <strong>ProofOfWork.prepareData</strong> 接口代码逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 准备数据</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 注意：在准备区块数据时，一定要从原始数据类型转化为byte[]，不能直接从字符串进行转换</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nonce</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">prepareData</span><span class="params">(<span class="keyword">long</span> nonce)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">byte</span>[] prevBlockHashBytes = &#123;&#125;;</span><br><span class="line">   <span class="keyword">if</span> (StringUtils.isNoneBlank(<span class="keyword">this</span>.getBlock().getPrevBlockHash())) &#123;</span><br><span class="line">       prevBlockHashBytes = <span class="keyword">new</span> BigInteger(<span class="keyword">this</span>.getBlock().getPrevBlockHash(), <span class="number">16</span>).toByteArray();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> ByteUtils.merge(</span><br><span class="line">           prevBlockHashBytes,</span><br><span class="line">           <span class="keyword">this</span>.getBlock().hashTransaction(),</span><br><span class="line">           ByteUtils.toBytes(<span class="keyword">this</span>.getBlock().getTimeStamp()),</span><br><span class="line">           ByteUtils.toBytes(TARGET_BITS),</span><br><span class="line">           ByteUtils.toBytes(nonce)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <strong>hashTransaction</strong> 代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对区块中的交易信息进行Hash计算</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] hashTransaction() &#123;</span><br><span class="line">   <span class="keyword">byte</span>[][] txIdArrays = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="keyword">this</span>.getTransactions().length][];</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.getTransactions().length; i++) &#123;</span><br><span class="line">       txIdArrays[i] = <span class="keyword">this</span>.getTransactions()[i].getTxId();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> DigestUtils.sha256(ByteUtils.merge(txIds));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样，我们使用哈希值来作为数据的唯一标识。我们希望区块中的所有交易数据都能通过一个哈希值来定义它的唯一标识。为了达到这个目的，我们计算了每一个交易的唯一哈希值，然后将他们串联起来，再对这个串联后的组合进行哈希值计算。</p><blockquote><p>比特币使用更复杂的技术：它将所有包含在块中的交易表示为 <a href="https://en.bitcoin.it/wiki/Protocol_documentation#Merkle_Trees" target="_blank" rel="noopener">Merkle树</a> ，并在Proof-of-Work系统中使用该树的根散列。 这种方法只需要跟节点的散列值就可以快速检查块是否包含某笔交易，而无需下载所有交易。</p></blockquote><h2 id="UTXO（未花费交易输出）"><a href="#UTXO（未花费交易输出）" class="headerlink" title="UTXO（未花费交易输出）"></a>UTXO（未花费交易输出）</h2><blockquote><p>UTXO：unspend transaction output.（未被花费的交易输出）</p><p>在比特币的世界里既没有账户，也没有余额，只有分散到区块链里的UTXO.</p></blockquote><p><em>UTXO</em> 是理解比特币交易原理的关键所在，我们先来看一段场景：</p><p>场景：假设你过去分别向A、B、C这三个比特币用户购买了BTC，从A手中购买了3.5个BTC，从B手中购买了4.5个BTC，从C手中购买了2个BTC，现在你的比特币钱包里面恰好剩余10个BTC。</p><p>问题：这个10个BTC是真正的10个BTC吗？其实不是，这句话可能听起来有点怪。（什么！我钱包里面的BTC不是真正的BTC，你不要吓我……）</p><p>解释：前面提到过在比特币的交易系统当中，并不存在账户、余额这些概念，所以，你的钱包里面的10个BTC，并不是说钱包余额为10个BTC。而是说，这10个BTC其实是由你的比特币地址（钱包地址|公钥）锁定了的散落在各个区块和各个交易里面的UTXO的总和。</p><p>UTXO 是比特币交易的基本单位，每笔交易都会产生UTXO，一个UTXO可以是一“聪”的任意倍。给某人发送比特币实际上是创造新的UTXO，绑定到那个人的钱包地址，并且能被他用于新的支付。</p><p>一般的比特币交易由 <code>交易输入</code> 和 <code>交易输出</code> 两部分组成。A向你支付3.5个BTC这笔交易，实际上产生了一个新的UTXO，这个新的UTXO 等于 3.5个BTC（3.5亿聪），并且锁定到了你的比特币钱包地址上。</p><p>假如你要给你女（男）朋友转 1.5 BTC，那么你的钱包会从可用的UTXO中选取一个或多个可用的个体来拼凑出一个大于或等于一笔交易所需的比特币量。比如在这个假设场景里面，你的钱包会选取你和C的交易中的UTXO作为 交易输入，input = 2BTC，这里会生成两个新的交易输出，一个输出（UTXO = 1.5 BTC）会被绑定到你女（男）朋友的钱包地址上，另一个输出（UTXO = 0.5 BTC）会作为找零，重新绑定到你的钱包地址上。</p><blockquote><p>有关比特币交易这部分更详细的内容，请查看：<a href="https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch06.asciidoc#transactions" target="_blank" rel="noopener">《精通比特币（第二版）》第6章 —— 交易</a></p></blockquote><p>我们需要找到所有未花费的交易输出（UTXO）。<em>Unspent(未花费)</em> 意味着这些交易输出从未被交易输入所指向。这前面的图片中，UTXO如下：</p><ol><li>tx0, output 1;</li><li>tx1, output 0;</li><li>tx3, output 0;</li><li>tx4, output 0.</li></ol><p>当然，当我们检查余额时，我不需要区块链中所有的UTXO，我只需要能被我们解锁的UTXO（当前，我们还没有实现密钥对，而是替代为用户自定义的钱包地址）。首先，我们在交易输入与交易输出上定义锁定-解锁的方法：</p><p>交易输入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TXInput</span> </span>&#123;</span><br><span class="line">  	</span><br><span class="line">    ...</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断解锁数据是否能够解锁交易输出</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unlockingData</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canUnlockOutputWith</span><span class="params">(String unlockingData)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getScriptSig().endsWith(unlockingData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>交易输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TXOutput</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断解锁数据是否能够解锁交易输出</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unlockingData</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canBeUnlockedWith</span><span class="params">(String unlockingData)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getScriptPubKey().endsWith(unlockingData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们暂时用 <strong>unlockingData</strong> 来与脚本字段进行比较。我们会在后面的文章中来对这部分内容进行优化，我们将会基于私钥来实现用户的钱包地址。</p><p>下一步，查询所有与钱包地址绑定的包含UTXO的交易信息，有点复杂（本篇先这样实现，后面我们做一个与钱包地址映射的UTXO池来进行优化）：</p><ul><li>从与钱包地址对应的交易输入中查询出所有已被花费了的交易输出</li><li>再来排除，寻找包含未被花费的交易输出的交易</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blockchain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找钱包地址对应的所有未花费的交易</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> address 钱包地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Transaction[] findUnspentTransactions(String address) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Map&lt;String, <span class="keyword">int</span>[]&gt; allSpentTXOs = <span class="keyword">this</span>.getAllSpentTXOs(address);</span><br><span class="line">        Transaction[] unspentTxs = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 再次遍历所有区块中的交易输出</span></span><br><span class="line">        <span class="keyword">for</span> (BlockchainIterator blockchainIterator = <span class="keyword">this</span>.getBlockchainIterator(); blockchainIterator.hashNext(); ) &#123;</span><br><span class="line">            Block block = blockchainIterator.next();</span><br><span class="line">            <span class="keyword">for</span> (Transaction transaction : block.getTransactions()) &#123;</span><br><span class="line"></span><br><span class="line">                String txId = Hex.encodeHexString(transaction.getTxId());</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span>[] spentOutIndexArray = allSpentTXOs.get(txId);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> outIndex = <span class="number">0</span>; outIndex &lt; transaction.getOutputs().length; outIndex++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (spentOutIndexArray != <span class="keyword">null</span> &amp;&amp; ArrayUtils.contains(spentOutIndexArray, outIndex)) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 保存不存在 allSpentTXOs 中的交易</span></span><br><span class="line">                    <span class="keyword">if</span> (transaction.getOutputs()[outIndex].canBeUnlockedWith(address)) &#123;</span><br><span class="line">                        unspentTxs = ArrayUtils.add(unspentTxs, transaction);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> unspentTxs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从交易输入中查询区块链中所有已被花费了的交易输出</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> address 钱包地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 交易ID以及对应的交易输出下标地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, <span class="keyword">int</span>[]&gt; getAllSpentTXOs(String address) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 定义TxId ——&gt; spentOutIndex[]，存储交易ID与已被花费的交易输出数组索引值</span></span><br><span class="line">        Map&lt;String, <span class="keyword">int</span>[]&gt; spentTXOs = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (BlockchainIterator blockchainIterator = <span class="keyword">this</span>.getBlockchainIterator(); blockchainIterator.hashNext(); ) &#123;</span><br><span class="line">            Block block = blockchainIterator.next();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Transaction transaction : block.getTransactions()) &#123;</span><br><span class="line">                <span class="comment">// 如果是 coinbase 交易，直接跳过，因为它不存在引用前一个区块的交易输出</span></span><br><span class="line">                <span class="keyword">if</span> (transaction.isCoinbase()) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (TXInput txInput : transaction.getInputs()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (txInput.canUnlockOutputWith(address)) &#123;</span><br><span class="line">                        String inTxId = Hex.encodeHexString(txInput.getTxId());</span><br><span class="line">                        <span class="keyword">int</span>[] spentOutIndexArray = spentTXOs.get(inTxId);</span><br><span class="line">                        <span class="keyword">if</span> (spentOutIndexArray == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            spentTXOs.put(inTxId, <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;txInput.getTxOutputIndex()&#125;);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            spentOutIndexArray = ArrayUtils.add(spentOutIndexArray, txInput.getTxOutputIndex());</span><br><span class="line">                            spentTXOs.put(inTxId, spentOutIndexArray);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> spentTXOs;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到了所有包含UTXO的交易数据，接下来，我们就可以得到所有UTXO集合了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blockchain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找钱包地址对应的所有UTXO</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> address 钱包地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> TXOutput[] findUTXO(String address) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transaction[] unspentTxs = <span class="keyword">this</span>.findUnspentTransactions(address);</span><br><span class="line">        TXOutput[] utxos = &#123;&#125;;</span><br><span class="line">        <span class="keyword">if</span> (unspentTxs == <span class="keyword">null</span> || unspentTxs.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> utxos;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Transaction tx : unspentTxs) &#123;</span><br><span class="line">            <span class="keyword">for</span> (TXOutput txOutput : tx.getOutputs()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (txOutput.canBeUnlockedWith(address)) &#123;</span><br><span class="line">                    utxos = ArrayUtils.add(utxos, txOutput);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> utxos;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，我们可以实现获取钱包地址余额的接口了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CLI</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询钱包余额</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> address 钱包地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getBalance</span><span class="params">(String address)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Blockchain blockchain = Blockchain.createBlockchain(address);</span><br><span class="line">        TXOutput[] txOutputs = blockchain.findUTXO(address);</span><br><span class="line">        <span class="keyword">int</span> balance = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (txOutputs != <span class="keyword">null</span> &amp;&amp; txOutputs.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (TXOutput txOutput : txOutputs) &#123;</span><br><span class="line">                balance += txOutput.getValue();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">"Balance of '%s': %d\n"</span>, address, balance);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询 <em>wangwei</em> 这个钱包地址的余额：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ./blockchain.sh getbalance -address wangwei</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">Balance of <span class="string">'wangwei'</span>: <span class="number">10</span></span><br></pre></td></tr></table></figure><h2 id="转账"><a href="#转账" class="headerlink" title="转账"></a>转账</h2><p>现在，我们想要给某人发送一些币。因此，我们需要创建一笔新的交易，然后放入区块中，再进行挖矿。到目前为止，我们只是实现了 <em>coinbase</em> 交易，现在我们需要实现常见的创建交易接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Transaction</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   ...</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从 from 向  to 支付一定的 amount 的金额</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> from       支付钱包地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> to         收款钱包地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount     交易金额</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> blockchain 区块链</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Transaction <span class="title">newUTXOTransaction</span><span class="params">(String from, String to, <span class="keyword">int</span> amount, Blockchain blockchain)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SpendableOutputResult result = blockchain.findSpendableOutputs(from, amount);</span><br><span class="line">        <span class="keyword">int</span> accumulated = result.getAccumulated();</span><br><span class="line">        Map&lt;String, <span class="keyword">int</span>[]&gt; unspentOuts = result.getUnspentOuts();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (accumulated &lt; amount) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"ERROR: Not enough funds"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Iterator&lt;Map.Entry&lt;String, <span class="keyword">int</span>[]&gt;&gt; iterator = unspentOuts.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">        TXInput[] txInputs = &#123;&#125;;</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            Map.Entry&lt;String, <span class="keyword">int</span>[]&gt; entry = iterator.next();</span><br><span class="line">            String txIdStr = entry.getKey();</span><br><span class="line">            <span class="keyword">int</span>[] outIdxs = entry.getValue();</span><br><span class="line">            <span class="keyword">byte</span>[] txId = Hex.decodeHex(txIdStr);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> outIndex : outIdxs) &#123;</span><br><span class="line">                txInputs = ArrayUtils.add(txInputs, <span class="keyword">new</span> TXInput(txId, outIndex, from));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TXOutput[] txOutput = &#123;&#125;;</span><br><span class="line">        txOutput = ArrayUtils.add(txOutput, <span class="keyword">new</span> TXOutput(amount, to));</span><br><span class="line">        <span class="keyword">if</span> (accumulated &gt; amount) &#123;</span><br><span class="line">            txOutput = ArrayUtils.add(txOutput, <span class="keyword">new</span> TXOutput((accumulated - amount), from));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Transaction newTx = <span class="keyword">new</span> Transaction(<span class="keyword">null</span>, txInputs, txOutput);</span><br><span class="line">        newTx.setTxId();</span><br><span class="line">        <span class="keyword">return</span> newTx;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在创建新的交易输出之前，我们需要事先找到所有的UTXO，并确保有足够的金额。这就是 <strong>findSpendableOutputs</strong> 要干的事情。之后，为每个找到的输出创建一个引用它的输入。接下来，我们创建两个交易输出：</p><ol><li>一个 <em>output</em> 用于锁定到接收者的钱包地址上。这个是真正被转走的coins；</li><li>另一个 <em>output</em> 锁定到发送者的钱包地址上。这个就是 找零。只有当用于支付的UTXO总和大于要支付的金额时，才会创建这部分的 交易输出。记住：交易输出是<strong>不可分割的</strong></li></ol><p><strong>findSpendableOutputs</strong> 需要调用我们之前创建的 <strong>findUnspentTransactions</strong> 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blockchain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 寻找能够花费的交易</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> address 钱包地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount  花费金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SpendableOutputResult <span class="title">findSpendableOutputs</span><span class="params">(String address, <span class="keyword">int</span> amount)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transaction[] unspentTXs = <span class="keyword">this</span>.findUnspentTransactions(address);</span><br><span class="line">        <span class="keyword">int</span> accumulated = <span class="number">0</span>;</span><br><span class="line">        Map&lt;String, <span class="keyword">int</span>[]&gt; unspentOuts = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Transaction tx : unspentTXs) &#123;</span><br><span class="line"></span><br><span class="line">            String txId = Hex.encodeHexString(tx.getTxId());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> outId = <span class="number">0</span>; outId &lt; tx.getOutputs().length; outId++) &#123;</span><br><span class="line"></span><br><span class="line">                TXOutput txOutput = tx.getOutputs()[outId];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (txOutput.canBeUnlockedWith(address) &amp;&amp; accumulated &lt; amount) &#123;</span><br><span class="line">                    accumulated += txOutput.getValue();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">int</span>[] outIds = unspentOuts.get(txId);</span><br><span class="line">                    <span class="keyword">if</span> (outIds == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        outIds = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;outId&#125;;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        outIds = ArrayUtils.add(outIds, outId);</span><br><span class="line">                    &#125;</span><br><span class="line">                    unspentOuts.put(txId, outIds);</span><br><span class="line">                    <span class="keyword">if</span> (accumulated &gt;= amount) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SpendableOutputResult(accumulated, unspentOuts);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法会遍历所有的UTXO并统计他们的总额。当计算的总额恰好大于或者等于需要转账的金额时，方法会停止遍历，然后返回用于支付的总额以及按交易ID分组的交易输出索引值数组。我们不想要花更多的钱。</p><p>现在，我们可以修改 <strong>Block.mineBlock</strong> 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Block</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">   ...</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打包交易，进行挖矿</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transactions</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mineBlock</span><span class="params">(Transaction[] transactions)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String lastBlockHash = RocksDBUtils.getInstance().getLastBlockHash();</span><br><span class="line">        <span class="keyword">if</span> (lastBlockHash == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"ERROR: Fail to get last block hash ! "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Block block = Block.newBlock(lastBlockHash, transactions);</span><br><span class="line">        <span class="keyword">this</span>.addBlock(block);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，我们来实现转账的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CLI</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">   ...</span><br><span class="line">  </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转账</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> from</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> to</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String from, String to, <span class="keyword">int</span> amount)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Blockchain blockchain = Blockchain.createBlockchain(from);</span><br><span class="line">        Transaction transaction = Transaction.newUTXOTransaction(from, to, amount, blockchain);</span><br><span class="line">        blockchain.mineBlock(<span class="keyword">new</span> Transaction[]&#123;transaction&#125;);</span><br><span class="line">        RocksDBUtils.getInstance().closeDB();</span><br><span class="line">        System.out.println(<span class="string">"Success!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转账，意味着创建一笔新的交易并且通过挖矿的方式将其存入区块中。但是，比特币不会像我们这样做，它会把新的交易记录先存到内存池中，当一个矿工准备去开采一个区块时，它会把打包内存池中的所有交易信息，并且创建一个候选区块。只有当这个包含所有交易信息的候选区块被成功开采并且被添加到区块链上时，这些交易信息才算被确认。</p><p>让我们来测试一下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先确认 wangwei 的余额</span></span><br><span class="line">$ ./blockchain.sh getbalance -address wangwei</span><br><span class="line">Balance of <span class="string">'wangwei'</span>: <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 转账</span></span><br><span class="line">$ ./blockchain.sh send -from wangwei -to Pedro -amount <span class="number">6</span></span><br><span class="line">Elapsed Time: <span class="number">0.828</span> seconds </span><br><span class="line">correct hash Hex: <span class="number">00000</span>c5f50cf72db1f375a5d454f98bc49d07335db921cbef5fa9e58ad34d462 </span><br><span class="line"></span><br><span class="line">Success!</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询 wangwei 的余额</span></span><br><span class="line">$ ./blockchain.sh getbalance -address wangwei</span><br><span class="line">Balance of <span class="string">'wangwei'</span>: <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询 Pedro 的余额</span></span><br><span class="line">$ ./blockchain.sh getbalance -address Pedro</span><br><span class="line">Balance of <span class="string">'Pedro'</span>: <span class="number">6</span></span><br></pre></td></tr></table></figure><p>赞！现在让我们来创建更多的交易并且确保从多个交易输出进行转账是正常的：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ ./blockchain.sh send -from Pedro -to Helen -amount <span class="number">2</span></span><br><span class="line">Elapsed Time: <span class="number">2.533</span> seconds </span><br><span class="line">correct hash Hex: <span class="number">00000</span>c81d541ad407a3767ad633d1147602df86fe14e1962ec145ab17b633e88 </span><br><span class="line"></span><br><span class="line">Success!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ ./blockchain.sh send -from wangwei -to Helen -amount <span class="number">2</span></span><br><span class="line">Elapsed Time: <span class="number">1.481</span> seconds </span><br><span class="line">correct hash Hex: <span class="number">00000</span>c3f8b82c2b970438f5f1f39d56bb8a9d66341efc92a02ffcbff91acd84b </span><br><span class="line"></span><br><span class="line">Success!</span><br></pre></td></tr></table></figure><p>现在，Helen 这个钱包地址上有了两笔从 wangwei 和 Pedro 转账中产生的UTXO，让我们将它们再转账给另外一个人：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ ./blockchain.sh send -from Helen -to Rachel -amount <span class="number">3</span></span><br><span class="line">Elapsed Time: <span class="number">17.136</span> seconds </span><br><span class="line">correct hash Hex: <span class="number">000000</span>b1226a947166c2b01a15d1cd3558ddf86fe99bad28a0501a2af60f6a02 </span><br><span class="line"></span><br><span class="line">Success!</span><br><span class="line"></span><br><span class="line">$ ./blochchain.sh getbalance -address wangwei</span><br><span class="line">Balance of <span class="string">'wangwei'</span>: <span class="number">2</span></span><br><span class="line">$ ./blochchain.sh getbalance -address Pedro  </span><br><span class="line">Balance of <span class="string">'Pedro'</span>: <span class="number">4</span></span><br><span class="line">$ ./blochchain.sh getbalance -address Helen</span><br><span class="line">Balance of <span class="string">'Helen'</span>: <span class="number">1</span></span><br><span class="line">$ ./blochchain.sh getbalance -address Rachel</span><br><span class="line">Balance of <span class="string">'Rachel'</span>: <span class="number">3</span></span><br></pre></td></tr></table></figure><p>非常棒！让我们来测试一下失败的场景：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ./blochchain.sh send -from wangwei -to Ivan -amount <span class="number">5</span> </span><br><span class="line">java.lang.Exception: ERROR: Not enough funds</span><br><span class="line">        at one.wangwei.blockchain.transaction.Transaction.newUTXOTransaction(Transaction.java:<span class="number">104</span>)</span><br><span class="line">        at one.wangwei.blockchain.cli.CLI.send(CLI.java:<span class="number">138</span>)</span><br><span class="line">        at one.wangwei.blockchain.cli.CLI.parse(CLI.java:<span class="number">73</span>)</span><br><span class="line">        at one.wangwei.blockchain.cli.Main.main(Main.java:<span class="number">7</span>)</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本篇内容有点难度，但好歹我们现在有了交易信息了。尽管，缺少像比特币这一类加密货币的一些关键特性：</p><ol><li>钱包地址。我们还没有基于私钥的真实地址。</li><li>奖励。挖矿绝对没有利润。</li><li>UTXO池。当我们计算钱包地址的余额时，我们需要遍历所有的区块中的所有交易信息，当有许许多多的区块时，这将花费不少的时间。此外，如果我们想验证以后的交易，可能需要很长时间。 UTXO迟旨在解决这些问题并快速处理交易。</li><li>内存池。 这是交易在打包成区块之前存储的地方。 在我们当前的实现中，一个块只包含一笔交易，而且效率很低。</li></ol><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul><li>源代码：<a href="https://github.com/wangweiX/blockchain-java/tree/part4-transaction1" target="_blank" rel="noopener">https://github.com/wangweiX/blockchain-java/tree/part4-transaction1</a></li><li><a href="https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch06.asciidoc#transactions" target="_blank" rel="noopener">《精通比特币（第二版）》第6章 —— 交易</a></li></ul><p><img src="https://img.i7years.com/blog/blockchain_exploer.png" alt=""></p><blockquote><p><a href="https://press.one/file/v?s=ef3077c075f4ea9ffa0bd7a17d004d0af5fd1f67d8380989aba29b505c2343e7a5cf4e8a4ef75b82cb5ddea2428e5a8d9d0437c0a236ee49230005bb49104e8b1&amp;h=3e4f040f8eb07adfd8915dda4dbb1e2301860d195e5b9445a0256e56d01cebc7&amp;a=23fe9bfd7ceef4b44c2ce44dcac8e4a49caf8026&amp;f=P1&amp;v=2" target="_blank" rel="noopener">https://press.one/file/v?s=ef3077c075f4ea9ffa0bd7a17d004d0af5fd1f67d8380989aba29b505c2343e7a5cf4e8a4ef75b82cb5ddea2428e5a8d9d0437c0a236ee49230005bb49104e8b1&amp;h=3e4f040f8eb07adfd8915dda4dbb1e2301860d195e5b9445a0256e56d01cebc7&amp;a=23fe9bfd7ceef4b44c2ce44dcac8e4a49caf8026&amp;f=P1&amp;v=2</a></p></blockquote>]]></content>
      
        <categories>
            
            <category> blockchain </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> bitcoin </tag>
            
            <tag> UTXO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于Java语言构建区块链（三）—— 持久化 & 命令行]]></title>
      <url>/posts/build-blockchain-in-java-data-persistence.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/Millerblockchainadj-3200x2400.webp?imageslim" alt="blockchain"></p><blockquote><p>文章的主要思想和内容均来自：<a href="https://jeiwan.cc/posts/building-blockchain-in-go-part-3/" target="_blank" rel="noopener">https://jeiwan.cc/posts/building-blockchain-in-go-part-3/</a></p></blockquote><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p><a href="https://wangwei.one/posts/7890ab7e.html">上一篇</a> 文章我们实现了区块链的工作量证明机制（Pow），尽可能地实现了挖矿。但是距离真正的区块链应用还有很多重要的特性没有实现。今天我们来实现区块链数据的存储机制，将每次生成的区块链数据保存下来。有一点需要注意，区块链本质上是一款分布式的数据库，我们这里不实现”分布式”，只聚焦于数据存储部分。</p><a id="more"></a><h2 id="数据库选择"><a href="#数据库选择" class="headerlink" title="数据库选择"></a>数据库选择</h2><p>到目前为止，我们的实现机制中还没有区块存储这一环节，导致我们的区块每次生成之后都保存在了内存中。这样不便于我们重新使用区块链，每次都要从头开始生成区块，也不能够跟他人共享我们的区块链，因此，我们需要将其存储在磁盘上。</p><p>我们该选择哪一款数据库呢？事实上，在《<a href="https://github.com/wangweiX/blockchain-explore/tree/master/white-paper/0000-bitcoin" target="_blank" rel="noopener">比特币白皮书</a>》中并没有明确指定使用哪一种的数据库，因此这个由开发人员自己决定。<a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E6%9C%AC%E8%81%AA" target="_blank" rel="noopener">中本聪</a> 开发的 <a href="https://github.com/bitcoin/bitcoin" target="_blank" rel="noopener">Bitcoin Core</a> 中使用的是<a href="https://github.com/google/leveldb" target="_blank" rel="noopener">LevelDB</a>。原文 <a href="https://jeiwan.cc/posts/building-blockchain-in-go-part-3/" target="_blank" rel="noopener">Building Blockchain in Go. Part 3: Persistence and CLI</a> 中使用的是 <a href="https://github.com/boltdb/bolt" target="_blank" rel="noopener">BoltDB</a> ，对Go语言支持比较好。</p><p>但是我们这里使用的是Java来实现，BoltDB不支持Java，这里我们选用 <a href="https://github.com/facebook/rocksdb" target="_blank" rel="noopener">Rocksdb</a> 。</p><blockquote><p>当然也可以选择 LevelDB，非常不错的LevelDB介绍文章：<a href="https://mp.weixin.qq.com/s/rN6HX2VzsRi3_EKXYKuJAA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/rN6HX2VzsRi3_EKXYKuJAA</a></p><p>RocksDB是由Facebook数据库工程团队开发和维护的一款key-value存储引擎，比LevelDB性能更加强大，有关Rocksdb的详细介绍，请移步至官方文档：<a href="https://github.com/facebook/rocksdb" target="_blank" rel="noopener">https://github.com/facebook/rocksdb</a> ，这里不多做介绍。</p></blockquote><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>在我们开始实现数据持久化之前，我们先要确定我们该如何去存储我们的数据。为此，我们先来看看比特币是怎么做的。</p><p>简单来讲，比特币使用了两个”buckets(桶)”来存储数据：</p><ul><li><strong>blocks</strong>. 描述链上所有区块的元数据.</li><li><strong>chainstate</strong>. 存储区块链的状态，指的是当前所有的<code>UTXO</code>（未花费交易输出）以及一些元数据.</li></ul><blockquote><p>“在比特币的世界里既没有账户，也没有余额，只有分散到区块链里的UTXO。”</p><p>详见：<a href="https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch06.asciidoc#transaction-outputs-and-inputs" target="_blank" rel="noopener">《精通比特币》第二版 第06章节 —— 交易的输入与输出</a></p></blockquote><p>此外，每个区块数据都是以单独的文件形式存储在磁盘上。这样做是出于性能的考虑：当读取某一个单独的区块数据时，不需要加载所有的区块数据到内存中来。</p><p>在 <code>blocks</code> 这个桶中，存储的键值对：</p><ul><li><p>‘b’ + 32-byte block hash -&gt; block index record</p><blockquote><p>区块的索引记录</p></blockquote></li><li><p>‘f’ + 4-byte file number -&gt; file information record</p><blockquote><p>文件信息记录</p></blockquote></li><li><p>‘l’ -&gt; 4-byte file number: the last block file number used</p><blockquote><p>最新的一个区块所使用的文件编码</p></blockquote></li><li><p>‘R’ -&gt; 1-byte boolean: whether we’re in the process of reindexing</p><blockquote><p>是否处于重建索引的进程当中</p></blockquote></li><li><p>‘F’ + 1-byte flag name length + flag name string -&gt; 1 byte boolean: various flags that can be on or off</p><blockquote><p>各种可以打开或关闭的flag标志</p></blockquote></li><li><p>‘t’ + 32-byte transaction hash -&gt; transaction index record</p><blockquote><p>交易索引记录</p></blockquote></li></ul><p>在 <code>chainstate</code> 这个桶中，存储的键值对：</p><ul><li><p>‘c’ + 32-byte transaction hash -&gt; unspent transaction output record for that transaction</p><blockquote><p>某笔交易的UTXO记录</p></blockquote></li></ul><ul><li><p>‘B’ -&gt; 32-byte block hash: the block hash up to which the database represents the unspent transaction outputs</p><blockquote><p>数据库所表示的UTXO的区块Hash（抱歉，这一点我还没弄明白……）</p></blockquote></li></ul><p>由于我们还没有实现交易相关的特性，因此，我们这里只使用 <code>block</code> 桶。另外，前面提到过的，这里我们不会实现各个区块数据各自存储在独立的文件上，而是统一存放在一个文件里面。因此，我们不要存储和文件编码相关的数据，这样一来，我们所用到的键值对就简化为：</p><ul><li><p>32-byte block-hash -&gt; Block structure (serialized)</p><blockquote><p>区块数据与区块hash的键值对</p></blockquote></li><li><p>‘l’ -&gt; the hash of the last block in a chain</p><blockquote><p>最新一个区块hash的键值对</p></blockquote></li></ul><p>(<a href="https://en.bitcoin.it/wiki/Bitcoin_Core_0.11_(ch_2" target="_blank" rel="noopener">查看更加详细的解释</a>:_Data_Storage))</p><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>RocksDB的Key与Value只能以byte[]的形式进行存储，这里我们需要用到序列化与反序列化库 <a href="https://github.com/EsotericSoftware/kryo" target="_blank" rel="noopener">Kryo</a>，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.blockchain.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.Kryo;</span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.io.Input;</span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.io.Output;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 序列化工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/02/07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializeUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反序列化</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bytes 对象对应的字节数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">deserialize</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">        Input input = <span class="keyword">new</span> Input(bytes);</span><br><span class="line">        Object obj = <span class="keyword">new</span> Kryo().readClassAndObject(input);</span><br><span class="line">        input.close();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列化</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object 需要序列化的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] serialize(Object object) &#123;</span><br><span class="line">        Output output = <span class="keyword">new</span> Output(<span class="number">4096</span>, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">new</span> Kryo().writeClassAndObject(output, object);</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = output.toBytes();</span><br><span class="line">        output.close();</span><br><span class="line">        <span class="keyword">return</span> bytes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><p>上面已经说过，我们这里使用<code>RocksDB</code>，我们先写一个相关的工具类<code>RocksDBUtils</code>，主要的功能如下：</p><ul><li>putLastBlockHash：保存最新一个区块的Hash值</li><li>getLastBlockHash：查询最新一个区块的Hash值</li><li>putBlock：保存区块</li><li>getBlock：查询区块</li></ul><blockquote><p>注意：BoltDB 支持 Bucket 的特性，而RocksDB 不支持，所以需要我们自己使用Map来做一个映射。</p></blockquote><h3 id="RocksDBUtils"><a href="#RocksDBUtils" class="headerlink" title="RocksDBUtils"></a>RocksDBUtils</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.blockchain.store;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Maps;</span><br><span class="line"><span class="keyword">import</span> one.wangwei.blockchain.block.Block;</span><br><span class="line"><span class="keyword">import</span> one.wangwei.blockchain.util.SerializeUtils;</span><br><span class="line"><span class="keyword">import</span> org.rocksdb.RocksDB;</span><br><span class="line"><span class="keyword">import</span> org.rocksdb.RocksDBException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 存储工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/02/27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RocksDBUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 区块链数据文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DB_FILE = <span class="string">"blockchain.db"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 区块桶前缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BLOCKS_BUCKET_KEY = <span class="string">"blocks"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最新一个区块</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LAST_BLOCK_KEY = <span class="string">"l"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> RocksDBUtils instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RocksDBUtils <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (RocksDBUtils.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> RocksDBUtils();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RocksDB db;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * block buckets</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, <span class="keyword">byte</span>[]&gt; blocksBucket;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">RocksDBUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        openDB();</span><br><span class="line">        initBlockBucket();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打开数据库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">openDB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            db = RocksDB.open(DB_FILE);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RocksDBException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Fail to open db ! "</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化 blocks 数据桶</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initBlockBucket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] blockBucketKey = SerializeUtils.serialize(BLOCKS_BUCKET_KEY);</span><br><span class="line">            <span class="keyword">byte</span>[] blockBucketBytes = db.get(blockBucketKey);</span><br><span class="line">            <span class="keyword">if</span> (blockBucketBytes != <span class="keyword">null</span>) &#123;</span><br><span class="line">                blocksBucket = (Map) SerializeUtils.deserialize(blockBucketBytes);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                blocksBucket = Maps.newHashMap();</span><br><span class="line">                db.put(blockBucketKey, SerializeUtils.serialize(blocksBucket));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RocksDBException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Fail to init block bucket ! "</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存最新一个区块的Hash值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tipBlockHash</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putLastBlockHash</span><span class="params">(String tipBlockHash)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            blocksBucket.put(LAST_BLOCK_KEY, SerializeUtils.serialize(tipBlockHash));</span><br><span class="line">            db.put(SerializeUtils.serialize(BLOCKS_BUCKET_KEY), SerializeUtils.serialize(blocksBucket));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RocksDBException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Fail to put last block hash ! "</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询最新一个区块的Hash值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLastBlockHash</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] lastBlockHashBytes = blocksBucket.get(LAST_BLOCK_KEY);</span><br><span class="line">        <span class="keyword">if</span> (lastBlockHashBytes != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (String) SerializeUtils.deserialize(lastBlockHashBytes);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存区块</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> block</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putBlock</span><span class="params">(Block block)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            blocksBucket.put(block.getHash(), SerializeUtils.serialize(block));</span><br><span class="line">            db.put(SerializeUtils.serialize(BLOCKS_BUCKET_KEY), SerializeUtils.serialize(blocksBucket));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RocksDBException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Fail to put block ! "</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询区块</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> blockHash</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Block <span class="title">getBlock</span><span class="params">(String blockHash)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Block) SerializeUtils.deserialize(blocksBucket.get(blockHash));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭数据库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeDB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            db.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Fail to close db ! "</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建区块链"><a href="#创建区块链" class="headerlink" title="创建区块链"></a>创建区块链</h3><p>现在我们来优化 <code>Blockchain.newBlockchain</code> 接口的代码逻辑，改为如下逻辑：</p><p><img src="https://img.i7years.com/blog/blockchain_flow.jpg" alt=""></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * &lt;p&gt; 创建区块链 &lt;/p&gt;</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Blockchain <span class="title">newBlockchain</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    String lastBlockHash = RocksDBUtils.getInstance().getLastBlockHash();</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(lastBlockHash)) &#123;</span><br><span class="line">        Block genesisBlock = Block.newGenesisBlock();</span><br><span class="line">        lastBlockHash = genesisBlock.getHash();</span><br><span class="line">        RocksDBUtils.getInstance().putBlock(genesisBlock);</span><br><span class="line">        RocksDBUtils.getInstance().putLastBlockHash(lastBlockHash);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> Blockchain(lastBlockHash);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改 <code>Blockchain</code> 的数据结构，只记录最新一个区块链的Hash值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blockchain</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> String lastBlockHash;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Blockchain</span><span class="params">(String lastBlockHash)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lastBlockHash = lastBlockHash;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次挖矿完成后，我们也需要将最新的区块信息保存下来，并且更新最新区块链Hash值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 添加区块  &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBlock</span><span class="params">(String data)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   String lastBlockHash = RocksDBUtils.getInstance().getLastBlockHash();</span><br><span class="line">   <span class="keyword">if</span> (StringUtils.isBlank(lastBlockHash)) &#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Fail to add block into blockchain ! "</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">this</span>.addBlock(Block.newBlock(lastBlockHash, data));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 添加区块  &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> block</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBlock</span><span class="params">(Block block)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    RocksDBUtils.getInstance().putLastBlockHash(block.getHash());</span><br><span class="line">    RocksDBUtils.getInstance().putBlock(block);</span><br><span class="line">    <span class="keyword">this</span>.lastBlockHash = block.getHash();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此，存储部分的功能就实现完毕，我们还缺少一个功能：</p><h2 id="检索区块链"><a href="#检索区块链" class="headerlink" title="检索区块链"></a>检索区块链</h2><p>现在，我们所有的区块都保存到了数据库，因此，我们能够重新打开已有的区块链并且向其添加新的区块。但这也导致我们再也无法打印出区块链中所有区块的信息，因为，我们没有将区块存储在数组当中。让我们来修复这个瑕疵！</p><p>我们在Blockchain中创建一个内部类 <code>BlockchainIterator</code> ，作为区块链的迭代器，通过区块之前的hash连接来依次迭代输出区块信息，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blockchain</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    ....</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 区块链迭代器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockchainIterator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String currentBlockHash;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">BlockchainIterator</span><span class="params">(String currentBlockHash)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.currentBlockHash = currentBlockHash;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 是否有下一个区块</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hashNext</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isBlank(currentBlockHash)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Block lastBlock = RocksDBUtils.getInstance().getBlock(currentBlockHash);</span><br><span class="line">            <span class="keyword">if</span> (lastBlock == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 创世区块直接放行</span></span><br><span class="line">            <span class="keyword">if</span> (lastBlock.getPrevBlockHash().length() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> RocksDBUtils.getInstance().getBlock(lastBlock.getPrevBlockHash()) != <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 返回区块</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Block <span class="title">next</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            Block currentBlock = RocksDBUtils.getInstance().getBlock(currentBlockHash);</span><br><span class="line">            <span class="keyword">if</span> (currentBlock != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.currentBlockHash = currentBlock.getPrevBlockHash();</span><br><span class="line">                <span class="keyword">return</span> currentBlock;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">    </span><br><span class="line">    ....    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/02/05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockchainTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Blockchain blockchain = Blockchain.newBlockchain();</span><br><span class="line"></span><br><span class="line">            blockchain.addBlock(<span class="string">"Send 1.0 BTC to wangwei"</span>);</span><br><span class="line">            blockchain.addBlock(<span class="string">"Send 2.5 more BTC to wangwei"</span>);</span><br><span class="line">            blockchain.addBlock(<span class="string">"Send 3.5 more BTC to wangwei"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Blockchain.BlockchainIterator iterator = blockchain.getBlockchainIterator(); iterator.hashNext(); ) &#123;</span><br><span class="line">                Block block = iterator.next();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (block != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">boolean</span> validate = ProofOfWork.newProofOfWork(block).validate();</span><br><span class="line">                    System.out.println(block.toString() + <span class="string">", validate = "</span> + validate);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*输出*/</span></span><br><span class="line"></span><br><span class="line">Block&#123;hash=<span class="string">'0000012f87a0510dd0ee7048a6bd52db3002bae7d661126dc28287bd6c23189a'</span>, prevBlockHash=<span class="string">'0000024b2c23c4fb06c2e2c1349275d415efe17a51db24cd4883da0067300ddf'</span>, data=<span class="string">'Send 3.5 more BTC to wangwei'</span>, timeStamp=<span class="number">1519724875</span>, nonce=<span class="number">369110</span>&#125;, validate = <span class="keyword">true</span></span><br><span class="line">Block&#123;hash=<span class="string">'0000024b2c23c4fb06c2e2c1349275d415efe17a51db24cd4883da0067300ddf'</span>, prevBlockHash=<span class="string">'00000b14fefb51ba2a7428549d469bcf3efae338315e7289d3e6dc4caf589d79'</span>, data=<span class="string">'Send 2.5 more BTC to wangwei'</span>, timeStamp=<span class="number">1519724872</span>, nonce=<span class="number">896348</span>&#125;, validate = <span class="keyword">true</span></span><br><span class="line">Block&#123;hash=<span class="string">'00000b14fefb51ba2a7428549d469bcf3efae338315e7289d3e6dc4caf589d79'</span>, prevBlockHash=<span class="string">'0000099ced1b02f40c750c5468bb8c4fd800ec9f46fea5d8b033e5d054f0f703'</span>, data=<span class="string">'Send 1.0 BTC to wangwei'</span>, timeStamp=<span class="number">1519724869</span>, nonce=<span class="number">673955</span>&#125;, validate = <span class="keyword">true</span></span><br><span class="line">Block&#123;hash=<span class="string">'0000099ced1b02f40c750c5468bb8c4fd800ec9f46fea5d8b033e5d054f0f703'</span>, prevBlockHash=<span class="string">''</span>, data=<span class="string">'Genesis Block'</span>, timeStamp=<span class="number">1519724866</span>, nonce=<span class="number">840247</span>&#125;, validate = <span class="keyword">true</span></span><br></pre></td></tr></table></figure><h2 id="命令行界面"><a href="#命令行界面" class="headerlink" title="命令行界面"></a>命令行界面</h2><p><code>CLI</code> 部分的内容，这里不做详细介绍，具体可以去查看文末的Github源码链接。大致步骤如下：</p><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>添加pom.xml配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-cli<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-cli<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">	<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">addClasspath</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addClasspath</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">classpathPrefix</span>&gt;</span>lib/<span class="tag">&lt;/<span class="name">classpathPrefix</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>one.wangwei.blockchain.cli.Main<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="tag">&lt;/<span class="name">descriptorRef</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">id</span>&gt;</span>make-assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- this is used for inheritance merges --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- 指定在打包节点执行jar包合并操作 --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加shell脚本 <code>blockchain.sh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line">set -e</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Check if the jar has been built.</span><br><span class="line">if [ ! -e target/blockchain-java-jar-with-dependencies.jar ]; then</span><br><span class="line">  echo "Compiling blockchain project to a JAR"</span><br><span class="line">  mvn package -DskipTests</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">java -jar target/blockchain-java-jar-with-dependencies.jar "$@"</span><br></pre></td></tr></table></figure><h5 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入工程根路劲</span></span><br><span class="line">$ cd blockchain-java</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印帮助信息</span></span><br><span class="line">$ ./blockchain.sh -h </span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加区块</span></span><br><span class="line">$ ./blockchain.sh -add <span class="string">"Send 1.5 BTC to wangwei"</span></span><br><span class="line">$ ./blockchain.sh -add <span class="string">"Send 2.5 BTC to wangwei"</span></span><br><span class="line">$ ./blockchain.sh -add <span class="string">"Send 3.5 BTC to wangwei"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印区块链</span></span><br><span class="line">$ ./blockchain.sh -print</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本篇我们实现了区块链的存储功能，接下来我们将实现地址、交易、钱包这一些列的功能。</p><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul><li>源代码：<a href="https://github.com/wangweiX/blockchain-java/tree/part3-persistence" target="_blank" rel="noopener">https://github.com/wangweiX/blockchain-java/tree/part3-persistence</a></li><li><a href="https://jeiwan.cc/posts/building-blockchain-in-go-part-3/" target="_blank" rel="noopener">https://jeiwan.cc/posts/building-blockchain-in-go-part-3/</a></li><li><a href="https://github.com/bitcoinbook/bitcoinbook" target="_blank" rel="noopener">《精通比特币》第二版</a></li></ul><p><img src="https://img.i7years.com/blog/blockchain_exploer.png" alt=""></p><blockquote><p><a href="https://press.one/file/v?s=62076a14b3d0693cf88d19db7e2d6a5a8e05b3de0c77deee242615c5480f8818104c24b65500a8cac096dee3b2e6862cec266916ee6545dd38f3650a459c7b221&amp;h=7732ed4bedb1bb10a4d24df75b719ac2d56ae76a1b5a8f06ccc2ca6dc2d3ce30&amp;a=23fe9bfd7ceef4b44c2ce44dcac8e4a49caf8026&amp;f=P1&amp;v=2" target="_blank" rel="noopener">https://press.one/file/v?s=62076a14b3d0693cf88d19db7e2d6a5a8e05b3de0c77deee242615c5480f8818104c24b65500a8cac096dee3b2e6862cec266916ee6545dd38f3650a459c7b221&amp;h=7732ed4bedb1bb10a4d24df75b719ac2d56ae76a1b5a8f06ccc2ca6dc2d3ce30&amp;a=23fe9bfd7ceef4b44c2ce44dcac8e4a49caf8026&amp;f=P1&amp;v=2</a></p></blockquote>]]></content>
      
        <categories>
            
            <category> blockchain </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> bitcoin </tag>
            
            <tag> RocksDB </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于Java语言构建区块链（二）—— 工作量证明]]></title>
      <url>/posts/build-blockchain-in-java-proof-of-work.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/bitcoin-miner.webp?imageslim" alt=""></p><blockquote><p>文章的主要思想和内容均来自 <a href="https://jeiwan.cc/posts/building-blockchain-in-go-part-2/" target="_blank" rel="noopener">https://jeiwan.cc/posts/building-blockchain-in-go-part-2/</a></p></blockquote><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在 <a href="https://wangwei.one/posts/df195d9.html">上一篇</a> 文章中，我们实现了区块链最基本的数据结构模型，添加区块以及和前一个区块连接在一起。但是，我们的实现方式非常简单，而真实的比特币区块链中，每一个区块的添加都是需要经过大量的计算才可以完成，这个过程就是我们熟知的<code>挖矿</code>。</p><a id="more"></a><h2 id="工作量证明机制"><a href="#工作量证明机制" class="headerlink" title="工作量证明机制"></a>工作量证明机制</h2><p>区块链最关键的一个思想就是，必须进行大量且困难的计算工作才能将交易数据存放到区块链上。这种工作机制才能保证整个区块链数据的安全性和一致性。同时，完成这个计算工作的矿工会得到相应的Token奖励。</p><p>这套机制和我们的现实生活非常相似：我们必须努力工作来赚取报酬用以维持我们的生活。在区块链中，网络中的矿工们努力工作来维持区块链网络，为其添加区块，并且获得一定的Token奖励。作为他们工作的成果，一个区块以安全的方式被组合进了区块链中，这样就保证了整个区块链数据库的稳定性。还有一个必须要注意的是，某个矿工完成了计算工作的结果，还必须得到其他所有矿工的认同（证明是正确的），这样才算完成。</p><p>这一整套的计算和证明机制，就称为<strong>Proof-of-Work（工作量证明）</strong>。计算工作是非常非常困难的，因为它需要消耗大量的计算机算力资源，即使是性能非常高的计算机都不能非常快地计算出正确的结果。此外，随着时间的推移，这项计算工作的难度也会随之增加，目的是为了保证每小时6个新区块的出块率。在比特币中，这种工作的目标是找到满足某个特定要求的区块Hash（哈希值）。这个区块哈希值就是工作结果的一个证明。因此，计算工作的目的就是为了寻找到这个证明值。</p><p>最后要注意的是，计算出这个特定的Hash（哈希值）是非常困难的，但是别人来验证这个Hash值是否正确的时候，是非常简单的，一下子就能完成。</p><h2 id="Hashing"><a href="#Hashing" class="headerlink" title="Hashing"></a>Hashing</h2><blockquote><p>Hash：哈希 | 散列</p></blockquote><p>我们来讨论一下<strong>Hashing（哈希）</strong>，对这一块非常熟悉的朋友可以直接跳过这一段内容。</p><p>哈希是一种计算机算法，该算法能够计算出任意大小数据的哈希值，并且这个哈希值的长度是固定的，256bit。这个被计算出来的哈希值能够作为这个数据的<strong>唯一</strong>代表。哈希算法有几个关键的特性：</p><blockquote><ul><li><strong>不可逆性</strong>。不能根据一个哈希值推导出原始数据。所以，哈希不是加密。</li><li><strong>唯一性</strong>。每个数据有且仅有一个唯一的哈希值。</li><li><strong>迥异性</strong>。原始数据一丁点的变化都将得到完全不一样的哈希值。</li></ul></blockquote><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHA256(&quot;wangwei1&quot;) ——&gt; 1e898b7c9adaad86c20139a302ccd5277f81040cab68dc2aecfc684773532652</span><br><span class="line">SHA256(&quot;wangwei2&quot;) ——&gt; c9cc7417c17318c8aab448cc8ace24c53b6dcf350f5c5fd8e91cbc3b011a179d</span><br></pre></td></tr></table></figure><p>哈希算法被广泛用于验证文件的一致性上。比如软件提供商通常会在安装包上附加一个检验码（checksums），当我们下载完一个软件安装包后，可以用哈希函数计算一下这个软件安装包的哈希值，然后再和软件安装包的检验码做个对比，就可以知道下载的安装包是否完整、是否有数据丢失。</p><p>在区块链中，哈希值用于保证区块的一致性。每一个区块被用于进行哈希计算的数据，都包含前一个区块链的哈希值，因此任何人想要修改区块的数据几乎是不可能的，他必须要把整个区块链中从创世区块到最新的区块的所有哈希值全部重新计算一遍。</p><blockquote><p>你可以脑补一下这个工作量有多大，按照目前计算机的算力来看，几乎不可能</p></blockquote><h2 id="Hashcash"><a href="#Hashcash" class="headerlink" title="Hashcash"></a>Hashcash</h2><p>比特币的工作量证明是使用的是<a href="https://en.wikipedia.org/wiki/Hashcash" target="_blank" rel="noopener">Hashcash</a>算法，一种最初被用于反垃圾邮件的算法，它可以被拆解为以下几步：</p><ol><li>获取某种公开可知的数据data（在邮件案例中，指的是收件人邮件地址；比特币案例中，指的是区块头）</li><li>添加一个计数器counter，初始值设置为0；</li><li>计算 data 与 counter拼接字符串的哈希值；</li><li>检查上一步的哈希值是否满足某个条件，满足则停止计算，不满足则 counter 加1，然后重复第3步和第4步，直到满足这个特定的条件为止。</li></ol><p>这是一种粗暴的算法：你改变计数器，计算一个新的哈希值，检查它，增加计数器，计算一个新的哈希值，循环往复，这就是为什么它需要花费大量计算机算力资源的原因所在。</p><p>让我们来近距离看一下这个特定的条件指的是什么。在原始的<code>Hashcash</code>算法中，这个特殊的要求指的是计算出来的哈希值的前20bit必须全是零，</p><p>在比特币种，这种要求哈希值前面有多少个零打头的要求是随着时间的推移而不断调整的，这是出于设计的目的，尽管在计算机的算力会不断的提升和越来越多的矿工加入这个网络中的情况下，都要保证每10min生产一个区块。</p><p>我们演示一下这个算法，</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算字符串'I like donuts'的哈希值</span></span><br><span class="line">SHA256(<span class="string">"I like donuts"</span>) </span><br><span class="line">——&gt; f80867f6efd4484c23b0e7184e53fe4af6ab49b97f5293fcd50d5b2bfa73a4d0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拼接一个计数器值(ca07ca)，再次进行Hash计算</span></span><br><span class="line">SHA256(<span class="string">"I like donutsca07ca"</span>) </span><br><span class="line">——&gt; <span class="number">0000002</span>f7c1fe31cb82acdc082cfec47620b7e4ab94f2bf9e096c436fc8cee06</span><br></pre></td></tr></table></figure><p>这里的<code>ca07ca</code>是计数器值的十六进制，他表示的十进制值为<code>13240266</code></p><blockquote><p>即，从0开始，总共计算了13240266次，才计算出<code>I like donuts</code>这个数据的Hash值，满足前6位(3字节)全是零。</p></blockquote><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><blockquote><p>思路：</p><p>1）每次区块被添加到区块链之前，先要进行挖矿（Pow）</p><p>2）挖矿过程中，产生的 Hash 值，如果小于难度目标值则添加进区块，否则继续挖矿，直到找到正确的Hash为止</p><p>3）最后，验证区块Hash是否有效</p></blockquote><h4 id="定义Pow类"><a href="#定义Pow类" class="headerlink" title="定义Pow类"></a>定义Pow类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工作量证明</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/02/04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProofOfWork</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 难度目标位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TARGET_BITS = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 区块</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Block block;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 难度目标值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> BigInteger target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ProofOfWork</span><span class="params">(Block block, BigInteger target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.block = block;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建新的工作量证明，设定难度目标值</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 对1进行移位运算，将1向左移动 (256 - TARGET_BITS) 位，得到我们的难度目标值</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> block</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ProofOfWork <span class="title">newProofOfWork</span><span class="params">(Block block)</span> </span>&#123;</span><br><span class="line">        BigInteger targetValue = BigInteger.valueOf(<span class="number">1</span>).shiftLeft((<span class="number">256</span> - TARGET_BITS));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProofOfWork(block, targetValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>设定一个难度目标位<code>TARGET_BITS</code>，表示最终挖矿挖出来Hash值，转化为二进制后，与256相比，长度少了多少bit，也即二进制前面有多少bit是零.</p><blockquote><ul><li><code>TARGET_BITS</code> 越大，最终<code>targetValue</code>就越小，要求计算出来的Hash越来越小，也就是挖矿的难度越来越大。</li><li>我们这里的<code>TARGET_BITS</code>是固定的，但是在真实的比特币中，难度目标是随着时间的推推，会动态调整的。详见：<a href="https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch10.asciidoc#target-representation" target="_blank" rel="noopener">《精通比特币 （第二版）》第10章</a></li></ul></blockquote></li><li><p>由于数值比较大，这里要使用<code>BitInteger</code>类型。</p></li></ul><h4 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 准备数据</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 注意：在准备区块数据时，一定要从原始数据类型转化为byte[]，不能直接从字符串进行转换</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nonce</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">prepareData</span><span class="params">(<span class="keyword">long</span> nonce)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">byte</span>[] prevBlockHashBytes = &#123;&#125;;</span><br><span class="line">   <span class="keyword">if</span> (StringUtils.isNoneBlank(<span class="keyword">this</span>.getBlock().getPrevBlockHash())) &#123;</span><br><span class="line">       prevBlockHashBytes = <span class="keyword">new</span> BigInteger(<span class="keyword">this</span>.getBlock().getPrevBlockHash(), <span class="number">16</span>).toByteArray();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> ByteUtils.merge(</span><br><span class="line">           prevBlockHashBytes,</span><br><span class="line">           <span class="keyword">this</span>.getBlock().getData().getBytes(),</span><br><span class="line">           ByteUtils.toBytes(<span class="keyword">this</span>.getBlock().getTimeStamp()),</span><br><span class="line">           ByteUtils.toBytes(TARGET_BITS),</span><br><span class="line">           ByteUtils.toBytes(nonce)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>参与Hash运算的如下几个信息：<ul><li>前一个区块（父区块）的Hash值；</li><li>区块中的交易数据；</li><li>区块生成的时间；</li><li>难度目标；</li><li>用于工作量证明算法的计数器</li></ul></li></ul><blockquote><p>详见：<a href="https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch09.asciidoc#block-header" target="_blank" rel="noopener">《精通比特币 （第二版）》第09章</a></p></blockquote><h4 id="Pow算法"><a href="#Pow算法" class="headerlink" title="Pow算法"></a>Pow算法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 运行工作量证明，开始挖矿，找到小于难度目标值的Hash</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PowResult <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> nonce = <span class="number">0</span>;</span><br><span class="line">    String shaHex = <span class="string">""</span>;</span><br><span class="line">    System.out.printf(<span class="string">"Mining the block containing：%s \n"</span>, <span class="keyword">this</span>.getBlock().getData());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">while</span> (nonce &lt; Long.MAX_VALUE) &#123;</span><br><span class="line">        String data = <span class="keyword">this</span>.prepareData(nonce);</span><br><span class="line">        shaHex = DigestUtils.sha256Hex(data);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">new</span> BigInteger(shaHex, <span class="number">16</span>).compareTo(<span class="keyword">this</span>.target) == -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.printf(<span class="string">"Elapsed Time: %s seconds \n"</span>, (<span class="keyword">float</span>) (System.currentTimeMillis() - startTime) / <span class="number">1000</span>);</span><br><span class="line">            System.out.printf(<span class="string">"correct hash Hex: %s \n\n"</span>, shaHex);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            nonce++;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> PowResult(nonce, shaHex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>循环体里面主要以下四步：<ul><li>准备数据</li><li>进行sha256运算</li><li>转化为BigInter类型</li><li>与target进行比较</li></ul></li><li>最后，返回正确的Hash值以及运算计数器<code>nonce</code></li></ul><h4 id="验证区块Hash有效性"><a href="#验证区块Hash有效性" class="headerlink" title="验证区块Hash有效性"></a>验证区块Hash有效性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证区块是否有效</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String data = <span class="keyword">this</span>.prepareData(<span class="keyword">this</span>.getBlock().getNonce());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> BigInteger(DigestUtils.sha256Hex(data), <span class="number">16</span>).compareTo(<span class="keyword">this</span>.target) == -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="修改区块添加逻辑"><a href="#修改区块添加逻辑" class="headerlink" title="修改区块添加逻辑"></a>修改区块添加逻辑</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 创建新区块 &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> previousHash</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Block <span class="title">newBlock</span><span class="params">(String previousHash, String data)</span> </span>&#123;</span><br><span class="line">    Block block = <span class="keyword">new</span> Block(<span class="string">""</span>, previousHash, data, Instant.now().getEpochSecond(), <span class="number">0</span>);</span><br><span class="line">    ProofOfWork pow = ProofOfWork.newProofOfWork(block);</span><br><span class="line">    PowResult powResult = pow.run();</span><br><span class="line">    block.setHash(powResult.getHash());</span><br><span class="line">    block.setNonce(powResult.getNonce());</span><br><span class="line">    <span class="keyword">return</span> block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建区块</li><li>创建Pow算法对象</li><li>执行Pow算法</li><li>保存返回的Hash以及运算计数器</li></ul><h4 id="测试运行"><a href="#测试运行" class="headerlink" title="测试运行"></a>测试运行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/02/05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockchainTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Blockchain blockchain = Blockchain.newBlockchain();</span><br><span class="line"></span><br><span class="line">        blockchain.addBlock(<span class="string">"Send 1 BTC to Ivan"</span>);</span><br><span class="line">        blockchain.addBlock(<span class="string">"Send 2 more BTC to Ivan"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Block block : blockchain.getBlockList()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Prev.hash: "</span> + block.getPrevBlockHash());</span><br><span class="line">            System.out.println(<span class="string">"Data: "</span> + block.getData());</span><br><span class="line">            System.out.println(<span class="string">"Hash: "</span> + block.getHash());</span><br><span class="line">            System.out.println(<span class="string">"Nonce: "</span> + block.getNonce());</span><br><span class="line"></span><br><span class="line">            ProofOfWork pow = ProofOfWork.newProofOfWork(block);</span><br><span class="line">            System.out.println(<span class="string">"Pow valid: "</span> +  pow.validate() + <span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设定TARGET_BITS = 20，得到如下结果：</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Mining the block containing：Genesis Block </span><br><span class="line">Elapsed Time: <span class="number">2.118</span> seconds </span><br><span class="line">correct hash Hex: <span class="number">00000828</span>ee8289ef6381f297585ef8c952fde93fc2b673ff7cc655f699bb2442 </span><br><span class="line"></span><br><span class="line">Mining the block containing：Send <span class="number">1</span> BTC to Ivan </span><br><span class="line">Elapsed Time: <span class="number">1.069</span> seconds </span><br><span class="line">correct hash Hex: <span class="number">00000</span>a38c0d7f2ebbd20773e93770298aa8bc0cc6d85fca8756fe0646ae7fea5 </span><br><span class="line"></span><br><span class="line">Mining the block containing：Send <span class="number">2</span> more BTC to Ivan </span><br><span class="line">Elapsed Time: <span class="number">4.258</span> seconds </span><br><span class="line">correct hash Hex: <span class="number">00000777f</span>93efe91d9aabcba14ab3d8ab8e0255b89818cdb9b93cfa844ad0c7f </span><br><span class="line"></span><br><span class="line">Prev.hash: </span><br><span class="line">Data: Genesis Block</span><br><span class="line">Hash: <span class="number">00000828</span>ee8289ef6381f297585ef8c952fde93fc2b673ff7cc655f699bb2442</span><br><span class="line">Nonce: <span class="number">522163</span></span><br><span class="line">Pow valid: <span class="keyword">true</span></span><br><span class="line"></span><br><span class="line">Prev.hash: <span class="number">00000828</span>ee8289ef6381f297585ef8c952fde93fc2b673ff7cc655f699bb2442</span><br><span class="line">Data: Send <span class="number">1</span> BTC to Ivan</span><br><span class="line">Hash: <span class="number">00000</span>a38c0d7f2ebbd20773e93770298aa8bc0cc6d85fca8756fe0646ae7fea5</span><br><span class="line">Nonce: <span class="number">474758</span></span><br><span class="line">Pow valid: <span class="keyword">true</span></span><br><span class="line"></span><br><span class="line">Prev.hash: <span class="number">00000</span>a38c0d7f2ebbd20773e93770298aa8bc0cc6d85fca8756fe0646ae7fea5</span><br><span class="line">Data: Send <span class="number">2</span> more BTC to Ivan</span><br><span class="line">Hash: <span class="number">00000777f</span>93efe91d9aabcba14ab3d8ab8e0255b89818cdb9b93cfa844ad0c7f</span><br><span class="line">Nonce: <span class="number">1853839</span></span><br><span class="line">Pow valid: <span class="keyword">true</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们正在一步一步接近真实的区块链架构，本篇我们实现了挖矿机制，但是我们还有很多关键性的功能没有实现：区块链数据库的持久性、钱包、地址、交易、共识机制，这些我们后面一步一步来实现</p><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul><li>源代码：<a href="https://github.com/wangweiX/blockchain-java/tree/part2-pow" target="_blank" rel="noopener">https://github.com/wangweiX/blockchain-java/tree/part2-pow</a></li></ul><ul><li><a href="https://jeiwan.cc/posts/building-blockchain-in-go-part-2/" target="_blank" rel="noopener">https://jeiwan.cc/posts/building-blockchain-in-go-part-2/</a></li><li><a href="https://github.com/bitcoinbook/bitcoinbook" target="_blank" rel="noopener">《精通比特币（第二版）》</a></li></ul><p><img src="https://img.i7years.com/blog/blockchain_exploer.png" alt=""></p><blockquote><p><a href="https://press.one/file/v?s=4fb1e0818984baa1c44f0816f56490d616247c0ec4bc1ae69ce5d7b75ac93468a4fdab2d120a8077ff54b467b6c268ab220dc4247374ed06e5000972488d30e60&amp;h=976aeef7414e3e5779d73cb9950c566eb1ac7a0d75f2ab76a0bea31b30e94686&amp;a=23fe9bfd7ceef4b44c2ce44dcac8e4a49caf8026&amp;f=P1&amp;v=2" target="_blank" rel="noopener">https://press.one/file/v?s=4fb1e0818984baa1c44f0816f56490d616247c0ec4bc1ae69ce5d7b75ac93468a4fdab2d120a8077ff54b467b6c268ab220dc4247374ed06e5000972488d30e60&amp;h=976aeef7414e3e5779d73cb9950c566eb1ac7a0d75f2ab76a0bea31b30e94686&amp;a=23fe9bfd7ceef4b44c2ce44dcac8e4a49caf8026&amp;f=P1&amp;v=2</a></p></blockquote>]]></content>
      
        <categories>
            
            <category> blockchain </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> bitcoin </tag>
            
            <tag> pow </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于Java语言构建区块链（一）—— 基本原型]]></title>
      <url>/posts/build-blockchain-in-java-base-prototype.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/Blockchain-Technology-is-Changing-the-World-As-We-Know-It.webp?imageslim" alt=""></p><blockquote><p>文章的主要思想和内容均来自 <a href="https://jeiwan.cc/posts/building-blockchain-in-go-part-1/" target="_blank" rel="noopener">https://jeiwan.cc/posts/building-blockchain-in-go-part-1/</a></p></blockquote><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>区块链技术是一项比人工智能更具革命性的技术，人工智能只是提高了人类的生产力，而区块链则将改变人类社会的生产关系，它将会颠覆我们人类社会现有的协作方式。了解和掌握区块链相关知识和技术，是我们每位开发人员必须要去做的事情，这样我们才能把握住这波时代趋势的红利。</p><p>本文将基于Java语言构建简化版的blockchain，来实现数字货币。</p><a id="more"></a><h2 id="创建区块"><a href="#创建区块" class="headerlink" title="创建区块"></a>创建区块</h2><p>区块链是由包含交易信息的区块从后向前有序链接起来的数据结构。区块被从后向前有序地链接在这个链条里，每个区块都指向前一个区块。以比特币为例，每个区块主要包含如下信息字段：</p><blockquote><ul><li>区块大小：用字节表示的区块数据大小</li><li>区块头：组成区块头的几个字段<ul><li>区块头hash值</li><li>父区块头hash值</li><li>时间戳：区块产生的近似时间</li><li>Merkle根：该区块中交易的merkle树根的哈希值</li><li>难度目标：该区块工作量证明算法的难度目标</li><li>Nonce：用于工作量证明算法的计数器</li></ul></li><li>交易计数器：交易的数量</li><li>交易：记录在区块里的交易信息</li></ul><blockquote><p>详见：<a href="https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch09.asciidoc#structure-of-a-block" target="_blank" rel="noopener">《精通比特币》（第二版）第9章——区块链</a></p></blockquote></blockquote><h5 id="区块数据结构"><a href="#区块数据结构" class="headerlink" title="区块数据结构"></a>区块数据结构</h5><p><img src="https://img.i7years.com/blog/1_627BG-7qMtaXNsX0n41C6Q.png" alt=""></p><p>在这里，我们主要是为了实现最简单的区块链结构，仅仅包含以下几个信息字段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 区块</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/02/02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Block</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 区块hash值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String hash;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前一个区块的hash值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String previousHash;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 区块数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String data;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 区块创建时间(单位:秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> timeStamp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Block</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Block</span><span class="params">(String hash, String previousHash, String data, <span class="keyword">long</span> timeStamp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>();</span><br><span class="line">        <span class="keyword">this</span>.hash = hash;</span><br><span class="line">        <span class="keyword">this</span>.previousHash = previousHash;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.timeStamp = timeStamp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="区块Hash值计算"><a href="#区块Hash值计算" class="headerlink" title="区块Hash值计算"></a>区块Hash值计算</h5><p>加密Hash值，一个通过SHA256算法对区块头进行二次哈希计算而得到的数字指纹。Hash值用于确保blockchain的安全。Hash计算是计算敏感的操作，即使在高性能电脑也需要花费一段时间来完成计算(这也就是为什么人们购买高性能GPU进行比特币挖矿的原因)。blockchain架构设计有意使Hash计算变得困难，这样做是为了加大新增一个block的难度，进而防止block在增加后被随意修改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 创建新区块 &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> previousHash</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Block <span class="title">newBlock</span><span class="params">(String previousHash, String data)</span> </span>&#123;</span><br><span class="line">        Block block = <span class="keyword">new</span> Block(<span class="string">""</span>, previousHash, data.getBytes(),     Instant.now().getEpochSecond());</span><br><span class="line">        block.setHash();</span><br><span class="line">        <span class="keyword">return</span> block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算区块Hash</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 注意：在准备区块数据时，一定要从原始数据类型转化为byte[]，不能直接从字符串进行转换</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setHash</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] prevBlockHashBytes = &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isNoneBlank(<span class="keyword">this</span>.getPrevBlockHash())) &#123;</span><br><span class="line">        prevBlockHashBytes = <span class="keyword">new</span> BigInteger(<span class="keyword">this</span>.getPrevBlockHash(), <span class="number">16</span>).toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">byte</span>[] headers = ByteUtils.merge(</span><br><span class="line">           prevBlockHashBytes,</span><br><span class="line">           <span class="keyword">this</span>.getData().getBytes(),</span><br><span class="line">           ByteUtils.toBytes(<span class="keyword">this</span>.getTimeStamp()));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.setHash(DigestUtils.sha256Hex(headers));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建区块链"><a href="#创建区块链" class="headerlink" title="创建区块链"></a>创建区块链</h2><p>区块链本质上是一种<strong>有序</strong>、<strong>反向链接链表</strong>的数据结构。这意味着，block按照插入的顺序存放，同时每个block都保存指向上一个block的链接。这种结构保证可以快速获取最新插入的block同时获取它的hash值。这种结构保证可以快速获取最新插入的block同时（高效地）获取它的hash值。</p><h5 id="区块链数据结构"><a href="#区块链数据结构" class="headerlink" title="区块链数据结构"></a>区块链数据结构</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 区块链 &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/02/02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blockchain</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Block&gt; blockList;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Blockchain</span><span class="params">(List&lt;Block&gt; blockList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.blockList = blockList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="添加区块"><a href="#添加区块" class="headerlink" title="添加区块"></a>添加区块</h5><blockquote><p>新增一个添加区块链的方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 添加区块  &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data 数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBlock</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">   Block previousBlock = blockList.get(blockList.size() - <span class="number">1</span>);</span><br><span class="line">   <span class="keyword">this</span>.addBlock(Block.newBlock(previousBlock.getHash(), data));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 添加区块  &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> block 区块</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBlock</span><span class="params">(Block block)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.blockList.add(block);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="创世区块"><a href="#创世区块" class="headerlink" title="创世区块"></a>创世区块</h5><blockquote><p>在添加区块之前，区块链必须有个<code>创世区块</code>，在<code>Block</code>中新增创世区块方法：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * &lt;p&gt; 创建创世区块 &lt;/p&gt;</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Block <span class="title">newGenesisBlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> Block.newBlock(<span class="string">""</span>, <span class="string">"Genesis Block"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="创建区块链-1"><a href="#创建区块链-1" class="headerlink" title="创建区块链"></a>创建区块链</h5><blockquote><p>再在<code>Blockchain</code>中新增创建区块链的方法：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 创建区块链 &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Blockchain <span class="title">newBlockchain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Block&gt; blocks = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    blocks.add(Block.newGenesisBlock());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Blockchain(blocks);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试运行"><a href="#测试运行" class="headerlink" title="测试运行"></a>测试运行</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/02/05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockchainTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Blockchain blockchain = Blockchain.newBlockchain();</span><br><span class="line">        blockchain.addBlock(<span class="string">"Send 1 BTC to Ivan"</span>);</span><br><span class="line">        blockchain.addBlock(<span class="string">"Send 2 more BTC to Ivan"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Block block : blockchain.getBlockList()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Prev. hash: "</span> + block.getPreviousHash());</span><br><span class="line">            System.out.println(<span class="string">"Data: "</span> + block.getData());</span><br><span class="line">            System.out.println(<span class="string">"Hash: "</span> + block.getHash());</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出如下信息：</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Prev. hash: </span><br><span class="line">Data: Genesis Block</span><br><span class="line">Hash: <span class="number">4492</span>cb9d396a9a52e7ff17ef3782f022ddcdc7b2c276bc6dd3d448b0655eb3d4</span><br><span class="line"></span><br><span class="line">Prev. hash: <span class="number">4492</span>cb9d396a9a52e7ff17ef3782f022ddcdc7b2c276bc6dd3d448b0655eb3d4</span><br><span class="line">Data: Send <span class="number">1</span> BTC to Ivan</span><br><span class="line">Hash: cd716d59d98ad673035ab7035ece751718ea9842944a4743c298bebc0fe24c04</span><br><span class="line"></span><br><span class="line">Prev. hash: cd716d59d98ad673035ab7035ece751718ea9842944a4743c298bebc0fe24c04</span><br><span class="line">Data: Send <span class="number">2</span> more BTC to Ivan</span><br><span class="line">Hash: <span class="number">42f</span>78d6a86f88aa9b5b10e468494dfd1b3f558a9fb74a01eb348c2cbfc5d000a</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们构建了一个非常简单的区块链原型：它只是一个块的数组，每个块都与前一个块有连接。 实际的区块链要复杂得多。</p><ul><li>缺少交易信息：我们的区块链还没有任何交易信息。</li><li>缺少工作量证明：我们的生产区块非常简单快捷，实际的区块链中，生产一个区块需要进行大量的计算。</li><li>缺少共识机制：区块链是一个非单一决策者的分布式数据库。 因此，一个新的区块必须得到网络的其他参与者的确认和批</li></ul><p>在以后的文章中，我们将介绍这些功能。</p><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul><li>源代码：<a href="https://github.com/wangweiX/blockchain-java/tree/part1-Basic_Prototype" target="_blank" rel="noopener">https://github.com/wangweiX/blockchain-java/tree/part1-Basic_Prototype</a></li></ul><ul><li><a href="https://jeiwan.cc/posts/building-blockchain-in-go-part-1/" target="_blank" rel="noopener">https://jeiwan.cc/posts/building-blockchain-in-go-part-1/</a></li><li><a href="https://github.com/bitcoinbook/bitcoinbook" target="_blank" rel="noopener">《精通比特币（第二版）》</a></li></ul><p><img src="https://img.i7years.com/blog/blockchain_exploer.png" alt=""></p><blockquote><p><a href="https://press.one/file/v?s=e2926b487ace53de6e9defb2a68561220b8da974cf712dccf8f546c770e6df6813abeb96bdb49d4199858fa8e404959a8b07631fc0c9804787f45f816f8abef30&amp;h=f3625969fe71d4d0b31df504b7f7c8598c5617fcf92b54238f65fa666724022c&amp;a=23fe9bfd7ceef4b44c2ce44dcac8e4a49caf8026&amp;f=P1&amp;v=2" target="_blank" rel="noopener">https://press.one/file/v?s=e2926b487ace53de6e9defb2a68561220b8da974cf712dccf8f546c770e6df6813abeb96bdb49d4199858fa8e404959a8b07631fc0c9804787f45f816f8abef30&amp;h=f3625969fe71d4d0b31df504b7f7c8598c5617fcf92b54238f65fa666724022c&amp;a=23fe9bfd7ceef4b44c2ce44dcac8e4a49caf8026&amp;f=P1&amp;v=2</a></p></blockquote>]]></content>
      
        <categories>
            
            <category> blockchain </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> bitcoin </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Node.Js学习笔记]]></title>
      <url>/posts/learning-nodejs.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>Node.js 是我2018年计划学习的一门编程语言，学习一下JS异步编程与函数式编程的思想。</p><blockquote><p>项目地址：<a href="https://github.com/wangweiX/node.js-learning" target="_blank" rel="noopener">https://github.com/wangweiX/node.js-learning</a></p></blockquote><a id="more"></a><h2 id="Javascript-学习"><a href="#Javascript-学习" class="headerlink" title="Javascript 学习"></a>Javascript 学习</h2><ul><li><a href="https://github.com/wangweiX/node.js-learning/blob/master/JavaScript%E5%AD%A6%E4%B9%A0(1" target="_blank" rel="noopener">Variables</a>.md)</li><li><a href="https://github.com/wangweiX/node.js-learning/blob/master/JavaScript%E5%AD%A6%E4%B9%A0(2" target="_blank" rel="noopener">Operators</a>.md)</li><li><a href="https://github.com/wangweiX/node.js-learning/blob/master/JavaScript%E5%AD%A6%E4%B9%A0(3" target="_blank" rel="noopener">Primitive Data Type</a>.md)</li><li><a href="https://github.com/wangweiX/node.js-learning/blob/master/JavaScript%E5%AD%A6%E4%B9%A0(4" target="_blank" rel="noopener">Functions</a>.md)</li><li><a href="https://github.com/wangweiX/node.js-learning/blob/master/JavaScript%E5%AD%A6%E4%B9%A0(5" target="_blank" rel="noopener">Objects</a>.md)</li><li><a href="https://github.com/wangweiX/node.js-learning/blob/master/JavaScript%E5%AD%A6%E4%B9%A0(6" target="_blank" rel="noopener">Symbol Type</a>.md)</li><li><a href="https://github.com/wangweiX/node.js-learning/blob/master/JavaScript%E5%AD%A6%E4%B9%A0(7" target="_blank" rel="noopener">Array</a>.md)</li><li><a href="https://github.com/wangweiX/node.js-learning/blob/master/JavaScript%E5%AD%A6%E4%B9%A0(8" target="_blank" rel="noopener">Map,WeakMap,Set,WeakSet</a>.md)</li><li><a href="https://github.com/wangweiX/node.js-learning/blob/master/JavaScript%E5%AD%A6%E4%B9%A0(9" target="_blank" rel="noopener">Iterables</a>.md)</li><li><a href="https://github.com/wangweiX/node.js-learning/blob/master/JavaScript%E5%AD%A6%E4%B9%A0(10" target="_blank" rel="noopener">JSON</a>.md)</li><li><a href="https://github.com/wangweiX/node.js-learning/blob/master/JavaScript%E5%AD%A6%E4%B9%A0(11" target="_blank" rel="noopener">Date and time</a>.md)</li><li><a href="https://github.com/wangweiX/node.js-learning/blob/master/JavaScript%E5%AD%A6%E4%B9%A0(12" target="_blank" rel="noopener">Property flags and descriptors</a>.md)</li><li><a href="https://github.com/wangweiX/node.js-learning/blob/master/JavaScript%E5%AD%A6%E4%B9%A0(13" target="_blank" rel="noopener">Property getters and setters</a>.md)</li><li><a href="https://github.com/wangweiX/node.js-learning/blob/master/JavaScript%E5%AD%A6%E4%B9%A0(14" target="_blank" rel="noopener">Prototypal inheritance</a>.md)</li></ul><h2 id="Node-Js-学习"><a href="#Node-Js-学习" class="headerlink" title="Node.Js 学习"></a>Node.Js 学习</h2><ul><li><a href="https://github.com/wangweiX/node.js-learning/blob/master/NodeJs%E5%AD%A6%E4%B9%A0(1" target="_blank" rel="noopener">Build First Web Server</a>.md)</li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> NodeJs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[EOS学习(3) | EOS货币合约演示]]></title>
      <url>/posts/blockchain-eos-currency-smart-contract.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/eos-logo.jpg" alt=""></p><blockquote><p>本文演示如何创建账号、如何转账</p><p>官方文档：<a href="https://github.com/eosio/eos#example-currency-contract-walkthrough" target="_blank" rel="noopener">https://github.com/eosio/eos#example-currency-contract-walkthrough</a></p></blockquote><a id="more"></a><h3 id="启动EOSIO"><a href="#启动EOSIO" class="headerlink" title="启动EOSIO"></a>启动EOSIO</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/eos/build/programs/eosiod/</span><br><span class="line">$ ./eosiod</span><br></pre></td></tr></table></figure><h3 id="设置钱包并导入账户私钥"><a href="#设置钱包并导入账户私钥" class="headerlink" title="设置钱包并导入账户私钥"></a>设置钱包并导入账户私钥</h3><h5 id="创建钱包"><a href="#创建钱包" class="headerlink" title="创建钱包"></a>创建钱包</h5><blockquote><p>请确保你在启动<code>eosiod</code>之前，已经在<code>config.ini</code>中配置了钱包插件<code>plugin = eosio::wallet_api_plugin</code></p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/eos/build/programs/eosioc/</span><br><span class="line">$ ./eosioc wallet create -n wangwei </span><br><span class="line"><span class="comment"># 将在 ~/eos/build/programs/eosiod/data-dir/ 下生成一个名为wangwei的钱包文件 wangwei.wallet</span></span><br><span class="line"><span class="comment"># 不加 -n wangwei, 则会生成默认钱包文件，名为 default.wallet 文件</span></span><br></pre></td></tr></table></figure><h5 id="导入测试账号"><a href="#导入测试账号" class="headerlink" title="导入测试账号"></a>导入测试账号</h5><blockquote><p>将配置文件<code>config.ini</code>中给予的测试私钥导入到钱包中来，该私钥为测试账号<code>inita</code>的私钥</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入私钥 5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3 到 wangwei 这个钱包</span></span><br><span class="line">$ ./eosioc wallet import -n wangwei <span class="number">5</span>KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3</span><br></pre></td></tr></table></figure><h3 id="创建货币合约账号"><a href="#创建货币合约账号" class="headerlink" title="创建货币合约账号"></a>创建货币合约账号</h3><h5 id="创建两个密钥对"><a href="#创建两个密钥对" class="headerlink" title="创建两个密钥对"></a>创建两个密钥对</h5><blockquote><p>创建两个密钥对，后面会分别赋予<code>owner</code>权限和<code>active</code>权限</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/eos/build/programs/eosioc/</span><br><span class="line">$ ./eosioc create key <span class="comment"># PUBLIC_KEY_1，权限：owner_key</span></span><br><span class="line">$ ./eosioc create key <span class="comment"># PUBLIC_KEY_2，权限：active_key</span></span><br></pre></td></tr></table></figure><h5 id="创建一个新账号"><a href="#创建一个新账号" class="headerlink" title="创建一个新账号"></a>创建一个新账号</h5><blockquote><p>使用<code>inita</code>创建一个名为<code>currency</code>的账号，将上一步生成的PUBLIC_KEY_1配置为它的owner权限，PUBLIC_KEY_2配置为它的active权限</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">$ ./eosioc create account inita currency PUBLIC_KEY_1 PUBLIC_KEY_2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回信息</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"transaction_id"</span>: <span class="string">"c5294137c04aa29178eeebe17f457288163e6b6e3e10c36644ddf8382a6d067e"</span>,</span><br><span class="line">  <span class="string">"processed"</span>: &#123;</span><br><span class="line">    <span class="string">"status"</span>: <span class="string">"executed"</span>,</span><br><span class="line">    <span class="string">"id"</span>: <span class="string">"c5294137c04aa29178eeebe17f457288163e6b6e3e10c36644ddf8382a6d067e"</span>,</span><br><span class="line">    <span class="string">"action_traces"</span>: [</span><br><span class="line">      null,&#123;</span><br><span class="line">        <span class="string">"receiver"</span>: <span class="string">"eosio"</span>,</span><br><span class="line">        <span class="string">"act"</span>: &#123;</span><br><span class="line">          <span class="string">"account"</span>: <span class="string">"eosio"</span>,</span><br><span class="line">          <span class="string">"name"</span>: <span class="string">"newaccount"</span>,</span><br><span class="line">          <span class="string">"authorization"</span>: [&#123;</span><br><span class="line">              <span class="string">"actor"</span>: <span class="string">"inita"</span>,</span><br><span class="line">              <span class="string">"permission"</span>: <span class="string">"active"</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="string">"data"</span>: &#123;</span><br><span class="line">            <span class="string">"creator"</span>: <span class="string">"inita"</span>,</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"currency"</span>,</span><br><span class="line">            <span class="string">"owner"</span>: &#123;</span><br><span class="line">              <span class="string">"threshold"</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="string">"accounts"</span>: [],</span><br><span class="line">              <span class="string">"keys"</span>: [&#123;</span><br><span class="line">                  <span class="string">"key"</span>: <span class="string">"EOS6ayDacXRvP8ZdLW4LNHvRsPeBQBbzvtm7HSkBuyvnLEkAUpfsS"</span>,</span><br><span class="line">                  <span class="string">"weight"</span>: <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"active"</span>: &#123;</span><br><span class="line">              <span class="string">"threshold"</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="string">"accounts"</span>: [],</span><br><span class="line">              <span class="string">"keys"</span>: [&#123;</span><br><span class="line">                  <span class="string">"key"</span>: <span class="string">"EOS6VJWWuc6C5p75P2NMNyFM4wYRcAx41NXD1nW7EVdFMGFTejMhZ"</span>,</span><br><span class="line">                  <span class="string">"weight"</span>: <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"recovery"</span>: &#123;</span><br><span class="line">              <span class="string">"threshold"</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="string">"accounts"</span>: [&#123;</span><br><span class="line">                  <span class="string">"permission"</span>: &#123;</span><br><span class="line">                    <span class="string">"actor"</span>: <span class="string">"inita"</span>,</span><br><span class="line">                    <span class="string">"permission"</span>: <span class="string">"active"</span></span><br><span class="line">                  &#125;,</span><br><span class="line">                  <span class="string">"weight"</span>: <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">              ],</span><br><span class="line">              <span class="string">"keys"</span>: []</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"deposit"</span>: <span class="string">"1.0000 EOS"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">"hex_data"</span>: <span class="string">"000000000093dd740000001e4d75af460100000000010002df9ca0db36688723ca23b83a2c11679945598ed7ef4bbe2234a7bfae283e16fe01000100000000010002d2be4c48f289f51bd9afb6680679cd6955181aabc8324c4d6ce729f0db9e054a01000100000001000000000093dd7400000000a8ed3232010000102700000000000004454f5300000000"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"console"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"region_id"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">"cycle_index"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">"data_access"</span>: [&#123;</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"write"</span>,</span><br><span class="line">            <span class="string">"scope"</span>: <span class="string">"eosio.auth"</span>,</span><br><span class="line">            <span class="string">"sequence"</span>: <span class="number">21</span></span><br><span class="line">          &#125;,&#123;</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"write"</span>,</span><br><span class="line">            <span class="string">"scope"</span>: <span class="string">"inita"</span>,</span><br><span class="line">            <span class="string">"sequence"</span>: <span class="number">1</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"deferred_transactions"</span>: []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="查询新账户信息"><a href="#查询新账户信息" class="headerlink" title="查询新账户信息"></a>查询新账户信息</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">$ ./eosioc get account currency</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回信息：</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"account_name"</span>: <span class="string">"currency"</span>,</span><br><span class="line">  <span class="string">"eos_balance"</span>: <span class="string">"0.0000 EOS"</span>,</span><br><span class="line">  <span class="string">"staked_balance"</span>: <span class="string">"1.0000 EOS"</span>,</span><br><span class="line">  <span class="string">"unstaking_balance"</span>: <span class="string">"0.0000 EOS"</span>,</span><br><span class="line">  <span class="string">"last_unstaking_time"</span>: <span class="string">"2035-10-29T06:32:22"</span>,</span><br><span class="line">  <span class="string">"permissions"</span>: [&#123;</span><br><span class="line">      <span class="string">"perm_name"</span>: <span class="string">"active"</span>,</span><br><span class="line">      <span class="string">"parent"</span>: <span class="string">"owner"</span>,</span><br><span class="line">      <span class="string">"required_auth"</span>: &#123;</span><br><span class="line">        <span class="string">"threshold"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">"accounts"</span>: [],</span><br><span class="line">        <span class="string">"keys"</span>: [&#123;</span><br><span class="line">            <span class="string">"key"</span>: <span class="string">"EOS6VJWWuc6C5p75P2NMNyFM4wYRcAx41NXD1nW7EVdFMGFTejMhZ"</span>,</span><br><span class="line">            <span class="string">"weight"</span>: <span class="number">1</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      <span class="string">"perm_name"</span>: <span class="string">"owner"</span>,</span><br><span class="line">      <span class="string">"parent"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="string">"required_auth"</span>: &#123;</span><br><span class="line">        <span class="string">"threshold"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">"accounts"</span>: [],</span><br><span class="line">        <span class="string">"keys"</span>: [&#123;</span><br><span class="line">            <span class="string">"key"</span>: <span class="string">"EOS6ayDacXRvP8ZdLW4LNHvRsPeBQBbzvtm7HSkBuyvnLEkAUpfsS"</span>,</span><br><span class="line">            <span class="string">"weight"</span>: <span class="number">1</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="导入前面生成的activite权限的私钥"><a href="#导入前面生成的activite权限的私钥" class="headerlink" title="导入前面生成的activite权限的私钥"></a>导入前面生成的activite权限的私钥</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./eosioc wallet import -n wangwei XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</span><br></pre></td></tr></table></figure><blockquote><p>EOS 几个密钥的特点</p><blockquote><p>公钥以<code>EOS</code>打头</p><p>私钥以<code>5</code>打头</p><p>钱包密钥以<code>PW</code>打头</p></blockquote></blockquote><h3 id="上传样例合约到区块链上"><a href="#上传样例合约到区块链上" class="headerlink" title="上传样例合约到区块链上"></a>上传样例合约到区块链上</h3><h5 id="检查currency账号是否已经存在合约"><a href="#检查currency账号是否已经存在合约" class="headerlink" title="检查currency账号是否已经存在合约"></a>检查<code>currency</code>账号是否已经存在合约</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ./eosioc get code currency</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回信息如下</span></span><br><span class="line">code hash: <span class="number">0000000000000000000000000000000000000000000000000000000000000000</span></span><br></pre></td></tr></table></figure><h5 id="使用currency账号上传合约"><a href="#使用currency账号上传合约" class="headerlink" title="使用currency账号上传合约"></a>使用<code>currency</code>账号上传合约</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line">$ ./eosioc set contract currency ../../contracts/currency/currency.wast ../../contracts/currency/currency.abi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回信息</span></span><br><span class="line">Reading WAST...</span><br><span class="line">Assembling WASM...</span><br><span class="line">Publishing contract...</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"transaction_id"</span>: <span class="string">"7566cf7ddbce99f64690c0a4d22577d0ee8154b7579be135b9e797356ea8cda1"</span>,</span><br><span class="line">  <span class="string">"processed"</span>: &#123;</span><br><span class="line">    <span class="string">"status"</span>: <span class="string">"executed"</span>,</span><br><span class="line">    <span class="string">"id"</span>: <span class="string">"7566cf7ddbce99f64690c0a4d22577d0ee8154b7579be135b9e797356ea8cda1"</span>,</span><br><span class="line">    <span class="string">"action_traces"</span>: [</span><br><span class="line">      null,</span><br><span class="line">      null,</span><br><span class="line">      null,&#123;</span><br><span class="line">        <span class="string">"receiver"</span>: <span class="string">"eosio"</span>,</span><br><span class="line">        <span class="string">"act"</span>: &#123;</span><br><span class="line">          <span class="string">"account"</span>: <span class="string">"eosio"</span>,</span><br><span class="line">          <span class="string">"name"</span>: <span class="string">"setcode"</span>,</span><br><span class="line">          <span class="string">"authorization"</span>: [&#123;</span><br><span class="line">              <span class="string">"actor"</span>: <span class="string">"currency"</span>,</span><br><span class="line">              <span class="string">"permission"</span>: <span class="string">"active"</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="string">"data"</span>: &#123;</span><br><span class="line">            <span class="string">"account"</span>: <span class="string">"currency"</span>,</span><br><span class="line">            <span class="string">"vmtype"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">"vmversion"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">"code"</span>: <span class="string">""</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">"hex_data"</span>: <span class="string">""</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"console"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"region_id"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">"cycle_index"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">"data_access"</span>: [&#123;</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"write"</span>,</span><br><span class="line">            <span class="string">"scope"</span>: <span class="string">"eosio.auth"</span>,</span><br><span class="line">            <span class="string">"sequence"</span>: <span class="number">22</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,&#123;</span><br><span class="line">        <span class="string">"receiver"</span>: <span class="string">"currency"</span>,</span><br><span class="line">        <span class="string">"act"</span>: &#123;</span><br><span class="line">          <span class="string">"account"</span>: <span class="string">"eosio"</span>,</span><br><span class="line">          <span class="string">"name"</span>: <span class="string">"setcode"</span>,</span><br><span class="line">          <span class="string">"authorization"</span>: [&#123;</span><br><span class="line">              <span class="string">"actor"</span>: <span class="string">"currency"</span>,</span><br><span class="line">              <span class="string">"permission"</span>: <span class="string">"active"</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="string">"data"</span>: &#123;</span><br><span class="line">            <span class="string">"account"</span>: <span class="string">"currency"</span>,</span><br><span class="line">            <span class="string">"vmtype"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">"vmversion"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">"code"</span>: <span class="string">""</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">"hex_data"</span>: <span class="string">""</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"console"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"region_id"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">"cycle_index"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">"data_access"</span>: []</span><br><span class="line">      &#125;,&#123;</span><br><span class="line">        <span class="string">"receiver"</span>: <span class="string">"eosio"</span>,</span><br><span class="line">        <span class="string">"act"</span>: &#123;</span><br><span class="line">          <span class="string">"account"</span>: <span class="string">"eosio"</span>,</span><br><span class="line">          <span class="string">"name"</span>: <span class="string">"setabi"</span>,</span><br><span class="line">          <span class="string">"authorization"</span>: [&#123;</span><br><span class="line">              <span class="string">"actor"</span>: <span class="string">"currency"</span>,</span><br><span class="line">              <span class="string">"permission"</span>: <span class="string">"active"</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="string">"data"</span>: &#123;</span><br><span class="line">            <span class="string">"account"</span>: <span class="string">"currency"</span>,</span><br><span class="line">            <span class="string">"abi"</span>: &#123;</span><br><span class="line">              <span class="string">"types"</span>: [&#123;</span><br><span class="line">                  <span class="string">"new_type_name"</span>: <span class="string">"account_name"</span>,</span><br><span class="line">                  <span class="string">"type"</span>: <span class="string">"name"</span></span><br><span class="line">                &#125;</span><br><span class="line">              ],</span><br><span class="line">              <span class="string">"structs"</span>: [&#123;</span><br><span class="line">                  <span class="string">"name"</span>: <span class="string">"transfer"</span>,</span><br><span class="line">                  <span class="string">"base"</span>: <span class="string">""</span>,</span><br><span class="line">                  <span class="string">"fields"</span>: [&#123;</span><br><span class="line">                      <span class="string">"name"</span>: <span class="string">"from"</span>,</span><br><span class="line">                      <span class="string">"type"</span>: <span class="string">"account_name"</span></span><br><span class="line">                    &#125;,&#123;</span><br><span class="line">                      <span class="string">"name"</span>: <span class="string">"to"</span>,</span><br><span class="line">                      <span class="string">"type"</span>: <span class="string">"account_name"</span></span><br><span class="line">                    &#125;,&#123;</span><br><span class="line">                      <span class="string">"name"</span>: <span class="string">"quantity"</span>,</span><br><span class="line">                      <span class="string">"type"</span>: <span class="string">"asset"</span></span><br><span class="line">                    &#125;,&#123;</span><br><span class="line">                      <span class="string">"name"</span>: <span class="string">"memo"</span>,</span><br><span class="line">                      <span class="string">"type"</span>: <span class="string">"string"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;,&#123;</span><br><span class="line">                  <span class="string">"name"</span>: <span class="string">"issue"</span>,</span><br><span class="line">                  <span class="string">"base"</span>: <span class="string">""</span>,</span><br><span class="line">                  <span class="string">"fields"</span>: [&#123;</span><br><span class="line">                      <span class="string">"name"</span>: <span class="string">"to"</span>,</span><br><span class="line">                      <span class="string">"type"</span>: <span class="string">"account_name"</span></span><br><span class="line">                    &#125;,&#123;</span><br><span class="line">                      <span class="string">"name"</span>: <span class="string">"quantity"</span>,</span><br><span class="line">                      <span class="string">"type"</span>: <span class="string">"asset"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;,&#123;</span><br><span class="line">                  <span class="string">"name"</span>: <span class="string">"account"</span>,</span><br><span class="line">                  <span class="string">"base"</span>: <span class="string">""</span>,</span><br><span class="line">                  <span class="string">"fields"</span>: [&#123;</span><br><span class="line">                      <span class="string">"name"</span>: <span class="string">"currency"</span>,</span><br><span class="line">                      <span class="string">"type"</span>: <span class="string">"uint64"</span></span><br><span class="line">                    &#125;,&#123;</span><br><span class="line">                      <span class="string">"name"</span>: <span class="string">"balance"</span>,</span><br><span class="line">                      <span class="string">"type"</span>: <span class="string">"uint64"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;,&#123;</span><br><span class="line">                  <span class="string">"name"</span>: <span class="string">"currency_stats"</span>,</span><br><span class="line">                  <span class="string">"base"</span>: <span class="string">""</span>,</span><br><span class="line">                  <span class="string">"fields"</span>: [&#123;</span><br><span class="line">                      <span class="string">"name"</span>: <span class="string">"currency"</span>,</span><br><span class="line">                      <span class="string">"type"</span>: <span class="string">"uint64"</span></span><br><span class="line">                    &#125;,&#123;</span><br><span class="line">                      <span class="string">"name"</span>: <span class="string">"supply"</span>,</span><br><span class="line">                      <span class="string">"type"</span>: <span class="string">"uint64"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;</span><br><span class="line">              ],</span><br><span class="line">              <span class="string">"actions"</span>: [&#123;</span><br><span class="line">                  <span class="string">"name"</span>: <span class="string">"transfer"</span>,</span><br><span class="line">                  <span class="string">"type"</span>: <span class="string">"transfer"</span></span><br><span class="line">                &#125;,&#123;</span><br><span class="line">                  <span class="string">"name"</span>: <span class="string">"issue"</span>,</span><br><span class="line">                  <span class="string">"type"</span>: <span class="string">"issue"</span></span><br><span class="line">                &#125;</span><br><span class="line">              ],</span><br><span class="line">              <span class="string">"tables"</span>: [&#123;</span><br><span class="line">                  <span class="string">"name"</span>: <span class="string">"account"</span>,</span><br><span class="line">                  <span class="string">"index_type"</span>: <span class="string">"i64"</span>,</span><br><span class="line">                  <span class="string">"key_names"</span>: [</span><br><span class="line">                    <span class="string">"currency"</span></span><br><span class="line">                  ],</span><br><span class="line">                  <span class="string">"key_types"</span>: [</span><br><span class="line">                    <span class="string">"uint64"</span></span><br><span class="line">                  ],</span><br><span class="line">                  <span class="string">"type"</span>: <span class="string">"account"</span></span><br><span class="line">                &#125;,&#123;</span><br><span class="line">                  <span class="string">"name"</span>: <span class="string">"stat"</span>,</span><br><span class="line">                  <span class="string">"index_type"</span>: <span class="string">"i64"</span>,</span><br><span class="line">                  <span class="string">"key_names"</span>: [</span><br><span class="line">                    <span class="string">"currency"</span></span><br><span class="line">                  ],</span><br><span class="line">                  <span class="string">"key_types"</span>: [</span><br><span class="line">                    <span class="string">"uint64"</span></span><br><span class="line">                  ],</span><br><span class="line">                  <span class="string">"type"</span>: <span class="string">"currency_stats"</span></span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">"hex_data"</span>: <span class="string">"0000001e4d75af46010c6163636f756e745f6e616d65046e616d6504087472616e7366657200040466726f6d0c6163636f756e745f6e616d6502746f0c6163636f756e745f6e616d65087175616e74697479056173736574046d656d6f06737472696e67056973737565000202746f0c6163636f756e745f6e616d65087175616e74697479056173736574076163636f756e7400020863757272656e63790675696e7436340762616c616e63650675696e7436340e63757272656e63795f737461747300020863757272656e63790675696e74363406737570706c790675696e74363402000000572d3ccdcd087472616e736665720000000000a5317605697373756502000000204f4d113203693634010863757272656e6379010675696e743634076163636f756e740000000000904dc603693634010863757272656e6379010675696e7436340e63757272656e63795f7374617473"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"console"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"region_id"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">"cycle_index"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">"data_access"</span>: []</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"deferred_transactions"</span>: []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="再次检查currency账号合约编号"><a href="#再次检查currency账号合约编号" class="headerlink" title="再次检查currency账号合约编号"></a>再次检查<code>currency</code>账号合约编号</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ./eosioc get code currency</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回如下信息</span></span><br><span class="line">code hash: <span class="number">135</span>bb95927600a21dcc701223a107215e3b25cb19b196e0c38fa7d7f2082c869</span><br></pre></td></tr></table></figure><h5 id="发行货币"><a href="#发行货币" class="headerlink" title="发行货币"></a>发行货币</h5><blockquote><p>在使用货币合约之前，你必须先发行货币</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">$ ./eosioc push action currency issue <span class="string">'&#123;"to":"currency","quantity":"1000.0000 CUR"&#125;'</span> --permission currency@active</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回如下信息</span></span><br><span class="line"><span class="number">2347850</span>ms thread-<span class="number">0</span>   main.cpp:<span class="number">1149</span>                 operator()           ] Converting argument to binary...</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"transaction_id"</span>: <span class="string">"afd44bfce56e8f96eecf6075f7d98e8b573ca318e158002f0abc83489bcb46fb"</span>,</span><br><span class="line">  <span class="string">"processed"</span>: &#123;</span><br><span class="line">    <span class="string">"status"</span>: <span class="string">"executed"</span>,</span><br><span class="line">    <span class="string">"id"</span>: <span class="string">"afd44bfce56e8f96eecf6075f7d98e8b573ca318e158002f0abc83489bcb46fb"</span>,</span><br><span class="line">    <span class="string">"action_traces"</span>: [</span><br><span class="line">      null,</span><br><span class="line">      null,&#123;</span><br><span class="line">        <span class="string">"receiver"</span>: <span class="string">"currency"</span>,</span><br><span class="line">        <span class="string">"act"</span>: &#123;</span><br><span class="line">          <span class="string">"account"</span>: <span class="string">"currency"</span>,</span><br><span class="line">          <span class="string">"name"</span>: <span class="string">"issue"</span>,</span><br><span class="line">          <span class="string">"authorization"</span>: [&#123;</span><br><span class="line">              <span class="string">"actor"</span>: <span class="string">"currency"</span>,</span><br><span class="line">              <span class="string">"permission"</span>: <span class="string">"active"</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="string">"data"</span>: &#123;</span><br><span class="line">            <span class="string">"to"</span>: <span class="string">"currency"</span>,</span><br><span class="line">            <span class="string">"quantity"</span>: <span class="string">"1000.0000 CUR"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">"hex_data"</span>: <span class="string">"0000001e4d75af4680969800000000000443555200000000"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"console"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"region_id"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">"cycle_index"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">"data_access"</span>: [&#123;</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"write"</span>,</span><br><span class="line">            <span class="string">"scope"</span>: <span class="string">"currency"</span>,</span><br><span class="line">            <span class="string">"sequence"</span>: <span class="number">0</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,&#123;</span><br><span class="line">        <span class="string">"receiver"</span>: <span class="string">"currency"</span>,</span><br><span class="line">        <span class="string">"act"</span>: &#123;</span><br><span class="line">          <span class="string">"account"</span>: <span class="string">"currency"</span>,</span><br><span class="line">          <span class="string">"name"</span>: <span class="string">"transfer"</span>,</span><br><span class="line">          <span class="string">"authorization"</span>: [&#123;</span><br><span class="line">              <span class="string">"actor"</span>: <span class="string">"currency"</span>,</span><br><span class="line">              <span class="string">"permission"</span>: <span class="string">"active"</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="string">"data"</span>: &#123;</span><br><span class="line">            <span class="string">"from"</span>: <span class="string">"currency"</span>,</span><br><span class="line">            <span class="string">"to"</span>: <span class="string">"currency"</span>,</span><br><span class="line">            <span class="string">"quantity"</span>: <span class="string">"1000.0000 CUR"</span>,</span><br><span class="line">            <span class="string">"memo"</span>: <span class="string">""</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">"hex_data"</span>: <span class="string">"0000001e4d75af460000001e4d75af468096980000000000044355520000000000"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"console"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"region_id"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">"cycle_index"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">"data_access"</span>: [&#123;</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"write"</span>,</span><br><span class="line">            <span class="string">"scope"</span>: <span class="string">"currency"</span>,</span><br><span class="line">            <span class="string">"sequence"</span>: <span class="number">1</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"deferred_transactions"</span>: []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="检查货币合约的初始余额"><a href="#检查货币合约的初始余额" class="headerlink" title="检查货币合约的初始余额"></a>检查货币合约的初始余额</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ ./eosioc get table currency currency account</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"rows"</span>: [&#123;</span><br><span class="line">     <span class="string">"currency"</span>: <span class="number">1381319428</span>,</span><br><span class="line">     <span class="string">"balance"</span>: <span class="number">10000000</span></span><br><span class="line">     &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"more"</span>: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用样本“货币”合约转移资金"><a href="#用样本“货币”合约转移资金" class="headerlink" title="用样本“货币”合约转移资金"></a>用样本“货币”合约转移资金</h3><p>理论上，任何人在任何时间可以任何合约发送任意的消息，但是如果没有给予相应的权限的话，合约会拒绝接受该消息。消息的发送必须依赖一定的权限才能发送。</p><p>如下示例，使用<code>currency</code>账号的<code>active</code>权限向账户<code>inita</code>转移<code>20CUR</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">$ ./eosioc push action currency transfer <span class="string">'&#123;"from":"currency","to":"inita","quantity":"20.0000 CUR","memo":"my first transfer"&#125;'</span> --permission currency@active</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回信息</span></span><br><span class="line"><span class="number">2646382</span>ms thread-<span class="number">0</span>   main.cpp:<span class="number">1149</span>                 operator()           ] Converting argument to binary...</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"transaction_id"</span>: <span class="string">"740bc3ed54ba251a0abaf32dd46e2b80f5187acc788881ea52550702ba84a23a"</span>,</span><br><span class="line">  <span class="string">"processed"</span>: &#123;</span><br><span class="line">    <span class="string">"status"</span>: <span class="string">"executed"</span>,</span><br><span class="line">    <span class="string">"id"</span>: <span class="string">"740bc3ed54ba251a0abaf32dd46e2b80f5187acc788881ea52550702ba84a23a"</span>,</span><br><span class="line">    <span class="string">"action_traces"</span>: [</span><br><span class="line">      null,</span><br><span class="line">      null,&#123;</span><br><span class="line">        <span class="string">"receiver"</span>: <span class="string">"currency"</span>,</span><br><span class="line">        <span class="string">"act"</span>: &#123;</span><br><span class="line">          <span class="string">"account"</span>: <span class="string">"currency"</span>,</span><br><span class="line">          <span class="string">"name"</span>: <span class="string">"transfer"</span>,</span><br><span class="line">          <span class="string">"authorization"</span>: [&#123;</span><br><span class="line">              <span class="string">"actor"</span>: <span class="string">"currency"</span>,</span><br><span class="line">              <span class="string">"permission"</span>: <span class="string">"active"</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="string">"data"</span>: &#123;</span><br><span class="line">            <span class="string">"from"</span>: <span class="string">"currency"</span>,</span><br><span class="line">            <span class="string">"to"</span>: <span class="string">"inita"</span>,</span><br><span class="line">            <span class="string">"quantity"</span>: <span class="string">"20.0000 CUR"</span>,</span><br><span class="line">            <span class="string">"memo"</span>: <span class="string">"my first transfer"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">"hex_data"</span>: <span class="string">"0000001e4d75af46000000000093dd74400d0300000000000443555200000000116d79206669727374207472616e73666572"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"console"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"region_id"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">"cycle_index"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">"data_access"</span>: [&#123;</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"write"</span>,</span><br><span class="line">            <span class="string">"scope"</span>: <span class="string">"currency"</span>,</span><br><span class="line">            <span class="string">"sequence"</span>: <span class="number">2</span></span><br><span class="line">          &#125;,&#123;</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"write"</span>,</span><br><span class="line">            <span class="string">"scope"</span>: <span class="string">"inita"</span>,</span><br><span class="line">            <span class="string">"sequence"</span>: <span class="number">0</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,&#123;</span><br><span class="line">        <span class="string">"receiver"</span>: <span class="string">"inita"</span>,</span><br><span class="line">        <span class="string">"act"</span>: &#123;</span><br><span class="line">          <span class="string">"account"</span>: <span class="string">"currency"</span>,</span><br><span class="line">          <span class="string">"name"</span>: <span class="string">"transfer"</span>,</span><br><span class="line">          <span class="string">"authorization"</span>: [&#123;</span><br><span class="line">              <span class="string">"actor"</span>: <span class="string">"currency"</span>,</span><br><span class="line">              <span class="string">"permission"</span>: <span class="string">"active"</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="string">"data"</span>: &#123;</span><br><span class="line">            <span class="string">"from"</span>: <span class="string">"currency"</span>,</span><br><span class="line">            <span class="string">"to"</span>: <span class="string">"inita"</span>,</span><br><span class="line">            <span class="string">"quantity"</span>: <span class="string">"20.0000 CUR"</span>,</span><br><span class="line">            <span class="string">"memo"</span>: <span class="string">"my first transfer"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">"hex_data"</span>: <span class="string">"0000001e4d75af46000000000093dd74400d0300000000000443555200000000116d79206669727374207472616e73666572"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"console"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"region_id"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">"cycle_index"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">"data_access"</span>: []</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"deferred_transactions"</span>: []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="读取样例货币合约账户余额"><a href="#读取样例货币合约账户余额" class="headerlink" title="读取样例货币合约账户余额"></a>读取样例货币合约账户余额</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  查询 inita 余额</span></span><br><span class="line">$ ./eosioc get table inita currency account</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"rows"</span>: [&#123;</span><br><span class="line">      <span class="string">"currency"</span>: <span class="number">1381319428</span>,</span><br><span class="line">      <span class="string">"balance"</span>: <span class="number">200000</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"more"</span>: false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#  查询 currency 余额</span></span><br><span class="line">$ ./eosioc get table currency currency account</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"rows"</span>: [&#123;</span><br><span class="line">      <span class="string">"currency"</span>: <span class="number">1381319428</span>,</span><br><span class="line">      <span class="string">"balance"</span>: <span class="number">9800000</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"more"</span>: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.i7years.com/blog/blockchain_exploer.png" alt=""></p>]]></content>
      
        <categories>
            
            <category> blockchain </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> eos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[由浅入深学习EOS]]></title>
      <url>/posts/learning-eos-develop.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/eos-logo.jpg" alt="eos-logo"></p><p>带你系统性地、由浅入深地学习和了解EOS相关技术……</p><a id="more"></a><h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><ul><li><p>需要对<code>区块链</code>有个基本的认识，比如什么是区块链，有哪些特点等等，网上资料很多。</p></li><li><p>对<code>比特币</code>的工作原理有一个深入的研究，推荐《精通比特币》第二版，一定要精读。</p></li><li><p>对<code>以太坊</code>、<code>智能合约</code>有所了解。</p></li></ul><h1 id="初识EOS"><a href="#初识EOS" class="headerlink" title="初识EOS"></a>初识EOS</h1><ul><li><p>熟读EOS白皮书，这一块后面我会写一些EOS白皮书解读版出来。</p><blockquote><p>白皮书地址：<a href="https://github.com/EOSIO/Documentation" target="_blank" rel="noopener">https://github.com/EOSIO/Documentation</a></p></blockquote></li><li><p><a href="https://wangwei.one/posts/57dd6237.html">EOS术语表</a></p></li></ul><h1 id="部署运行EOS"><a href="#部署运行EOS" class="headerlink" title="部署运行EOS"></a>部署运行EOS</h1><ol><li><a href="https://wangwei.one/posts/181733fc.html">运行EOS源代码（一）</a></li><li><a href="https://wangwei.one/posts/b726a89e.html">运行EOS源代码（二）</a></li><li><a href="https://wangwei.one/posts/81ba25e.html">EOS Programs &amp; Tools 介绍</a></li><li><a href="https://wangwei.one/posts/869983fd.html">EOS货币合约演示</a></li><li><a href="https://wangwei.one/posts/88eff102.html">连接EOS公共测试网络</a></li></ol><p><img src="https://img.i7years.com/blog/blockchain_exploer.png" alt=""></p>]]></content>
      
        <categories>
            
            <category> blockchain </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> eos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[连接EOS公共测试网络]]></title>
      <url>/posts/blockchain-eos-connect-public-network.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/eos-logo.jpg" alt="eos-logo"></p><blockquote><p>本文介绍如何将自己的本地测试网络连接到EOS公共测试网络(Public Testnet)上。</p><p>官方文档：<a href="https://github.com/EOSIO/eos/wiki/Testnet%3A%20Public" target="_blank" rel="noopener">https://github.com/EOSIO/eos/wiki/Testnet%3A%20Public</a></p></blockquote><a id="more"></a><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>本地已经能够正常运行起了EOS的测试网络。如有问题，可参考这篇文档：<a href="https://wangwei.one/posts/181733fc.html">运行EOS源代码（一）</a></p><h1 id="公共测试网络端点-Public-Testnet-Endpoints"><a href="#公共测试网络端点-Public-Testnet-Endpoints" class="headerlink" title="公共测试网络端点(Public Testnet Endpoints)"></a>公共测试网络端点(Public Testnet Endpoints)</h1><p>现在可以通过以下几种方式去访问EOS Public Testnet Endpoints</p><ul><li>HTTP Endpoint: <code>testnet1.eos.io</code></li><li>P2P Endpoint: <code>p2p-testnet1.eos.io:9876</code></li><li>Web Wallet Endpoint: <code>t1wallet.eos.io</code>, <code>t1api.eos.io</code>, <code>t1readonly.eos.io</code></li></ul><p>通过浏览器或者终端命令行<code>crul</code>访问<code>testnet1.eos.io/v1/chain/get_info</code>,获得测试链信息</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl testnet1.eos.io/v1/chain/get_info</span><br></pre></td></tr></table></figure><p><img src="https://img.i7years.com/blog/WX20180122-193329.png" alt=""></p><h1 id="将本地EOSD-EOS服务端-连接到公共测试网络上"><a href="#将本地EOSD-EOS服务端-连接到公共测试网络上" class="headerlink" title="将本地EOSD(EOS服务端)连接到公共测试网络上"></a>将本地EOSD(EOS服务端)连接到公共测试网络上</h1><h4 id="修改配置文件config-ini"><a href="#修改配置文件config-ini" class="headerlink" title="修改配置文件config.ini"></a>修改配置文件config.ini</h4><ul><li><p>路径：<code>~/eos/build/scripts/testnet_np/config.ini</code></p></li><li><p>将配置项<code>p2p-server-address</code>中的<code>localhost</code>改为你当前网络的<code>公网Ip地址</code>，否则后面运行时会出现如下错误：</p><blockquote><p>公网Ip查询：直接百度，输入IP，即可查询</p></blockquote></li></ul><p><img src="https://img.i7years.com/blog/photo_2018-01-22_19-41-09.jpg" alt=""></p><h4 id="执行脚本"><a href="#执行脚本" class="headerlink" title="执行脚本"></a>执行脚本</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行公共测试网络连接脚本</span></span><br><span class="line">$ cd ~/eos/build/scripts</span><br><span class="line">$ ./start_npnode.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志输出</span></span><br><span class="line">Launched eosd.</span><br><span class="line">See testnet_np/stderr.txt <span class="keyword">for</span> eosd output.</span><br><span class="line">Synching requires at least <span class="number">8</span> minutes, depending on network conditions.</span><br></pre></td></tr></table></figure><h4 id="查询区块同步日志"><a href="#查询区块同步日志" class="headerlink" title="查询区块同步日志"></a>查询区块同步日志</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tail -f testnet_np/stderr.txt</span><br></pre></td></tr></table></figure><p><img src="https://img.i7years.com/blog/WX20180122-194932@2x.png" alt=""></p><blockquote><p>看到 accept_block，Syncing Blockchain，表示本地正在从公共测试网络上同步区块信息。</p></blockquote><h1 id="使用EOSC客户端连接到公共测试网络上"><a href="#使用EOSC客户端连接到公共测试网络上" class="headerlink" title="使用EOSC客户端连接到公共测试网络上"></a>使用EOSC客户端连接到公共测试网络上</h1><h4 id="连接Public-Testnet"><a href="#连接Public-Testnet" class="headerlink" title="连接Public Testnet"></a>连接Public Testnet</h4><p>当<code>eosd</code>连接到了Public Testnet上时，再使用<code>eosc</code>连接到本地测试网络localhost:80即可</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ eosc -H $&#123;http_endpoint&#125; -p <span class="number">80</span> $&#123;options&#125; $&#123;subcommand&#125;</span><br></pre></td></tr></table></figure><h4 id="钱包功能使用"><a href="#钱包功能使用" class="headerlink" title="钱包功能使用"></a>钱包功能使用</h4><p>公共测试网络没有提供任何有关钱包的功能，为了能够对交易进行签名、发送交易信息以及进行相关的钱包操作，需要使用<code>eosc</code>连接到本地测试网络上并且要将 <code>eosd</code>连接到Public Testnet上时，这样才能进行相关钱包的操作。</p><h5 id="创建钱包"><a href="#创建钱包" class="headerlink" title="创建钱包"></a>创建钱包</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/eos/build/programs/eosc</span><br><span class="line">$ ./eosc wallet create</span><br></pre></td></tr></table></figure><p><img src="https://img.i7years.com/blog/WX20180124-231535@2x.png" alt=""></p><h5 id="创建密钥对"><a href="#创建密钥对" class="headerlink" title="创建密钥对"></a>创建密钥对</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/eos/build/programs/eosc</span><br><span class="line">$ ./eosc create key</span><br></pre></td></tr></table></figure><p><img src="https://img.i7years.com/blog/WX20180124-232320@2x.png" alt=""></p><h5 id="导入私钥"><a href="#导入私钥" class="headerlink" title="导入私钥"></a>导入私钥</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/eos/build/programs/eosc</span><br><span class="line">$ ./eosc wallet import <span class="number">5</span>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">imported private key <span class="keyword">for</span>: EOSxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br></pre></td></tr></table></figure><p><img src="https://img.i7years.com/blog/blockchain_exploer.png" alt=""></p>]]></content>
      
        <categories>
            
            <category> blockchain </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> eos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[EOS学习(2) | EOS Glossary]]></title>
      <url>/posts/blockchain-eos-glossary.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/eos-logo.jpg" alt="eos-logo"></p><blockquote><p>本文介绍和EOS相关的一些术语</p><p>官方文档：<a href="https://github.com/eosio/eos/wiki/Glossary" target="_blank" rel="noopener">https://github.com/eosio/eos/wiki/Glossary</a></p></blockquote><a id="more"></a><h2 id="Account-账户"><a href="#Account-账户" class="headerlink" title="Account(账户)"></a>Account(账户)</h2><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>An on-chain identifier made up of native and/or custom permissions that are assigned one or more keys or accounts.</p><blockquote><p>由本地和/或自定义权限组成的链上标识符，可以分配一个或多个密钥或者帐户。</p></blockquote><h2 id="Authority-权力"><a href="#Authority-权力" class="headerlink" title="Authority(权力)"></a>Authority(权力)</h2><h5 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h5><p>An abstract of permissions that represent how permissions are organized in reality that are bound to an individual or groups of individuals.</p><blockquote><p>代表现实世界中一个个体或者一群个体的权限组织方式的抽象定义。</p></blockquote><h2 id="Block-区块"><a href="#Block-区块" class="headerlink" title="Block(区块)"></a>Block(区块)</h2><h5 id="同义词"><a href="#同义词" class="headerlink" title="同义词"></a>同义词</h5><blockquote><p>Blk</p></blockquote><h5 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h5><p>A confirmable unit of the Blockchain. Each block contains zero or more Transactions, as well as a cryptographic connection to all prior blocks. When a block becomes “irreversibly confirmed” ，it’s because a supermajority of Block Producers have agreed that the given Block contains correct Transactions. Once a Block is irreversibly confirmed, it becomes a permanent part of the immutable Blockchain.</p><blockquote><p>区块链的可确认单位。 每个区块包含零笔或多笔交易，以及到先前所有区块的加密连接。 当绝对多数的区块生产者的一致同意该区块包含了正确的交易时， 这个区块就变成了“不可逆转地确认”。 一旦一个区块被不可逆转地确认，它就成为不可变更区块链的永久的一部分。</p></blockquote><h2 id="DAC-去中心化的自治团体或公司"><a href="#DAC-去中心化的自治团体或公司" class="headerlink" title="DAC(去中心化的自治团体或公司)"></a>DAC(去中心化的自治团体或公司)</h2><h5 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h5><p>Decentralized Autonomous Collective, or Decentralized Autonomous Corporation.</p><blockquote><p>去中心化的自治集体或去中心化的自治公司</p></blockquote><h2 id="DAO-去中心化自治组织"><a href="#DAO-去中心化自治组织" class="headerlink" title="DAO(去中心化自治组织)"></a>DAO(去中心化自治组织)</h2><h5 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h5><p>Decentralized Autonomous Organization.</p><blockquote><p>去中心化的自治组织</p></blockquote><h2 id="DPoS-授权股权证明机制"><a href="#DPoS-授权股权证明机制" class="headerlink" title="DPoS(授权股权证明机制)"></a>DPoS(授权股权证明机制)</h2><h5 id="定义-5"><a href="#定义-5" class="headerlink" title="定义"></a>定义</h5><p>Delegated Proof of Stake. Also, “Democracy as Proof of Stake.” DPoS is one of a collection of consensus algorithms, i.e. methods by which block producers can agree (reach consensus) on which transactions and which blocks are “real” and should be confirmed and treated as irreversible.</p><blockquote><p><strong>授权股权证明机制</strong>，也叫做”民主主义证明机制”。DPoS是共识算法集合中的一种，即选取哪些区块生产者可以同意（达成共识）哪些交易和哪些区块是“真实的”并且应该被确认和被视为不可逆的一种算法。</p></blockquote><h2 id="Key-pair-密钥对"><a href="#Key-pair-密钥对" class="headerlink" title="Key pair(密钥对)"></a>Key pair(密钥对)</h2><h5 id="同义词-1"><a href="#同义词-1" class="headerlink" title="同义词"></a>同义词</h5><blockquote><p>keys</p></blockquote><h5 id="定义-6"><a href="#定义-6" class="headerlink" title="定义"></a>定义</h5><p>A public key and its corresponding private key</p><blockquote><p>公钥以及和它对应的私钥</p></blockquote><h2 id="larimer-拉瑞默"><a href="#larimer-拉瑞默" class="headerlink" title="larimer(拉瑞默)"></a>larimer(拉瑞默)</h2><h5 id="定义-7"><a href="#定义-7" class="headerlink" title="定义"></a>定义</h5><p>1/10000 of an EOS (token) <code>0.0001 EOS</code></p><blockquote><p>1 EOS = 10000 larimer</p></blockquote><h2 id="Master-Password-主密码"><a href="#Master-Password-主密码" class="headerlink" title="Master Password(主密码)"></a>Master Password(主密码)</h2><h5 id="定义-8"><a href="#定义-8" class="headerlink" title="定义"></a>定义</h5><p>The password used to to unlock (decrypt) a wallet file</p><blockquote><p>用于解锁（解密）钱包文件的密码</p></blockquote><h2 id="Message-消息"><a href="#Message-消息" class="headerlink" title="Message(消息)"></a>Message(消息)</h2><h5 id="同义词-2"><a href="#同义词-2" class="headerlink" title="同义词"></a>同义词</h5><blockquote><p>Msg</p></blockquote><h5 id="定义-9"><a href="#定义-9" class="headerlink" title="定义"></a>定义</h5><p>A change to the Blockchain. One or more messages make up a Transaction.</p><blockquote><p>表示区块链的一种变化，一个或多个消息组成一笔交易.</p></blockquote><h2 id="Oracle-预言机"><a href="#Oracle-预言机" class="headerlink" title="Oracle(预言机)"></a>Oracle(预言机)</h2><h5 id="定义-10"><a href="#定义-10" class="headerlink" title="定义"></a>定义</h5><p>“An oracle, in the context of blockchains and smart contracts, is an agent that finds and verifies real-world occurrences and submits this information to a blockchain to be used by smart contracts.” <em><a href="https://blockchainhub.net/blockchain-oracles/" target="_blank" rel="noopener">Source</a></em></p><blockquote><p>在区块链和智能合约的背景下，预言机是一个能够发现和验证真实世界事件的代理，并将这些信息提交给智能合约使用的区块链。<a href="https://blockchainhub.net/blockchain-oracles/" target="_blank" rel="noopener">详情</a></p><blockquote><p>理解：预言机是智能合约获取外部信息的唯一途径。智能合约逻辑的触发需要信息源，没有提供外部信息的预言机，智能合约的实用性大打折扣</p></blockquote></blockquote><h2 id="Permission-权限"><a href="#Permission-权限" class="headerlink" title="Permission(权限)"></a>Permission(权限)</h2><h5 id="定义-11"><a href="#定义-11" class="headerlink" title="定义"></a>定义</h5><p>A weighted security mechanism that determines whether or not a message is properly authorized by evaluating its signature(s) authority</p><blockquote><p>一个加权的安全机制，通过评估其签名权限来确定一个消息是否被正确授权</p></blockquote><h2 id="Private-Key-私钥"><a href="#Private-Key-私钥" class="headerlink" title="Private Key(私钥)"></a>Private Key(私钥)</h2><h5 id="定义-12"><a href="#定义-12" class="headerlink" title="定义"></a>定义</h5><p>A secret key used to sign transactions</p><blockquote><p>用于签署交易的密钥</p></blockquote><h2 id="Public-Key-公钥"><a href="#Public-Key-公钥" class="headerlink" title="Public Key(公钥)"></a>Public Key(公钥)</h2><h5 id="同义词-3"><a href="#同义词-3" class="headerlink" title="同义词"></a>同义词</h5><blockquote><p>pub key</p></blockquote><h5 id="定义-13"><a href="#定义-13" class="headerlink" title="定义"></a>定义</h5><p>A publicly available key that is transmitted alongside a transaction.</p><blockquote><p>与交易一起传送的可公开使用的密钥</p></blockquote><h2 id="Smart-Contract-智能合约"><a href="#Smart-Contract-智能合约" class="headerlink" title="Smart Contract(智能合约)"></a>Smart Contract(智能合约)</h2><h5 id="定义-14"><a href="#定义-14" class="headerlink" title="定义"></a>定义</h5><p>A smart contract is a computer protocol intended to facilitate, verify, or enforce the negotiation or performance of a contract.</p><blockquote><p>智能合约是一种旨在促进、验证或执行判断或履行合同的计算机协议。</p></blockquote><h2 id="Transaction-交易"><a href="#Transaction-交易" class="headerlink" title="Transaction(交易)"></a>Transaction(交易)</h2><h5 id="同义词-4"><a href="#同义词-4" class="headerlink" title="同义词"></a>同义词</h5><blockquote><p>Tx, Txn</p></blockquote><h5 id="定义-15"><a href="#定义-15" class="headerlink" title="定义"></a>定义</h5><p>A complete all-or-nothing change to the Blockchain. A combination of one or more Messages. Usually, the execution of a Smart Contract.</p><blockquote><p>区块链上彻底的要么有要么无的变化。是一个或多个消息的组合。通常，用于智能合约的执行。</p></blockquote><h2 id="Wallet-钱包"><a href="#Wallet-钱包" class="headerlink" title="Wallet(钱包)"></a>Wallet(钱包)</h2><h5 id="定义-16"><a href="#定义-16" class="headerlink" title="定义"></a>定义</h5><p>An encrypted file generated and/or managed by a client (for example, <code>eosc</code>) that manages private keys and facilitates the signing of transactions in a secure manner. Wallets may be in a locked or unlocked state.</p><blockquote><p>由客户端（例如<code>eosc</code>）生成和/或管理的加密文件，用于管理私钥并便于以安全方式签署交易。 钱包可能处于锁定或解锁状态。</p></blockquote><h2 id="Witness-见证人"><a href="#Witness-见证人" class="headerlink" title="Witness(见证人)"></a>Witness(见证人)</h2><h5 id="同义词-5"><a href="#同义词-5" class="headerlink" title="同义词"></a>同义词</h5><blockquote><p>block producer(区块生产者)</p></blockquote><h5 id="定义-17"><a href="#定义-17" class="headerlink" title="定义"></a>定义</h5><p>The node that is currently taking its turn producing the “right now” block for the blockchain. Or, a member of the group of nodes who have been elected to take such turns. Synonymous with ‘block producer’.</p><blockquote><p>当前正在轮流为区块链生产“立即”区块的节点。 或者，被选为轮流节点组的组成成员之一。 与“区块生产者”同义。</p></blockquote><p><img src="https://img.i7years.com/blog/blockchain_exploer.png" alt=""></p>]]></content>
      
        <categories>
            
            <category> blockchain </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> eos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[全球区块链顶级会议Token Summit 2017一手信息解读]]></title>
      <url>/posts/blockchain-token-summit-2017.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote><p>以下内容均来自xdite老师的直播分享</p></blockquote><h1 id="Token-Summit-介绍"><a href="#Token-Summit-介绍" class="headerlink" title="Token Summit 介绍"></a>Token Summit 介绍</h1><h3 id="Token-Summit"><a href="#Token-Summit" class="headerlink" title="Token Summit"></a>Token Summit</h3><ul><li>全球区块链的顶级会议，是区块链行业里最具公信力的会议</li></ul><a id="more"></a><h3 id="会议主题"><a href="#会议主题" class="headerlink" title="会议主题"></a>会议主题</h3><ul><li><p>Token Summit I：Explored in-depth the Token-Based Economy.</p><blockquote><p>第一次会议主要深度探讨以代币为基础的数字经济。</p></blockquote></li><li><p>Token Summit II：Discuss the economics, regulation and practices around blockchain-based tokens, protocols, and crypto-assets. Focus on Designing Token-Based Economies, a key theme for this conference.</p><blockquote><p>第二次会议讨论基于区块链的代币，协议和加密资产的经济，法规和实践。重点关注设计令牌经济。</p></blockquote></li></ul><h3 id="主要的参与者"><a href="#主要的参与者" class="headerlink" title="主要的参与者"></a>主要的参与者</h3><ul><li>企业家、投资者、金融专业人士、律师、基金经理、监管者或商业主管等</li></ul><h3 id="价值"><a href="#价值" class="headerlink" title="价值"></a>价值</h3><ul><li>发掘潜在的创新思想，新的商业模式以及尚未被实施的商业点子</li></ul><h3 id="创始人"><a href="#创始人" class="headerlink" title="创始人"></a>创始人</h3><ul><li>William Mougayar</li><li>Twitter：<a href="https://twitter.com/wmougayar" target="_blank" rel="noopener">https://twitter.com/wmougayar</a></li><li>著作：<a href="https://www.amazon.com/Business-Blockchain-Practice-Application-Technology/dp/1119300312/ref=sr_1_1?ie=UTF8&amp;qid=1513312767&amp;sr=8-1&amp;keywords=The+Business+Blockchain" target="_blank" rel="noopener">《The Business Blockchain》</a> / <a href="https://www.amazon.cn/dp/B01M1EKNFA/ref=sr_1_1?ie=UTF8&amp;qid=1513306546&amp;sr=8-1&amp;keywords=%E5%95%86%E4%B8%9A%E5%8C%BA%E5%9D%97%E9%93%BE%C2%B7%E5%BC%80%E5%90%AF%E5%8A%A0%E5%AF%86%E7%BB%8F%E6%B5%8E%E6%96%B0" target="_blank" rel="noopener">《商业区块链·开启加密经济新时代》</a></li></ul><h3 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h3><ul><li>官网地址：<a href="http://tokensummit.com/" target="_blank" rel="noopener">http://tokensummit.com/</a></li><li>Youtube：<a href="https://www.youtube.com/channel/UClKay1eOR8D825wY5PBYFUA" target="_blank" rel="noopener">Token Summit Official YouTube Channel</a></li></ul><h1 id="分享内容"><a href="#分享内容" class="headerlink" title="分享内容"></a>分享内容</h1><h2 id="有趣的现象"><a href="#有趣的现象" class="headerlink" title="有趣的现象"></a>有趣的现象</h2><ul><li><p>Token Summit 一般是每5~6月举办一次，会议每次举办的时候币价都是上次的5倍，中间间隔大约5个月，目前连续15个月，币价连续涨 5 x 5 倍。</p><blockquote><p>我们可以预测5个月后的币价大概是多少(注意：这并不能作为你的投资建议，不要颠倒因果关系 ~ ^_^ ~)</p></blockquote></li></ul><h2 id="几个观点"><a href="#几个观点" class="headerlink" title="几个观点"></a>几个观点</h2><ul><li><p><strong>去现场参加conference，发掘最新的行业动态</strong>。领先世界的技术都是conference演讲上提到过的，所以追一些最新的技术，最好是到现场去看，特别是像区块链这样快速发展的技术。<strong>币圈一月，人间一年</strong>。当我们投资的东西有信息差时，一定要到现场去看，去感受行业现在的热度。</p></li><li><p><strong>牛市的判断方法</strong>，当你看到乱七八糟的小币都在涨的时候，那差不多就是趋近于牛市了，但是如果只有BTC在涨，那还算不上牛市。</p><blockquote><p>今年牛市的几个节点：2017年5月、2017年7月、2017年12月</p></blockquote></li><li><p>现在进场不算晚，<strong>一切才刚刚开始</strong>。最近参加会议，明显感受到现场的人，非常非常多，之前的 Token Summit 都是技术水平cutting edge(前沿、尖端)的人参加的，现在乱七八糟的Developer(开发者)都疯狂的涌入到了这个世界。</p><blockquote><p>以今年国内交易所关闭为分界线，之前算作是石器时代，之后的现在大概处于农业时代，现在有越来越多的资本、互联网正规军和很会做项目的人冲了进来，一切才刚刚开始，想要这这个区块链世界存活，一定要了解区块链世界的一些本质。</p></blockquote></li></ul><p><img src="https://img.i7years.com/blog/just_begin.jpg" alt="Everything is just beginning"></p><h2 id="什么是Token"><a href="#什么是Token" class="headerlink" title="什么是Token"></a>什么是Token</h2><p><strong>Token</strong>（代币）简而言之就是一个区块链项目里的价值符号。一般起到价值尺度、交易媒介，承担交易费用的作用。</p><h3 id="Token分类"><a href="#Token分类" class="headerlink" title="Token分类"></a>Token分类</h3><ul><li><p>Coins：多半由机构或政府发行，主要价值在于转移资金和储存价值，例如BTC。</p></li><li><p>Utility Tokens（工具类的代币）：发行方发行的用于某一个服务使用的媒介，像消耗品、手续费、使用权利。</p></li><li><p>Tokenize Security（代币化的证券）：依据Howey test（豪伊测试）原则，判断金融产品是否属于证券法规定的投资契约：</p><blockquote><ol><li>必须有金钱的投资 （investment of money）</li><li>资金必须投资于一个共同事业（common enterprise）</li><li>投资人有获利之期望（expectation of profit）</li><li>利润之有无，全然来自于他人的努力（solely from the efforts of others）</li></ol></blockquote></li></ul><h3 id="理解Token的重要性"><a href="#理解Token的重要性" class="headerlink" title="理解Token的重要性"></a>理解Token的重要性</h3><ul><li><p>很多人容易混淆<code>Utility Tokens</code>和<code>Tokenize Security</code></p></li><li><p>历史背景</p><blockquote><p>ICO 最早的形式是Token的无偿捐赠，后来衍生为有人期待这个捐赠有所回报，但是在设计回报的时候，这个回报就不小心设计成了<code>Tokenize Security</code>。所以，区分<code>Utility Tokens</code>和<code>Tokenize Security</code>非常重要，因为这会影响Token的实际价值和Token在各国的监管程度。</p></blockquote></li><li><p>最新的玩法（中国式的玩法）</p><ul><li><strong>用Token兑换Token</strong><ul><li>直接捐赠Token或者直接用法币购买Token都会法律风险；</li><li>Token是属于商品，用商品兑换商品并不太触犯法律。</li></ul></li><li><strong>Token回购</strong><ul><li>承诺Token会回报利润，就有可能变成Security，Security在各国都会被银监会、证监会或SCE监管。管不是问题，但是这反而会限制商业模型的发展。</li><li>拿利润去回购市面上的Token，然后把这些Token拿去销毁，销毁会导致价格的自然上涨，这样就可以避免Utility Tokens变成Tokenize Security。这也是目前Utility Tokens的主要发行方式。</li></ul></li></ul></li></ul><h3 id="Token的币价从何而来"><a href="#Token的币价从何而来" class="headerlink" title="Token的币价从何而来"></a>Token的币价从何而来</h3><ul><li><p>Token本身具有真正的价值</p><ul><li>Utility类的Token消耗过快，降低了Supply(供给)，导致价格上升；</li><li>本身具有承载价值，比如BTC和ETH，被拿来当转账的网络；</li><li>拿来当众筹的筹码，比如ETH、EOS</li><li>交易媒介，交易所发行的代币，例如BNB、QASH、Tether(USDT)。交易所为什么会发行Token呢？1）我们的资产存在交易所，需要一个避险的缓冲空间；2）各国的法币入口都有一定的危险；3）通过交易所发行的Token去兑换其他的Token，可以规避法律风险</li></ul></li><li><p>群众期待Token产生价值</p><ul><li>公司币。公司发行的Token。公司跟谁合作，群众会期待这个合作者会拉盘，会有一些利好。</li><li>社群币。比如像EOS、ETH，发布一些新的消息，比如改善性能、上主网、分叉，由于社群的消息利好，可能会造成短期价格拉升。</li></ul></li></ul><p><strong>投资币种的建议</strong></p><p>1）<strong>选择具有长期价值的币种</strong>。不管是消耗型的，还是承载价值，还是众筹，这些都可能让他的价值飞速增加。</p><p>2）<strong>选择社群币</strong>。公司币拉盘的效果有限，社群币有广大的开发者和合作商，人多力量大，消息面的传播会产生很大的拉盘效果。</p><p>3）<strong>一定要弄懂自己投资的品种，找到价值投资的根源所在</strong>。想要做长期的价值投资，一定要弄清楚我们投资的链、投资的代币的真正价值来自于哪里，是因为什么才产生价值，为什么币价会上涨。</p><h1 id="Token的合规化进展"><a href="#Token的合规化进展" class="headerlink" title="Token的合规化进展"></a>Token的合规化进展</h1><h2 id="ICO和Token市场的两种状况"><a href="#ICO和Token市场的两种状况" class="headerlink" title="ICO和Token市场的两种状况"></a>ICO和Token市场的两种状况</h2><ul><li><p>国外比较老实，倾向通过跟大的币所、合规的币所合作，将Token合规化。</p></li><li><p>国内比较倾向发明不同的玩法，绕过政府监管。</p><blockquote><p>绕过监管并不是不好的，规则并不是由法律规定的，而是在不影响大家共同利益的情况下所达成的一种集体共识。</p><p>如果过于遵守政府现有的法规，会导致效率降低，会阻碍行业发展步伐，世界得不到演化。</p><p>如果太绕规定，会导致区块链投资者面临巨大的风险。</p></blockquote></li></ul><h2 id="ICO为什么要合规化"><a href="#ICO为什么要合规化" class="headerlink" title="ICO为什么要合规化"></a>ICO为什么要合规化</h2><ul><li><p>政府需要保护本国的国民。用Token募集资金其实非常方便，但是这会让很多不合格的投资者直接面临巨大的投资风险。</p><blockquote><p>什么是合格投资人。具备相当程度的风险识别能力以及风险承担能力。简而言之，<strong>智商要高看得懂，有钱赔得起</strong>。</p></blockquote></li><li><p>另一方面，Token的发行商也不希望不明白价值投资的小散户随意冲进来，这会伤害经营生意的稳定性。比如，Telegram上每天都会看到有人催问啥时候上交易所啊，币价什么时候炒啊，什么时候升值啊。</p></li></ul><h2 id="国外ICO发行平台"><a href="#国外ICO发行平台" class="headerlink" title="国外ICO发行平台"></a>国外ICO发行平台</h2><h3 id="主要的平台"><a href="#主要的平台" class="headerlink" title="主要的平台"></a>主要的平台</h3><ul><li><a href="https://coinlist.co/" target="_blank" rel="noopener">CoinList</a></li><li><em>直布罗陀</em>区块链<em>交易所</em>（GBX）</li><li><a href="https://www.kickico.com/zh/" target="_blank" rel="noopener">KICKICO</a>。并未合规，只是让token上架，也不会提供以下的服务。</li></ul><h3 id="提供的服务"><a href="#提供的服务" class="headerlink" title="提供的服务"></a>提供的服务</h3><ul><li>帮助Token做出合规的法律架构；</li><li>如果Token不可避免地要设计成Security(证券)， 他们会帮助Token设计成合规的Security；</li><li>提供合格的投资人，提供做平台、做KYC(充分了解你的客户)的服务。</li></ul><h2 id="ICS-首次平台发售"><a href="#ICS-首次平台发售" class="headerlink" title="ICS(首次平台发售)"></a>ICS(首次平台发售)</h2><ul><li>币圈现在还处于混沌时代，合规不一定赚钱，赚钱不一定合规，还有巨大的风险。发行所不仅要合规，最重要的还需要有影响力，如上下游打通，一级二级市场打通去赚钱。</li><li>ICO通常的做法：设计一个智能合约，拿ETH兑换特定的Token。合约本身会锁定起、最大上限、转换消耗的效率，防止上下齐手人为的风险。</li><li>ICS（首次平台发售），国内币所转型的国外币所的常规做法，币很容易被销售出去，但是有一定的风险。因为你无法知道合约是否锁定，团队和机构是否会拿出来砸盘。虽然很先进，但是存在一定的风险。</li></ul><h1 id="去中心化交易所"><a href="#去中心化交易所" class="headerlink" title="去中心化交易所"></a>去中心化交易所</h1><h3 id="三大交易所对比"><a href="#三大交易所对比" class="headerlink" title="三大交易所对比"></a>三大交易所对比</h3><table><thead><tr><th>交易所</th><th>交易类型</th><th>下半年规划</th></tr></thead><tbody><tr><td>Kyber(KNC)</td><td>做的是ETH <em>on-chain</em>的交易</td><td>积极与多个国内外几十万用户的钱包、与法币厂商达成合作共识，达到去中心化交易所的运行效率。</td></tr><tr><td>OmiseGo(omg)</td><td>做的是部分的ETH <em>on-chain</em>的交易，只有在结算那部分才会<em>on-chain</em></td><td>与<em>prisma</em>合作，提升交易、支付的效率。</td></tr><tr><td>0x(ZRX)</td><td>做的是ETH <em>on-chain</em>的交易</td><td>倾向于将自身作为infrastructure(基础设施)销售出去，让更多交易所或者是想开交易所的人可以用0x拓展自己的币所。</td></tr></tbody></table><h3 id="对于交易所的思考"><a href="#对于交易所的思考" class="headerlink" title="对于交易所的思考"></a>对于交易所的思考</h3><p>交易所的本质在于交易速度和交易深度，交易所的发展方向应该侧重于提升这两个本质指标。所谓的交易所，其实就是要让资产快速流动起来，去不去中心化并不重要，去中心化会带来效率降低的影响，中心化虽说有效率上的提升，但也会有上下齐手的风险。</p><p>任何技术都有其pros-cons(优缺点)，我们要回归本质去思考，他们的团队有没有朝着本质的方向去前行。</p><h1 id="对于区块链的思考"><a href="#对于区块链的思考" class="headerlink" title="对于区块链的思考"></a>对于区块链的思考</h1><h3 id="区块链产品的本质"><a href="#区块链产品的本质" class="headerlink" title="区块链产品的本质"></a>区块链产品的本质</h3><p>区块链的本质就是一款能通信的数据库产品，它所能做到的，数据库加上网路通信也可以做到。</p><h3 id="什么样的区块链产品值得投资"><a href="#什么样的区块链产品值得投资" class="headerlink" title="什么样的区块链产品值得投资"></a>什么样的区块链产品值得投资</h3><h4 id="思考出发点"><a href="#思考出发点" class="headerlink" title="思考出发点"></a>思考出发点</h4><ul><li>这款区块链产品到底<strong>解决了现实世界中什么样的刚需性问题</strong>？</li><li>这款区块链产品在效率提升方面处于什么样的时间等级？是以day(天)计算的，还是以hour(小时)计算的，还是以min(分钟)计算的，还是以sec(秒)计算的。</li><li>它到底是在革谁的命？它提升的效率是不是现有产品方案的10倍甚至是100倍？</li></ul><h4 id="成功的案例"><a href="#成功的案例" class="headerlink" title="成功的案例"></a>成功的案例</h4><ul><li>为什么说BTC或ETH对跨境支付来说是一场革命？现在的跨境支付通常使用SWIFT模式，但是SWIFT模式的交易速度是以Day(天)为单位进行计算的，而BTC或ETH能够在几分钟或者一两个小时内完成交易。</li></ul><h4 id="警惕的误区"><a href="#警惕的误区" class="headerlink" title="警惕的误区"></a>警惕的误区</h4><ul><li>很多区块链产品号称有很多很多的功能，但是这些功能并没有解决实际的问题，解决刚需问题才会有价值，不要被这些功能迷惑，要思考本质到底是什么。</li></ul><h4 id="理论基石"><a href="#理论基石" class="headerlink" title="理论基石"></a>理论基石</h4><ul><li><a href="https://strategyn.com/jobs-to-be-done/jobs-to-be-done-theory/" target="_blank" rel="noopener">Jobs to be done</a>。推荐书籍：克雷顿·克里斯汀生《<a href="https://www.amazon.cn/dp/0062435612/ref=sr_1_fkmr0_1?ie=UTF8&amp;qid=1513392848&amp;sr=8-1-fkmr0&amp;keywords=Competing+Against+Luck+%E4%B8%AD%E6%96%87%E7%89%88" target="_blank" rel="noopener">Competing Against Luck</a>》/ 《<a href="http://www.books.com.tw/products/0010760251" target="_blank" rel="noopener">創新的用途理論：掌握消費者選擇，創新不必碰運氣</a>》</li><li>了解客户的purpose（意图）。创新不只是需要了解客户的需求，更要了解：顾客选择这个产品做什么？也就是要了解使用产品的真正用途，在什么情况下用，远胜过拼命改善产品的功能、特色。</li><li>好10倍的理论。消费者一般会对现有的solution（解决方案）会高估3倍以上，同样，创业者会高估自己做出来的产品比实际作出来的产品要好3倍以上。所以，新的产品一定要比现有的产品好 3 x 3 倍，也就是10倍以上，好一点没用，要好很多倍，才能够脱引而出。（这个和笑来老师说的要做远超第二的第一名道理一样，积累头部效应）</li><li>运用<a href="https://strategyn.com/jobs-to-be-done/jobs-to-be-done-theory/" target="_blank" rel="noopener">Jobs to be done</a>和<code>好10倍理论</code>，可以去判断哪一些产品其实是言过其实。</li></ul><h4 id="对EOS的几点疑虑"><a href="#对EOS的几点疑虑" class="headerlink" title="对EOS的几点疑虑"></a>对EOS的几点疑虑</h4><p>ETH采用的是工作量证明（Proof of work）算法，需要运用矿工的算力，效率很低，最近被一只猫搞垮了。只能承载分级以上的效应，但是没法承载秒级以上的效应。EOS采用的是委托股权证明（Delegated Proof of Stake）算法，比ETH快很多，号称可以达到商业级的。</p><p>EOS的局限：</p><ul><li>本质上还只是一个公司币，EOS没有参加本次的Summit，国外的币圈不太关注EOS这个Token</li><li>EOS想要建立一个生态圈，要克服以下几个问题：<ul><li>有多少developer愿意用你，有多少developer愿意从ETH转到EOS，EOS是否符合10倍理论</li><li>很多人现在是靠着ETH赚钱的，比如ICO、开发智能合约、做相关的Service等等，整个Industry（产业）都是基于ETH的，EOS多大程度上能超越ETH，目前来看还是个疑问。</li></ul></li></ul><h1 id="长线投资"><a href="#长线投资" class="headerlink" title="长线投资"></a>长线投资</h1><p>本次分享的目的，是让大家通过国外经营的现状、还有Token的本质、还有技术圈分享的现况，让大家了解区块链投资是怎么样一回事。</p><p>很多人喜欢把专注力是放在短线上，这其实是很可惜的。</p><p>正确的做法应该是做长线，有些人认为自己的逃顶的功夫很厉害，但其实它并没有跑赢大盘，所谓的跑赢大盘，其实是能不能跑赢BTC，你的投资效应有没有超越BTC的涨幅呢？所以，你不应专注你投资的Coin涨了多少钱，而是应该专注Coin你有没有超越BTC的涨幅。</p><p>所以，想要做长线投资，一定要寻找到那些能跑赢BTC大盘的Coin。</p><h1 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h1><ol><li><p>Q：请问eos这种链内扩展方案还是雷电网络这种侧链扩展方案有前途？</p><p>A：这个不确定，这个要看区块链实际发展速度和实际的Case，ETH这边的发展速度有点慢，ETH如果要转成PoS，那会触及矿工的利益，矿工叛变不是闹着好玩的。</p></li><li><p>Q：区块链公司的淘汰周期一般是多久一轮呢？</p><p>A：这个不确定，其实行业里面也有一些空气币，一直造不出币，但是它的价格一直居高不下，主要因为这些币的众筹价格是和ETH绑定的，只要不落地就还会有希望，要说淘汰的话，可能就是跑路了~~~</p></li><li><p>Q：现在去中心化交易所的使用体验普遍对用户很不友好，真的是技术上很难改善吗？</p><p>A：1）去中心化交易所本身用的是on-chain上面的技术，也就是完成一个交易，你必须要先打钱到智能合约上面，还需要用矿工费发行广播，别人要买取之后，然后跟你进行交易，你才能把你的ETH拿出来， 广播一次要好几分钟，再变成去中心化的交易所，交易的速度远不如OTC。去中心化的交易所本质上没有什么革命，只是交易更加透明化了</p><p>2）区块链的代码不好写，一旦depoly就会永久执行，更新合约本身就是impossible或者是非常困难的3）绝大多数程序员都缺乏是产品能力，做出来的东西一般很难用。</p></li><li><p>Q：以太坊被一只猫就能搞瘫痪，未来以太坊会不会像市面上说的，用闪电、大都会等升级之后，解决它本身设计的缺陷，然后有非常大的前景？从而抗衡eos</p><p>A：是有可能的，但是我们现在不知道V神现在是在KTV唱歌呢还是在改Code，他的小伙伴们现在的进展如何，这些都很难说。但是我希望大家聚焦在区块链本质与技术上去看一个区块链的长期价值。</p></li><li><p>Q：是否可能创建一种机制限制项目方动用ICO募集到的资产?</p><p>A：这个主要看项目方本身的良知了。原本ICO的合约就会锁定团队的资金要绑定多久或者逐年解冻，比如 IPFS迟迟不发币，就是他们本身ICO的合约锁定的。但是如果走ICS，他拿出来的私募Token，有没有锁定起，甚至项目方本身有没有区块链工程师，这都是值得疑问的。</p></li><li><p>Q：基于区块链的游戏会大爆发吗？有这样的技术基础吗？</p><p>A：其实是有的，以太坊的猫如果只是一个单机游戏的话，大家可能玩一玩就算了，这只猫本身没什么价值，但是这个猫是建立在ETH上的，动用的ETH的价值，价格又那么贵，所以大家就会在上面玩。我不确实是否会爆发，我只能说这是一个很特殊的现象。</p></li><li><p>Q：老师能讲解一下，ETH、EOS和以后得dfinity三者的共同点和区别吗？</p><p>A：dfinity没有研究过，这里没法评论</p></li><li><p>Q：最近会发现跑不过BTC的币种越来越多，未来估计也是，接下来怎么选择大概率能跑赢比特币的众筹品种，有没有什么对于普通小白有效的策略？</p><p>A：看哪个品种的K线能跑赢BTC的，跑得过的就押，然后就放着不要管了，不要跟着别人追涨杀跌，你会死的很惨的</p></li><li><p>Q：区块链会对互联网进行一个怎样的革新？</p><p>A：区块链本质就是解决信任和交易效率的问题，你要看看区块链产品所解决的问题是不是用户的刚需</p></li><li><p>Q：后续的链圈是否会出现百链争鸣的情况？</p><p>A：现在就是这种情况了</p></li><li><p>Q：老师能否谈谈做为小散应对BTC分叉的策略？</p><p>A：不要贪图那些糖果~造成自己的资产损失，长期不断地买进，长期握着就行</p></li><li><p>Q：公司币什么都可以代币化，只要做好映射，如家里的房子，他们是如何做到映射的？</p><p>A：我一般都不会投资这种代币，我不知道他们是如何在技术上和法律上做映射的，所说，不懂不投。</p></li><li><p>Q：BTC一直在分叉，EHT也在分叉，分叉以后会不会成为一种主流模式？</p><p>A：这个已经是常态了，就看交易所支不支持分叉了，没有价值的链分叉还是没有价值。</p></li><li><p>Q：如何看待分叉币，这次分叉币真的能救BTC吗？</p><p>A：我目前没有看到能救BTC的分叉币，救BTC要从这三个方面去看：1）提高BTC的交易效率；2）降低BTC的耗能；3）不要破坏BTC的价值</p></li><li><p>Q：目前中国区块链（技术）行业与国外区块链（技术）行业相比落后多少？</p><p>A：国内的区块链技术和交易形态已经远远超过国外了</p></li><li><p>Q：怎么评估一个币种的长期价值？</p><p>A：1）看它的真正价值；2）看群众的期待价值；3）能否跑得过BTC</p></li><li><p>Q：除了交易所，还有那些真正落地的项目，能让我们相信2018年会是应用的落地年?</p><p>A：悲观地看2018年不会是应用的落地年，ETH巨慢，用它开发应用不可能，EOS号称很牛逼，但是它还没有被做出来，可能还是一个发币年</p></li><li><p>Q：区块链项目一定要发行代币吗？</p><p>A：不一定，只是发行代币比价容易筹集到资金</p></li><li><p>Q：郑老师，能预测一下，各种分叉币未来的结局吗？</p><p>A：没办法预测，这个才刚开始</p></li><li><p>Q：现在刚刚进去农业时代的逻辑仅仅就是大量的机构涌入吗？</p><p>A：逻辑就是，现在的链上面还没有真正的应用，ETH上的最大应用也只是ICO，没有人真正用ETH来开发一个可以用的东西</p></li><li><p>Q：小白怎么判断代码质量？</p><p>A：没办法判断代码质量，建议还是看谁可以跑赢BTC</p></li><li><p>Q：区块链的好多项目都是开源的，开源这种软件的开发模式，是否是未来大型可用软件欢迎的开发模式</p><p>A：现在就已经是这种模式了</p></li><li><p>Q：如何判断熊市来了？</p><p>A：当你在场外交易所买到币跟场内交易所买到币相差没多少的时候，就是熊市来了，如果价差很大，就表示是牛市</p></li><li><p>Q：以前两年一轮牛市，现在的熊市与牛市的周期老师如何看待？</p><p>A：差不2~3月的周期，因为现在有很多成熟部队进来打了，周期变化会越来越快，大涨大跌，曲线变化的频率会越来越高，后面会越来越难判断牛熊市</p></li><li><p>Q：区块链让人人都可以成为投资人，这种投资代币的模式会持续存在吗？未来会成为主流吗？</p><p>A：会持续存在。以前投资是要占股份的，占股份有一个问题是多数公司不希望控制权被流失，他们希望用股权换未来的利润，创始人只希望利润出让而不是股份出让。Token的方式是，创始人可以预先拿到未来的利润，率先进行扩张，再者就是区块链项目的中奖的倍数是跟天使轮挂钩的，Token结算比较快，通常5个月内就会拿到1000倍，但是天使投资通常要等到IPO之后，所以他是一个比较没有效率的方式。是否能成为主流投资方式，就要看法规了，比如Security这一块就是全世界正在解决的</p></li><li><p>Q：老师，DPOS和闪电网络能解决BTC的交易速度问题吗？</p><p>A：BTC如果用DPOS的话，这个主要开始看矿工，BTC从POW换成DPOS，会触及矿工的利益</p></li><li><p>Q：老师，1月在旧金山举办的中美区块链大会值不值得参加？</p><p>A：唯有认知升级，你的投资能力，你的赚钱能力才能得到升级，与其拿这些钱去压小币，倒不如去升级自己的大脑和认识</p></li></ol><p>名词解析：</p><ul><li>SEC：美国证券交易委员会（U.S. Securities and Exchange Commission）</li><li>on-chain交易：<a href="https://steemit.com/cn-cryptocurrency/@cifer/on-chain-off-chain" target="_blank" rel="noopener">链上交易</a></li><li>SWIFT：Society for Worldwide Interbank Financial Telecommunication（环球同业银行金融电讯协会）</li></ul><p>参考资料：</p><ul><li><a href="http://attach.i7years.com/attach/treatise.doc" target="_blank" rel="noopener">美國證券法規上「證券」之重要判斷原則</a></li><li><a href="https://www.linkedin.com/pulse/20141125143442-132518611-what-is-a-security-the-howey-test-and-reves-test/" target="_blank" rel="noopener">What Is A Security? The Howey Test And Reves Test</a></li><li><a href="http://www.ftchinese.com/story/001073960?full=y" target="_blank" rel="noopener">ICO：如何监管法外之地？</a></li></ul>]]></content>
      
        <categories>
            
            <category> blockchain </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> Token </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[c++学习笔记]]></title>
      <url>/posts/learning-c-plus.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>今年对<a href="https://zh.wikipedia.org/wiki/%E5%8C%BA%E5%9D%97%E9%93%BE" target="_blank" rel="noopener">区块链</a>技术产生了浓厚的兴趣，学习c++编程主要的目的在于想去研究下<a href="https://github.com/bitcoin/bitcoin" target="_blank" rel="noopener">bitcoin</a>、<a href="https://github.com/eosio/eos" target="_blank" rel="noopener">eos</a>等区块链的源代码，弄懂他们的运行机制及原理。</p><a id="more"></a><h1 id="学习教程"><a href="#学习教程" class="headerlink" title="学习教程"></a>学习教程</h1><blockquote><p>GitHub: <a href="https://github.com/wangweiX/c-learning" target="_blank" rel="noopener">https://github.com/wangweiX/c-learning</a></p></blockquote><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><ul><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step01" target="_blank" rel="noopener">Step01 - Initialization project</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step02" target="_blank" rel="noopener">Step02 - Variables, initialization, and assignment</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step03" target="_blank" rel="noopener">Step03 - Creating a Basic Calculator</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step04" target="_blank" rel="noopener">Step04 - If / else Statement</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step05" target="_blank" rel="noopener">Step05 - Function</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step06" target="_blank" rel="noopener">Step06 - Object-oriented programming(OOP)</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step07" target="_blank" rel="noopener">Step07 - Placing Classes in Separate Files</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step08" target="_blank" rel="noopener">Step08 - While、for、do while Loops</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step09" target="_blank" rel="noopener">Step09 - Assignment and Increment Operators</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step10" target="_blank" rel="noopener">Step10 - Making a Stock Market Simulator</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step12" target="_blank" rel="noopener">Step11 - Switch</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step12" target="_blank" rel="noopener">Step12 - Logical Operators</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step13" target="_blank" rel="noopener">Step13 - Random Number Generator</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step14" target="_blank" rel="noopener">Step14 - Default parameters</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step15" target="_blank" rel="noopener">Step15 - Unary Scope Resolution Operator</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step16" target="_blank" rel="noopener">Step16 - Function Overloading</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step17" target="_blank" rel="noopener">Step17 - Recursion</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step18" target="_blank" rel="noopener">Step18 - Array</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step19" target="_blank" rel="noopener">Step19 - Multidimensional Arrays</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step20" target="_blank" rel="noopener">Step20 - Pointer</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step21" target="_blank" rel="noopener">Step21 - Passing arguments by value / reference / address</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step22" target="_blank" rel="noopener">Step22 - Sizeof</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step23" target="_blank" rel="noopener">Step23 - Pointers and Math</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step24" target="_blank" rel="noopener">Step24 - Arrow Member Selection Operator(-&gt;)</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step25" target="_blank" rel="noopener">Step25 - Destructors</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step26" target="_blank" rel="noopener">Step26 - Const class objects and member functions</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step27" target="_blank" rel="noopener">Step27 - Constructor member initializer lists</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step28" target="_blank" rel="noopener">Step28 - Object relationships - Composition</a></li><li><a href="https://github.com/wangweiX/c-learning/tree/master/c%2B%2Blearning-step29" target="_blank" rel="noopener">Step29 - Friend functions and classes</a></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[EOS学习(1) | 安装部署]]></title>
      <url>/posts/blockchain-eos-build.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/eos-logo.jpg" alt="eos-logo"></p><p>本篇文章教你如何本地安装EOS。</p><a id="more"></a><h3 id="EOSIO版本"><a href="#EOSIO版本" class="headerlink" title="EOSIO版本"></a>EOSIO版本</h3><ul><li>Beginning build version: 1.2</li><li>2018年 4月 9日 星期一 06时13分18秒 UTC</li><li>git head id: 124c62d0e1b3974bcd551b885518ff05301b39c9</li><li>Current branch: * master</li><li>ARCHITECTURE: Darwin</li></ul><h3 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h3><ul><li>OS name: Darwin</li><li>OS Version: 10.13.4</li></ul><h3 id="执行构建脚本"><a href="#执行构建脚本" class="headerlink" title="执行构建脚本"></a>执行构建脚本</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/eosio/eos --recursive</span><br><span class="line">$ cd eos</span><br><span class="line">$ ./eosio_build.sh</span><br></pre></td></tr></table></figure><p>出现如下信息，表示构建成功：</p><p><img src="https://img.i7years.com/blog/eos_build_01.png" alt=""></p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/local/bin/mongod -f /usr/local/etc/mongod.conf &amp; cd /Users/wangwei/eos/build; make test</span><br></pre></td></tr></table></figure><p>测试结果：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">Test project /Users/wangwei/eos/build</span><br><span class="line">      Start  <span class="number">1</span>: validate_simple.token_abi</span><br><span class="line"> <span class="number">1</span>/<span class="number">26</span> Test  <span class="comment">#1: validate_simple.token_abi ...........   Passed    1.05 sec</span></span><br><span class="line">      Start  <span class="number">2</span>: validate_eosio.token_abi</span><br><span class="line"> <span class="number">2</span>/<span class="number">26</span> Test  <span class="comment">#2: validate_eosio.token_abi ............   Passed    0.07 sec</span></span><br><span class="line">      Start  <span class="number">3</span>: validate_eosio.msig_abi</span><br><span class="line"> <span class="number">3</span>/<span class="number">26</span> Test  <span class="comment">#3: validate_eosio.msig_abi .............   Passed    0.08 sec</span></span><br><span class="line">      Start  <span class="number">4</span>: validate_multi_index_test_abi</span><br><span class="line"> <span class="number">4</span>/<span class="number">26</span> Test  <span class="comment">#4: validate_multi_index_test_abi .......   Passed    0.09 sec</span></span><br><span class="line">      Start  <span class="number">5</span>: validate_eosio.system_abi</span><br><span class="line"> <span class="number">5</span>/<span class="number">26</span> Test  <span class="comment">#5: validate_eosio.system_abi ...........   Passed    0.07 sec</span></span><br><span class="line">      Start  <span class="number">6</span>: validate_identity_abi</span><br><span class="line"> <span class="number">6</span>/<span class="number">26</span> Test  <span class="comment">#6: validate_identity_abi ...............   Passed    0.08 sec</span></span><br><span class="line">      Start  <span class="number">7</span>: validate_identity_test_abi</span><br><span class="line"> <span class="number">7</span>/<span class="number">26</span> Test  <span class="comment">#7: validate_identity_test_abi ..........   Passed    0.07 sec</span></span><br><span class="line">      Start  <span class="number">8</span>: validate_currency_abi</span><br><span class="line"> <span class="number">8</span>/<span class="number">26</span> Test  <span class="comment">#8: validate_currency_abi ...............   Passed    0.08 sec</span></span><br><span class="line">      Start  <span class="number">9</span>: validate_stltest_abi</span><br><span class="line"> <span class="number">9</span>/<span class="number">26</span> Test  <span class="comment">#9: validate_stltest_abi ................   Passed    0.08 sec</span></span><br><span class="line">      Start <span class="number">10</span>: validate_exchange_abi</span><br><span class="line"><span class="number">10</span>/<span class="number">26</span> Test <span class="comment">#10: validate_exchange_abi ...............   Passed    0.08 sec</span></span><br><span class="line">      Start <span class="number">11</span>: validate_test.inline_abi</span><br><span class="line"><span class="number">11</span>/<span class="number">26</span> Test <span class="comment">#11: validate_test.inline_abi ............   Passed    0.07 sec</span></span><br><span class="line">      Start <span class="number">12</span>: validate_asserter_abi</span><br><span class="line"><span class="number">12</span>/<span class="number">26</span> Test <span class="comment">#12: validate_asserter_abi ...............   Passed    0.08 sec</span></span><br><span class="line">      Start <span class="number">13</span>: validate_infinite_abi</span><br><span class="line"><span class="number">13</span>/<span class="number">26</span> Test <span class="comment">#13: validate_infinite_abi ...............   Passed    0.07 sec</span></span><br><span class="line">      Start <span class="number">14</span>: validate_proxy_abi</span><br><span class="line"><span class="number">14</span>/<span class="number">26</span> Test <span class="comment">#14: validate_proxy_abi ..................   Passed    0.07 sec</span></span><br><span class="line">      Start <span class="number">15</span>: validate_test_api_abi</span><br><span class="line"><span class="number">15</span>/<span class="number">26</span> Test <span class="comment">#15: validate_test_api_abi ...............   Passed    0.07 sec</span></span><br><span class="line">      Start <span class="number">16</span>: validate_test_api_mem_abi</span><br><span class="line"><span class="number">16</span>/<span class="number">26</span> Test <span class="comment">#16: validate_test_api_mem_abi ...........   Passed    0.07 sec</span></span><br><span class="line">      Start <span class="number">17</span>: validate_test_api_db_abi</span><br><span class="line"><span class="number">17</span>/<span class="number">26</span> Test <span class="comment">#17: validate_test_api_db_abi ............   Passed    0.07 sec</span></span><br><span class="line">      Start <span class="number">18</span>: validate_test_api_multi_index_abi</span><br><span class="line"><span class="number">18</span>/<span class="number">26</span> Test <span class="comment">#18: validate_test_api_multi_index_abi ...   Passed    0.07 sec</span></span><br><span class="line">      Start <span class="number">19</span>: validate_eosio.bios_abi</span><br><span class="line"><span class="number">19</span>/<span class="number">26</span> Test <span class="comment">#19: validate_eosio.bios_abi .............   Passed    0.08 sec</span></span><br><span class="line">      Start <span class="number">20</span>: validate_noop_abi</span><br><span class="line"><span class="number">20</span>/<span class="number">26</span> Test <span class="comment">#20: validate_noop_abi ...................   Passed    0.07 sec</span></span><br><span class="line">      Start <span class="number">21</span>: validate_dice_abi</span><br><span class="line"><span class="number">21</span>/<span class="number">26</span> Test <span class="comment">#21: validate_dice_abi ...................   Passed    0.08 sec</span></span><br><span class="line">      Start <span class="number">22</span>: chain_test_binaryen</span><br><span class="line"><span class="number">22</span>/<span class="number">26</span> Test <span class="comment">#22: chain_test_binaryen .................   Passed  286.59 sec</span></span><br><span class="line">      Start <span class="number">23</span>: chain_test_wavm</span><br><span class="line"><span class="number">23</span>/<span class="number">26</span> Test <span class="comment">#23: chain_test_wavm .....................   Passed  344.66 sec</span></span><br><span class="line">      Start <span class="number">24</span>: nodeos_run_test</span><br><span class="line"><span class="number">24</span>/<span class="number">26</span> Test <span class="comment">#24: nodeos_run_test .....................   Passed   48.39 sec</span></span><br><span class="line">      Start <span class="number">25</span>: p2p_dawn515_test</span><br><span class="line"><span class="number">25</span>/<span class="number">26</span> Test <span class="comment">#25: p2p_dawn515_test ....................   Passed    1.13 sec</span></span><br><span class="line">      Start <span class="number">26</span>: nodeos_run_test-mongodb</span><br><span class="line"><span class="number">26</span>/<span class="number">26</span> Test <span class="comment">#26: nodeos_run_test-mongodb .............   Passed  125.22 sec</span></span><br><span class="line"></span><br><span class="line"><span class="number">100</span>% tests passed, <span class="number">0</span> tests failed out of <span class="number">26</span></span><br><span class="line"></span><br><span class="line">Total Test time (real) = <span class="number">809.08</span> sec</span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd build</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure><p>安装完成之后，在 <code>/usr/local/bin</code> 下会有 <code>nodeos</code>、<code>cleos</code>、<code>keosd</code> 三个工具。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul><li><code>nodeos</code>配置文件：<code>~/Library/Application Support/eosio/nodeos/config/config.ini</code></li><li><code>keosd</code>配置文件：<code>~/eosio-wallet/config.ini</code></li></ul><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul><li><code>nodeos</code> (node + eos = nodeos) - 用于通过配置插件来运行节点的核心EOSIO节点守护程序。例如用于区块的生产，专用API端点和本地开发。</li><li><code>cleos</code> (cli + eos = cleos) - 与主链交互以及管理钱包的命令行工具界面。</li><li><code>keosd</code> (key + eos = keosd) - 将EOSIO密钥安全存储在钱包中的组件。</li></ul><p>这些组件之间的基本关系如下图所示。 在接下来的部分中，您将构建EOSIO组件，并将它们部署在单个主机，单节点测试网络（testnet）配置中。</p><p><img src="https://img.i7years.com/blog/8f31cfd-Basic-EOSIO-System-Architecture.png" alt="Basic-EOSIO-System-Architecture"></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://developers.eos.io/eosio-nodeos/docs/install-nodeos" target="_blank" rel="noopener">https://developers.eos.io/eosio-nodeos/docs/install-nodeos</a></li><li><a href="https://developers.eos.io/eosio-nodeos/docs/" target="_blank" rel="noopener">https://developers.eos.io/eosio-nodeos/docs/</a></li></ul><p><img src="https://img.i7years.com/blog/blockchain_exploer.png" alt=""></p>]]></content>
      
        <categories>
            
            <category> blockchain </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> eos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Netty新连接接入与NioSocketChannel分析]]></title>
      <url>/posts/netty-new-connection-and-niosocketchannel-analyse.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/pexels-photo-1629236.jpeg?imageslim" alt="pexels-photo-1629236"></p><p>前面的一些章节，我们分析了Netty的三大组件 —— <a href="https://wangwei.one/posts/netty-channel-source-analyse.html">Channel</a> 、<a href="https://wangwei.one/posts/netty-nioeventloop-analyse-for-startup.html">EventLoop</a>、<a href="https://wangwei.one/posts/netty-pipeline-source-analyse-2.html">Pipeline</a> ，对Netty的工作原理有了深入的了解。在此基础上，我们来分析一下当Netty服务端启动后，Netty是如何处理新连接接入的。</p><a id="more"></a><blockquote><p>Netty版本：4.1.30</p></blockquote><p>本文内容主要分为以下四部分：</p><ul><li>新连接检测</li><li>NioSocketChannel创建</li><li>NioSocketChannel初始化与注册</li><li>NioSocketChannel注册READ兴趣集</li></ul><h2 id="新连接检测"><a href="#新连接检测" class="headerlink" title="新连接检测"></a>新连接检测</h2><p>前面，我们在讲 <a href="https://wangwei.one/posts/netty-nioeventloop-analyse-for-startup.html">EventLoop的启动过程源码分析</a> 时，解读过下面这段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">NioEventLoop</span> <span class="keyword">extends</span> <span class="title">SingleThreadEventLoop</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processSelectedKey</span><span class="params">(SelectionKey k, AbstractNioChannel ch)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            ...</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ((readyOps &amp; (SelectionKey.OP_READ | SelectionKey.OP_ACCEPT)) != <span class="number">0</span> || readyOps == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 读取read事件</span></span><br><span class="line">                unsafe.read();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CancelledKeyException ignored) &#123;</span><br><span class="line">            unsafe.close(unsafe.voidPromise());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ...</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们还是以服务端 <strong><em>NioServerSocketChannel</em></strong> 为例，它绑定的unsafe实例为 <strong><em>NioMessageUnsafe</em></strong> 。上面的 <code>unsafe.read()</code> 接口，会向下调用到 NioMessageUnsafe.read() 接口，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractNioMessageChannel</span> <span class="keyword">extends</span> <span class="title">AbstractNioChannel</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">    ...</span><br><span class="line">   	</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">NioMessageUnsafe</span> <span class="keyword">extends</span> <span class="title">AbstractNioUnsafe</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">        <span class="comment">// 用于保存新建立的 NioSocketChannel 的集合</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Object&gt; readBuf = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">		</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 确保在当前线程与EventLoop中的一致</span></span><br><span class="line">            <span class="function"><span class="keyword">assert</span> <span class="title">eventLoop</span><span class="params">()</span>.<span class="title">inEventLoop</span><span class="params">()</span></span>;</span><br><span class="line">            <span class="comment">// 获取 NioServerSocketChannel config配置</span></span><br><span class="line">            <span class="keyword">final</span> ChannelConfig config = config();</span><br><span class="line">            <span class="comment">// 获取 NioServerSocketChannel 绑定的 pipeline</span></span><br><span class="line">            <span class="keyword">final</span> ChannelPipeline pipeline = pipeline();</span><br><span class="line">            <span class="comment">// 获取RecvByteBuf 分配器 Handle</span></span><br><span class="line">            <span class="comment">// 当channel在接收数据时，allocHandle 会用于分配ByteBuf来保存数据</span></span><br><span class="line">            <span class="comment">// 关于allocHandle后面再去做详细介绍</span></span><br><span class="line">            <span class="keyword">final</span> RecvByteBufAllocator.Handle allocHandle = unsafe().recvBufAllocHandle();</span><br><span class="line">            <span class="comment">// 重置已累积的所有计数器，并为下一个读取循环读取多少消息/字节数据提供建议</span></span><br><span class="line">            allocHandle.reset(config);</span><br><span class="line">			</span><br><span class="line">            <span class="keyword">boolean</span> closed = <span class="keyword">false</span>;</span><br><span class="line">            Throwable exception = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        <span class="comment">// 调用后面的 doReadMessages 接口，读取到message则返回1</span></span><br><span class="line">                        <span class="keyword">int</span> localRead = doReadMessages(readBuf);</span><br><span class="line">                        <span class="keyword">if</span> (localRead == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (localRead &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                            closed = <span class="keyword">true</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">						<span class="comment">// 对当前read循环所读取到的message数量计数+1</span></span><br><span class="line">                        allocHandle.incMessagesRead(localRead);</span><br><span class="line">                        <span class="comment">// 判断是否继续读取message</span></span><br><span class="line">                    &#125; <span class="keyword">while</span> (allocHandle.continueReading());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                    exception = t;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">int</span> size = readBuf.size();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i ++) &#123;</span><br><span class="line">                    readPending = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="comment">// 调用pipeline传播ChannelRead事件</span></span><br><span class="line">                    pipeline.fireChannelRead(readBuf.get(i));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 清空readBuf</span></span><br><span class="line">                readBuf.clear();</span><br><span class="line">                allocHandle.readComplete();</span><br><span class="line">                <span class="comment">// 调用pipeline传播 ChannelReadComplete 事件</span></span><br><span class="line">                pipeline.fireChannelReadComplete();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (exception != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    closed = closeOnReadError(exception);</span><br><span class="line">                    pipeline.fireExceptionCaught(exception);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (closed) &#123;</span><br><span class="line">                    inputShutdown = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">if</span> (isOpen()) &#123;</span><br><span class="line">                        close(voidPromise());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">// Check if there is a readPending which was not processed yet.</span></span><br><span class="line">                <span class="comment">// This could be for two reasons:</span></span><br><span class="line">                <span class="comment">// * The user called Channel.read() or ChannelHandlerContext.read() in channelRead(...) method</span></span><br><span class="line">                <span class="comment">// * The user called Channel.read() or ChannelHandlerContext.read() in channelReadComplete(...) method</span></span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">                <span class="comment">// See https://github.com/netty/netty/issues/2254</span></span><br><span class="line">                <span class="keyword">if</span> (!readPending &amp;&amp; !config.isAutoRead()) &#123;</span><br><span class="line">                    removeReadOp();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于 <code>doReadMessages(...)</code> 的分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NioServerSocketChannel</span> <span class="keyword">extends</span> <span class="title">AbstractNioMessageChannel</span> <span class="keyword">implements</span> <span class="title">io</span>.<span class="title">netty</span>.<span class="title">channel</span>.<span class="title">socket</span>.<span class="title">ServerSocketChannel</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 读取消息</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">doReadMessages</span><span class="params">(List&lt;Object&gt; buf)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取 SocketChannel </span></span><br><span class="line">        SocketChannel ch = SocketUtils.accept(javaChannel());</span><br><span class="line">		</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (ch != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 使用SocketChannel创建NioSocketChannel，将其存入buf list中</span></span><br><span class="line">                <span class="comment">// 关于NioSocketChannel的创建请看后面的分析</span></span><br><span class="line">                buf.add(<span class="keyword">new</span> NioSocketChannel(<span class="keyword">this</span>, ch));</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            logger.warn(<span class="string">"Failed to create a new channel from an accepted socket."</span>, t);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ch.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t2) &#123;</span><br><span class="line">                logger.warn(<span class="string">"Failed to close a socket."</span>, t2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于 <code>continueReading()</code> 接口的分析，至于结果为什么返回false，后面会单独分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultMaxMessagesRecvByteBufAllocator</span> <span class="keyword">implements</span> <span class="title">MaxMessagesRecvByteBufAllocator</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> maxMessagesPerRead;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> respectMaybeMoreData = <span class="keyword">true</span>;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxMessageHandle</span> <span class="keyword">implements</span> <span class="title">ExtendedHandle</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> ChannelConfig config;</span><br><span class="line">        <span class="comment">// 每次读取最大的消息数</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> maxMessagePerRead;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> totalMessages;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> totalBytesRead;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> attemptedBytesRead;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> lastBytesRead;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> respectMaybeMoreData = DefaultMaxMessagesRecvByteBufAllocator.<span class="keyword">this</span>.respectMaybeMoreData;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> UncheckedBooleanSupplier defaultMaybeMoreSupplier = <span class="keyword">new</span> UncheckedBooleanSupplier() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> attemptedBytesRead == lastBytesRead;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        ...</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 判断是否继续读取message    </span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">continueReading</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> continueReading(defaultMaybeMoreSupplier);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 判断是否继续读取message</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">continueReading</span><span class="params">(UncheckedBooleanSupplier maybeMoreDataSupplier)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 默认情况下 config.isAutoRead() 为true</span></span><br><span class="line">            <span class="comment">// respectMaybeMoreData 默认为 true</span></span><br><span class="line">            <span class="comment">// maybeMoreDataSupplier.get() 为false</span></span><br><span class="line">            <span class="comment">// totalMessages第一次循环则为1</span></span><br><span class="line">            <span class="comment">// maxMessagePerRead为16</span></span><br><span class="line">			<span class="comment">// 结果返回false</span></span><br><span class="line">            <span class="keyword">return</span> config.isAutoRead() &amp;&amp;</span><br><span class="line">                (!respectMaybeMoreData || maybeMoreDataSupplier.get()) &amp;&amp;</span><br><span class="line">                totalMessages &lt; maxMessagePerRead &amp;&amp;</span><br><span class="line">                totalBytesRead &gt; <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">		</span><br><span class="line">        ...</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="NioSocketChannel创建"><a href="#NioSocketChannel创建" class="headerlink" title="NioSocketChannel创建"></a>NioSocketChannel创建</h2><p>上面分析新连接接入，提到了 <strong><em>NioSocketChannel</em></strong> 的创建，我们这里来详细分析一下，NioSocketChannel的创建过程与此前我们分析 <a href="https://wangwei.one/posts/netty-channel-source-analyse.html">NioServerSocketChannel创建</a> 大体类似。</p><h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><p>先来看看 NioSocketChannel 的构造函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NioSocketChannel</span> <span class="keyword">extends</span> <span class="title">AbstractNioByteChannel</span> <span class="keyword">implements</span> <span class="title">io</span>.<span class="title">netty</span>.<span class="title">channel</span>.<span class="title">socket</span>.<span class="title">SocketChannel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">NioSocketChannel</span><span class="params">(Channel parent, SocketChannel socket)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用父类构造器</span></span><br><span class="line">        <span class="keyword">super</span>(parent, socket);</span><br><span class="line">        <span class="comment">// 创建NioSocketChannelConfig</span></span><br><span class="line">        config = <span class="keyword">new</span> NioSocketChannelConfig(<span class="keyword">this</span>, socket.socket());</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    ...</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>父类 <strong><em>AbstractNioByteChannel</em></strong> 构造器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractNioByteChannel</span> <span class="keyword">extends</span> <span class="title">AbstractNioChannel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">AbstractNioByteChannel</span><span class="params">(Channel parent, SelectableChannel ch)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用父类构造器，并设置兴趣集为SelectionKey.OP_READ，对read事件感兴趣</span></span><br><span class="line">        <span class="keyword">super</span>(parent, ch, SelectionKey.OP_READ);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>父类 <strong><em>AbstractNioChannel</em></strong> 构造器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractNioChannel</span> <span class="keyword">extends</span> <span class="title">AbstractChannel</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">AbstractNioChannel</span><span class="params">(Channel parent, SelectableChannel ch, <span class="keyword">int</span> readInterestOp)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用父类构造器</span></span><br><span class="line">        <span class="keyword">super</span>(parent);</span><br><span class="line">        <span class="comment">// 设置channel</span></span><br><span class="line">        <span class="keyword">this</span>.ch = ch;</span><br><span class="line">        <span class="comment">// 设置兴趣集</span></span><br><span class="line">        <span class="keyword">this</span>.readInterestOp = readInterestOp;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 设置为非阻塞</span></span><br><span class="line">            ch.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>父类 <strong><em>AbstractChannel</em></strong> 构造器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractChannel</span> <span class="keyword">extends</span> <span class="title">DefaultAttributeMap</span> <span class="keyword">implements</span> <span class="title">Channel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="title">AbstractChannel</span><span class="params">(Channel parent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设置parent</span></span><br><span class="line">        <span class="keyword">this</span>.parent = parent;</span><br><span class="line">        <span class="comment">// 创建channelId</span></span><br><span class="line">        id = newId();</span><br><span class="line">        <span class="comment">// 创建unsafe</span></span><br><span class="line">        unsafe = newUnsafe();</span><br><span class="line">        <span class="comment">// 创建pipeline</span></span><br><span class="line">        pipeline = newChannelPipeline();</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ChannelConfig创建"><a href="#ChannelConfig创建" class="headerlink" title="ChannelConfig创建"></a>ChannelConfig创建</h3><p>接着我们看看 <strong><em>NioSocketChannelConfig</em></strong> 的创建逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NioSocketChannel</span> <span class="keyword">extends</span> <span class="title">AbstractNioByteChannel</span> <span class="keyword">implements</span> <span class="title">io</span>.<span class="title">netty</span>.<span class="title">channel</span>.<span class="title">socket</span>.<span class="title">SocketChannel</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">    ...</span><br><span class="line">       </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">NioSocketChannelConfig</span><span class="params">(NioSocketChannel channel, Socket javaSocket)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用父类构造器</span></span><br><span class="line">        <span class="keyword">super</span>(channel, javaSocket);</span><br><span class="line">        calculateMaxBytesPerGatheringWrite();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">	    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>父类 <strong><em>DefaultSocketChannelConfig</em></strong> 构造器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultSocketChannelConfig</span> <span class="keyword">extends</span> <span class="title">DefaultChannelConfig</span> <span class="keyword">implements</span> <span class="title">SocketChannelConfig</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">   ...</span><br><span class="line">      </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">DefaultSocketChannelConfig</span><span class="params">(SocketChannel channel, Socket javaSocket)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 调用父类构造器，绑定socketchannel </span></span><br><span class="line">       <span class="keyword">super</span>(channel);</span><br><span class="line">        <span class="keyword">if</span> (javaSocket == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"javaSocket"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 绑定java socket</span></span><br><span class="line">        <span class="keyword">this</span>.javaSocket = javaSocket;</span><br><span class="line">		</span><br><span class="line">        <span class="comment">// Enable TCP_NODELAY by default if possible.</span></span><br><span class="line">        <span class="comment">// netty一般运行在服务器上，不在Android上，canEnableTcpNoDelayByDefault返回true</span></span><br><span class="line">        <span class="keyword">if</span> (PlatformDependent.canEnableTcpNoDelayByDefault()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">            	<span class="comment">// 开启 TCP_NODELAY ，开启TCP的nagle算法</span></span><br><span class="line">                <span class="comment">// 尽量不要等待，只要发送缓冲区中有数据，并且发送窗口是打开的，就尽量把数据发送到网络上去。</span></span><br><span class="line">                setTcpNoDelay(<span class="keyword">true</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="comment">// Ignore.</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;                                  </span><br><span class="line">     </span><br><span class="line">    ... </span><br><span class="line">                                        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="NioSocketChannel初始化与注册"><a href="#NioSocketChannel初始化与注册" class="headerlink" title="NioSocketChannel初始化与注册"></a>NioSocketChannel初始化与注册</h2><p>上面小节分析了NioSocketChannel的创建逻辑，创建完成之后，我们来分析一下NioSocketChannel是如何注册到NioEventLoop上去的。</p><p>在前面小节分析新连接检测的有如下小段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">NioMessageUnsafe</span> <span class="keyword">extends</span> <span class="title">AbstractNioUnsafe</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> size = readBuf.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i ++) &#123;</span><br><span class="line">        readPending = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// 调用pipeline传播ChannelRead事件</span></span><br><span class="line">        pipeline.fireChannelRead(readBuf.get(i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用pipeline传播ChannelRead事件，这里的Pipeline是服务端Channel，也就是NioServerSocketChannel所绑定的Pipeline，此时的Pipeline的内部结构是怎么样子的呢？</p><p><img src="https://img.i7years.com/netty/Pipeline-ServerBootstrapAcceptor.png" alt="Pipeline-ServerBootstrapAcceptor"></p><p>那这个 <strong><em>ServerBootstrapAcceptor</em></strong> 是从哪里来的呢？</p><p>在此前，我们分析 <a href="https://wangwei.one/posts/netty-channel-source-analyse.html#Channel%E5%88%9D%E5%A7%8B%E5%8C%96">NioServerSocketChannel初始化</a> 时，有过下面这段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerBootstrap</span> <span class="keyword">extends</span> <span class="title">AbstractBootstrap</span>&lt;<span class="title">ServerBootstrap</span>, <span class="title">ServerChannel</span>&gt; </span>&#123;</span><br><span class="line"> 	</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// NioServerSocketChannel初始化    </span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(Channel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取启动器 启动时配置的option参数，主要是TCP的一些属性</span></span><br><span class="line">        <span class="keyword">final</span> Map&lt;ChannelOption&lt;?&gt;, Object&gt; options = options0();</span><br><span class="line">        <span class="comment">// 将获得到 options 配置到 ChannelConfig 中去</span></span><br><span class="line">        <span class="keyword">synchronized</span> (options) &#123;</span><br><span class="line">            setChannelOptions(channel, options, logger);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 ServerBootstrap 启动时配置的 attr 参数</span></span><br><span class="line">        <span class="keyword">final</span> Map&lt;AttributeKey&lt;?&gt;, Object&gt; attrs = attrs0();</span><br><span class="line">        <span class="comment">// 配置 Channel attr，主要是设置用户自定义的一些参数</span></span><br><span class="line">        <span class="keyword">synchronized</span> (attrs) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Entry&lt;AttributeKey&lt;?&gt;, Object&gt; e: attrs.entrySet()) &#123;</span><br><span class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                AttributeKey&lt;Object&gt; key = (AttributeKey&lt;Object&gt;) e.getKey();</span><br><span class="line">                channel.attr(key).set(e.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取channel中的 pipeline，这个pipeline使我们前面在channel创建过程中设置的 pipeline</span></span><br><span class="line">        ChannelPipeline p = channel.pipeline();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将启动器中配置的 childGroup 保存到局部变量 currentChildGroup</span></span><br><span class="line">        <span class="keyword">final</span> EventLoopGroup currentChildGroup = childGroup;</span><br><span class="line">        <span class="comment">// 将启动器中配置的 childHandler 保存到局部变量 currentChildHandler</span></span><br><span class="line">        <span class="keyword">final</span> ChannelHandler currentChildHandler = childHandler;</span><br><span class="line">        <span class="keyword">final</span> Entry&lt;ChannelOption&lt;?&gt;, Object&gt;[] currentChildOptions;</span><br><span class="line">        <span class="keyword">final</span> Entry&lt;AttributeKey&lt;?&gt;, Object&gt;[] currentChildAttrs;</span><br><span class="line">        <span class="comment">// 保存用户设置的 childOptions 到局部变量 currentChildOptions</span></span><br><span class="line">        <span class="keyword">synchronized</span> (childOptions) &#123;</span><br><span class="line">            currentChildOptions = childOptions.entrySet().toArray(newOptionArray(childOptions.size()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 保存用户设置的 childAttrs 到局部变量 currentChildAttrs</span></span><br><span class="line">        <span class="keyword">synchronized</span> (childAttrs) &#123;</span><br><span class="line">            currentChildAttrs = childAttrs.entrySet().toArray(newAttrArray(childAttrs.size()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        p.addLast(<span class="keyword">new</span> ChannelInitializer&lt;Channel&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(<span class="keyword">final</span> Channel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">final</span> ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line">                <span class="comment">// 获取启动器上配置的handler</span></span><br><span class="line">                ChannelHandler handler = config.handler();</span><br><span class="line">                <span class="keyword">if</span> (handler != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 添加 handler 到 pipeline 中</span></span><br><span class="line">                    pipeline.addLast(handler);</span><br><span class="line">                &#125;</span><br><span class="line">                ch.eventLoop().execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        <span class="comment">// 用child相关的参数创建出一个新连接接入器ServerBootstrapAcceptor</span></span><br><span class="line">                        <span class="comment">// 通过 ServerBootstrapAcceptor 可以将一个新连接绑定到一个线程上去</span></span><br><span class="line">                        <span class="comment">// 每次有新的连接进来 ServerBootstrapAcceptor 都会用child相关的属性对它们进行配置，并注册到ChaildGroup上去</span></span><br><span class="line">                        pipeline.addLast(<span class="keyword">new</span> ServerBootstrapAcceptor(</span><br><span class="line">                                ch, currentChildGroup, currentChildHandler, currentChildOptions, currentChildAttrs));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">	    </span><br><span class="line">    ...    </span><br><span class="line"> 	   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ServerBootstrapAcceptor"><a href="#ServerBootstrapAcceptor" class="headerlink" title="ServerBootstrapAcceptor"></a>ServerBootstrapAcceptor</h3><p>NioServerSocketChannel初始化时，向NioServerSocketChannel所绑定的Pipeline添加了一个InboundHandler节点 —— <strong><em>ServerBootstrapAcceptor</em></strong> ，其代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerBootstrap</span> <span class="keyword">extends</span> <span class="title">AbstractBootstrap</span>&lt;<span class="title">ServerBootstrap</span>, <span class="title">ServerChannel</span>&gt; </span>&#123;</span><br><span class="line">	</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerBootstrapAcceptor</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">        <span class="comment">// 子EventLoopGroup，即为workGroup</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> EventLoopGroup childGroup;</span><br><span class="line">        <span class="comment">// ServerBootstrap启动时配置的 childHandler</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> ChannelHandler childHandler;</span><br><span class="line">        <span class="comment">// ServerBootstrap启动时配置的 childOptions</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Entry&lt;ChannelOption&lt;?&gt;, Object&gt;[] childOptions;</span><br><span class="line">        <span class="comment">// ServerBootstrap启动时配置的 childAttrs</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Entry&lt;AttributeKey&lt;?&gt;, Object&gt;[] childAttrs;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Runnable enableAutoReadTask;</span><br><span class="line">		</span><br><span class="line">        <span class="comment">// 构造函数</span></span><br><span class="line">        ServerBootstrapAcceptor(</span><br><span class="line">                <span class="keyword">final</span> Channel channel, EventLoopGroup childGroup, ChannelHandler childHandler,</span><br><span class="line">                Entry&lt;ChannelOption&lt;?&gt;, Object&gt;[] childOptions, Entry&lt;AttributeKey&lt;?&gt;, Object&gt;[] childAttrs) &#123;</span><br><span class="line">            <span class="keyword">this</span>.childGroup = childGroup;</span><br><span class="line">            <span class="keyword">this</span>.childHandler = childHandler;</span><br><span class="line">            <span class="keyword">this</span>.childOptions = childOptions;</span><br><span class="line">            <span class="keyword">this</span>.childAttrs = childAttrs;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Task which is scheduled to re-enable auto-read.</span></span><br><span class="line">            <span class="comment">// It's important to create this Runnable before we try to submit it as otherwise the URLClassLoader may</span></span><br><span class="line">            <span class="comment">// not be able to load the class because of the file limit it already reached.</span></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="comment">// See https://github.com/netty/netty/issues/1328</span></span><br><span class="line">            enableAutoReadTask = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    channel.config().setAutoRead(<span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理Pipeline所传播的channelRead事件</span></span><br><span class="line">        <span class="comment">// 也就是前面新连接检测时看到的那段代码</span></span><br><span class="line">        <span class="comment">// pipeline.fireChannelRead(readBuf.get(i));</span></span><br><span class="line">        <span class="comment">// ServerBootstrapAcceptor的channelRead接口将会被调用，用于处理channelRead事件</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 获取传播事件的对象数据，即为前面的readBuf.get(i)</span></span><br><span class="line">            <span class="comment">// readBuf.get(i)取出的对象为 NioSocketChannel</span></span><br><span class="line">            <span class="keyword">final</span> Channel child = (Channel) msg;</span><br><span class="line">			<span class="comment">// 向 NioSocketChannel 添加childHandler，也就是我们常看到的</span></span><br><span class="line">            <span class="comment">// ServerBootstrap在启动时配置的代码：</span></span><br><span class="line">            <span class="comment">// ServerBootstrap.childHandler(new ChannelInitializer&lt;SocketChannel&gt;() &#123;...&#125; ）</span></span><br><span class="line">            <span class="comment">// 最终的结果就是向NioSocketChannel的Pipeline添加用户自定义的ChannelHandler</span></span><br><span class="line">            <span class="comment">// 用于处理客户端的channel连接</span></span><br><span class="line">            child.pipeline().addLast(childHandler);</span><br><span class="line">			<span class="comment">// 配置 NioSocketChannel的TCP属性</span></span><br><span class="line">            setChannelOptions(child, childOptions, logger);</span><br><span class="line">			<span class="comment">// 配置 NioSocketChannel 一些用户自定义数据</span></span><br><span class="line">            <span class="keyword">for</span> (Entry&lt;AttributeKey&lt;?&gt;, Object&gt; e: childAttrs) &#123;</span><br><span class="line">                child.attr((AttributeKey&lt;Object&gt;) e.getKey()).set(e.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">			<span class="comment">// 将NioSocketChannel注册到childGroup，也就是Netty的WorkerGroup当中去</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                childGroup.register(child).addListener(<span class="keyword">new</span> ChannelFutureListener() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationComplete</span><span class="params">(ChannelFuture future)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        <span class="keyword">if</span> (!future.isSuccess()) &#123;</span><br><span class="line">                            forceClose(child, future.cause());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                forceClose(child, t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">		</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    ...</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>关于 ChannelInitializer 的讲解，可以看此前 <a href="https://wangwei.one/posts/netty-pipeline-source-analyse-1.html">Pipeline源码分析</a> 文章。</p></blockquote><p>后面的register逻辑，就与我们前面讲解 <a href="https://wangwei.one/posts/netty-channel-source-analyse.html#Channel%E6%B3%A8%E5%86%8C">NioServerSocketChannel注册</a> 大体类似了，这里简单介绍一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractChannel</span> <span class="keyword">extends</span> <span class="title">DefaultAttributeMap</span> <span class="keyword">implements</span> <span class="title">Channel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 注册NioSocketChannel</span></span><br><span class="line">    <span class="comment">// eventLoop为childGroup    </span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(EventLoop eventLoop, <span class="keyword">final</span> ChannelPromise promise)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        ...</span><br><span class="line">		<span class="comment">// 绑定eventLoop到NioSocketChannel上</span></span><br><span class="line">        AbstractChannel.<span class="keyword">this</span>.eventLoop = eventLoop;</span><br><span class="line">		<span class="comment">// 现在分析的逻辑是在服务端的线程上，eventLoop与主线程不同，返回false</span></span><br><span class="line">        <span class="keyword">if</span> (eventLoop.inEventLoop()) &#123;</span><br><span class="line">            register0(promise);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                eventLoop.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        <span class="comment">// 这里来调用register0方法</span></span><br><span class="line">                        register0(promise);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                logger.warn(</span><br><span class="line">                        <span class="string">"Force-closing a channel whose registration task was not accepted by an event loop: &#123;&#125;"</span>,</span><br><span class="line">                        AbstractChannel.<span class="keyword">this</span>, t);</span><br><span class="line">                closeForcibly();</span><br><span class="line">                closeFuture.setClosed();</span><br><span class="line">                safeSetFailure(promise, t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 注册</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">register0</span><span class="params">(ChannelPromise promise)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            </span><br><span class="line">            ...</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">boolean</span> firstRegistration = neverRegistered;</span><br><span class="line">            <span class="comment">// 调用 doRegister()</span></span><br><span class="line">            doRegister();</span><br><span class="line">            neverRegistered = <span class="keyword">false</span>;</span><br><span class="line">            registered = <span class="keyword">true</span>;</span><br><span class="line">            </span><br><span class="line">            pipeline.invokeHandlerAddedIfNeeded();</span><br><span class="line"></span><br><span class="line">            safeSetSuccess(promise);</span><br><span class="line">            pipeline.fireChannelRegistered();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 服务端的NioServerSocketChannel已经与客户端的NioSocketChannel建立了连接</span></span><br><span class="line">            <span class="comment">// 所以，NioSocketChannel是处于激活状态，isActive()返回ture</span></span><br><span class="line">            <span class="keyword">if</span> (isActive()) &#123;</span><br><span class="line">                <span class="comment">// 对于新连接，是第一次注册</span></span><br><span class="line">                <span class="keyword">if</span> (firstRegistration) &#123;</span><br><span class="line">                    <span class="comment">// 传播ChannelActive事件</span></span><br><span class="line">                    pipeline.fireChannelActive();</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (config().isAutoRead()) &#123;</span><br><span class="line">                    beginRead();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ...</span><br><span class="line">                </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="comment">// Close the channel directly to avoid FD leak.</span></span><br><span class="line">            closeForcibly();</span><br><span class="line">            closeFuture.setClosed();</span><br><span class="line">            safeSetFailure(promise, t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">	        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用到NioSocketChannel中的doRegister()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractNioChannel</span> <span class="keyword">extends</span> <span class="title">AbstractChannel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doRegister</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> selected = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 将selector注册到底层JDK channel上，并附加了NioSocketChannel对象</span></span><br><span class="line">                <span class="comment">// 兴趣集设置为0，表示不关心任何事件</span></span><br><span class="line">                selectionKey = javaChannel().register(eventLoop().unwrappedSelector(), <span class="number">0</span>, <span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (CancelledKeyException e) &#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> 	</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="NioSocketChannel-注册OP-READ兴趣集"><a href="#NioSocketChannel-注册OP-READ兴趣集" class="headerlink" title="NioSocketChannel 注册OP_READ兴趣集"></a>NioSocketChannel 注册OP_READ兴趣集</h2><p>紧接着上面的分析，传播ChannelActive事件之后的逻辑，主要就是向客户端的NioSocketChannel注册一个Read兴趣集</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (isActive()) &#123;</span><br><span class="line">    <span class="comment">// 对于新连接，是第一次注册</span></span><br><span class="line">    <span class="keyword">if</span> (firstRegistration) &#123;</span><br><span class="line">        <span class="comment">// 传播ChannelActive事件</span></span><br><span class="line">        pipeline.fireChannelActive();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (config().isAutoRead()) &#123;</span><br><span class="line">        beginRead();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 <a href="https://wangwei.one/posts/netty-pipeline-source-analyse-2.html">Pipeline的传播机制</a> ，最终会调用到doBeginRead()接口，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractNioChannel</span> <span class="keyword">extends</span> <span class="title">AbstractChannel</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractNioUnsafe</span> <span class="keyword">extends</span> <span class="title">AbstractUnsafe</span> <span class="keyword">implements</span> <span class="title">NioUnsafe</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doBeginRead</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="comment">// Channel.read() or ChannelHandlerContext.read() was called</span></span><br><span class="line">            <span class="comment">// 保存selectionKey到局部变量</span></span><br><span class="line">            <span class="keyword">final</span> SelectionKey selectionKey = <span class="keyword">this</span>.selectionKey;</span><br><span class="line">            <span class="comment">// 判断有效性</span></span><br><span class="line">            <span class="keyword">if</span> (!selectionKey.isValid()) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">		</span><br><span class="line">            readPending = <span class="keyword">true</span>;</span><br><span class="line">			</span><br><span class="line">            <span class="comment">// 获取selectionKey的兴趣集</span></span><br><span class="line">            <span class="comment">// 前面小结分析doRegister()接口提到，selectionKey的兴趣集设置为0</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> interestOps = selectionKey.interestOps();</span><br><span class="line">            <span class="comment">// 这里的 readInterestOp 是前面讲NioSocketChannel创建时设置的值</span></span><br><span class="line">            <span class="comment">// 为 SelectionKey.OP_READ，也就是1</span></span><br><span class="line">            <span class="keyword">if</span> ((interestOps &amp; readInterestOp) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 这样，selectionKey最终设置的兴趣集为SelectionKey.OP_READ</span></span><br><span class="line">                <span class="comment">// 表示对读事件感兴趣</span></span><br><span class="line">                selectionKey.interestOps(interestOps | readInterestOp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;    </span><br><span class="line">            </span><br><span class="line">        ...    </span><br><span class="line">        </span><br><span class="line">    &#125;    </span><br><span class="line">	</span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>Netty是在哪里检测有新连接接入的？</li><li>新连接是怎样注册到NioEventLoop线程上的？</li><li>NioSocketChannel是怎样初始化及注册的？</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://coding.imooc.com/class/230.html" target="_blank" rel="noopener">Java读源码之Netty深入剖析</a></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Netty Pipeline源码分析(2)]]></title>
      <url>/posts/netty-pipeline-source-analyse-2.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/pexels-photo-154575.jpeg?imageslim" alt="pexels-photo-154575"></p><p><a href="https://wangwei.one/posts/netty-pipeline-source-analyse-1.html">前面</a> ，我们分析了Netty Pipeline的初始化及节点添加与删除逻辑。接下来，我们将来分析Pipeline的事件传播机制。</p><a id="more"></a><blockquote><p>Netty版本：4.1.30</p></blockquote><h2 id="inBound事件传播"><a href="#inBound事件传播" class="headerlink" title="inBound事件传播"></a>inBound事件传播</h2><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>我们通过下面这个例子来演示Netty Pipeline的事件传播机制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyPipelineInboundExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">        ServerBootstrap strap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">        strap.group(group)</span><br><span class="line">                .channel(NioServerSocketChannel.class)</span><br><span class="line">                .localAddress(<span class="keyword">new</span> InetSocketAddress(<span class="number">8888</span>))</span><br><span class="line">                .childOption(ChannelOption.TCP_NODELAY, <span class="keyword">true</span>)</span><br><span class="line">                .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        ch.pipeline().addLast(<span class="keyword">new</span> InboundHandlerA());</span><br><span class="line">                        ch.pipeline().addLast(<span class="keyword">new</span> InboundHandlerB());</span><br><span class="line">                        ch.pipeline().addLast(<span class="keyword">new</span> InboundHandlerC());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ChannelFuture future = strap.bind().sync();</span><br><span class="line">            future.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            group.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InboundHandlerA</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"InboundHandler A : "</span> + msg);</span><br><span class="line">        <span class="comment">// 传播read事件到下一个channelhandler</span></span><br><span class="line">        ctx.fireChannelRead(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InboundHandlerB</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"InboundHandler B : "</span> + msg);</span><br><span class="line">        <span class="comment">// 传播read事件到下一个channelhandler</span></span><br><span class="line">        ctx.fireChannelRead(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// channel激活，触发channelRead事件，从pipeline的heandContext节点开始往下传播</span></span><br><span class="line">        ctx.channel().pipeline().fireChannelRead(<span class="string">"Hello world"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InboundHandlerC</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"InboundHandler C : "</span> + msg);</span><br><span class="line">        <span class="comment">// 传播read事件到下一个channelhandler</span></span><br><span class="line">        ctx.fireChannelRead(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/wangweiX/netty-in-action/blob/2.0-SNAPSHOT/chapter6/src/main/java/nia/chapter6/NettyPipelineInboundExample.java" target="_blank" rel="noopener">源码</a></p></blockquote><p>通过 telnet 来连接上面启动好的netty服务，触发channel active事件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> telnet 127.0.0.1 8888</span><br></pre></td></tr></table></figure><p>按照InboundHandlerA、InboundHandlerB、InboundHandlerC的添加顺序，控制台输出如下信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">InboundHandler A : Hello world</span><br><span class="line">InboundHandler B : Hello world</span><br><span class="line">InboundHandler C : Hello world</span><br></pre></td></tr></table></figure><p>若是调用它们的添加顺序，则会输出对应顺序的信息，e.g:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> InboundHandlerB());</span><br><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> InboundHandlerA());</span><br><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> InboundHandlerC());</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>输出如下信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">InboundHandler B : Hello world</span><br><span class="line">InboundHandler A : Hello world</span><br><span class="line">InboundHandler C : Hello world</span><br></pre></td></tr></table></figure><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><blockquote><p><strong>强烈建议</strong> 下面的流程，自己通过IDE的Debug模式来分析</p></blockquote><p>待netty启动成功，通过telnet连接到netty，然后通过telnet终端输入任意字符（这一步才开启Debug模式），进入Debug模式。</p><p>触发channel read事件，从下面的入口开始调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultChannelPipeline</span> <span class="keyword">implements</span> <span class="title">ChannelPipeline</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	...</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 出发channel read事件</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ChannelPipeline <span class="title">fireChannelRead</span><span class="params">(Object msg)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 从head节点开始往下传播read事件</span></span><br><span class="line">        AbstractChannelHandlerContext.invokeChannelRead(head, msg);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用 AbstractChannelHandlerContext 中的 <code>invokeChannelRead(head, msg)</code> 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractChannelHandlerContext</span> <span class="keyword">extends</span> <span class="title">DefaultAttributeMap</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">ChannelHandlerContext</span>, <span class="title">ResourceLeakHint</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 调用channel read</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">invokeChannelRead</span><span class="params">(<span class="keyword">final</span> AbstractChannelHandlerContext next, Object msg)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取消息</span></span><br><span class="line">        <span class="keyword">final</span> Object m = next.pipeline.touch(ObjectUtil.checkNotNull(msg, <span class="string">"msg"</span>), next);</span><br><span class="line">        <span class="comment">// 获取 EventExecutor</span></span><br><span class="line">        EventExecutor executor = next.executor();</span><br><span class="line">        <span class="comment">// true</span></span><br><span class="line">        <span class="keyword">if</span> (executor.inEventLoop()) &#123;</span><br><span class="line">        	<span class="comment">// 调用下面的invokeChannelRead接口：invokeChannelRead(Object msg)</span></span><br><span class="line">            next.invokeChannelRead(m);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            executor.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    next.invokeChannelRead(m);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">invokeChannelRead</span><span class="params">(Object msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (invokeHandler()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">            	<span class="comment">// handler():获取当前遍历到的channelHandler，第一个为HeandContext，最后为TailContext</span></span><br><span class="line">            	<span class="comment">// 调用channel handler的channelRead接口</span></span><br><span class="line">                ((ChannelInboundHandler) handler()).channelRead(<span class="keyword">this</span>, msg);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                notifyHandlerException(t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fireChannelRead(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">	</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ChannelHandlerContext <span class="title">fireChannelRead</span><span class="params">(<span class="keyword">final</span> Object msg)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调回到上面的 invokeChannelRead(final AbstractChannelHandlerContext next, Object msg)</span></span><br><span class="line">        invokeChannelRead(findContextInbound(), msg);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 遍历出下一个ChannelHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> AbstractChannelHandlerContext <span class="title">findContextInbound</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        AbstractChannelHandlerContext ctx = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">        	<span class="comment">//获取下一个inbound类型的节点</span></span><br><span class="line">            ctx = ctx.next;</span><br><span class="line">            <span class="comment">// 必须为inbound类型</span></span><br><span class="line">        &#125; <span class="keyword">while</span> (!ctx.inbound);</span><br><span class="line">        <span class="keyword">return</span> ctx;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Pipeline中的第一个节点为HeadContext，它对于channelRead事件的处理，是直接往下传播，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">HeadContext</span> <span class="keyword">extends</span> <span class="title">AbstractChannelHandlerContext</span></span></span><br><span class="line"><span class="class">	</span></span><br><span class="line"><span class="class">	...</span></span><br><span class="line"><span class="class">	</span></span><br><span class="line"><span class="class">	@<span class="title">Override</span></span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">void</span> <span class="title">channelRead</span>(<span class="title">ChannelHandlerContext</span> <span class="title">ctx</span>, <span class="title">Object</span> <span class="title">msg</span>) <span class="title">throws</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    	<span class="comment">// HeadContext往下传播channelRead事件，</span></span><br><span class="line">   		<span class="comment">// 调用HeandlerContext中的接口：fireChannelRead(final Object msg)</span></span><br><span class="line">    	ctx.fireChannelRead(msg);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就这样一直循环下去，依次会调用到 InboundHandlerA、InboundHandlerB、InboundHandlerC 中的 <code>channelRead(ChannelHandlerContext ctx, Object msg)</code> 接口。</p><p>到最后一个TailContext节点，它对channelRead事件的处理如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultChannelPipeline</span> <span class="keyword">implements</span> <span class="title">ChannelPipeline</span> </span>&#123;</span><br><span class="line">	    </span><br><span class="line">    <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TailContext</span> <span class="keyword">extends</span> <span class="title">AbstractChannelHandlerContext</span> <span class="keyword">implements</span> <span class="title">ChannelInboundHandler</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">        ...</span><br><span class="line">		        </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="comment">// 调用onUnhandledInboundMessage接口</span></span><br><span class="line">            onUnhandledInboundMessage(msg);</span><br><span class="line">        &#125;      </span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	...</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 对未处理inbound消息做最后的处理</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onUnhandledInboundMessage</span><span class="params">(Object msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            logger.debug(<span class="string">"Discarded inbound message &#123;&#125; that reached at the tail of the pipeline. Please check your pipeline configuration."</span>, msg);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 对msg对象的引用数减1，当msg对象的引用数为0时，释放该对象的内存</span></span><br><span class="line">            ReferenceCountUtil.release(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是pipeline对inBound消息的处理流程。</p><h4 id="SimpleChannelInboundHandler"><a href="#SimpleChannelInboundHandler" class="headerlink" title="SimpleChannelInboundHandler"></a>SimpleChannelInboundHandler</h4><p>在前面的例子中，假如中间有一个ChannelHandler未对channelRead事件进行传播，就会导致消息对象无法得到释放，最终导致内存泄露。</p><p>我们还可以继承 SimpleChannelInboundHandler 来自定义ChannelHandler，它的channelRead方法，对消息对象做了msg处理，防止内存泄露。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">I</span>&gt; <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> release = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (acceptInboundMessage(msg)) &#123;</span><br><span class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                I imsg = (I) msg;</span><br><span class="line">                channelRead0(ctx, imsg);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                release = <span class="keyword">false</span>;</span><br><span class="line">                ctx.fireChannelRead(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (autoRelease &amp;&amp; release) &#123;</span><br><span class="line">                <span class="comment">// 对msg对象的引用数减1，当msg对象的引用数为0时，释放该对象的内存</span></span><br><span class="line">                ReferenceCountUtil.release(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="outBound事件传播"><a href="#outBound事件传播" class="headerlink" title="outBound事件传播"></a>outBound事件传播</h2><p>接下来，我们来分析Pipeline的outBound事件传播机制。代码示例如下：</p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyPipelineOutboundExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">        ServerBootstrap strap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">        strap.group(group)</span><br><span class="line">                .channel(NioServerSocketChannel.class)</span><br><span class="line">                .localAddress(<span class="keyword">new</span> InetSocketAddress(<span class="number">8888</span>))</span><br><span class="line">                .childOption(ChannelOption.TCP_NODELAY, <span class="keyword">true</span>)</span><br><span class="line">                .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        ch.pipeline().addLast(<span class="keyword">new</span> OutboundHandlerA());</span><br><span class="line">                        ch.pipeline().addLast(<span class="keyword">new</span> OutboundHandlerB());</span><br><span class="line">                        ch.pipeline().addLast(<span class="keyword">new</span> OutboundHandlerC());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ChannelFuture future = strap.bind().sync();</span><br><span class="line">            future.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            group.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OutboundHandlerA</span> <span class="keyword">extends</span> <span class="title">ChannelOutboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 输出消息</span></span><br><span class="line">        System.out.println(<span class="string">"OutboundHandlerA: "</span> + msg);</span><br><span class="line">        <span class="comment">// 传播write事件到下一个节点</span></span><br><span class="line">        ctx.write(msg, promise);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OutboundHandlerB</span> <span class="keyword">extends</span> <span class="title">ChannelOutboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 输出消息</span></span><br><span class="line">        System.out.println(<span class="string">"OutboundHandlerB: "</span> + msg);</span><br><span class="line">        <span class="comment">// 传播write事件到下一个节点</span></span><br><span class="line">        ctx.write(msg, promise);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerAdded</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 待handlerAdded事件触发3s后，模拟触发一个</span></span><br><span class="line">        ctx.executor().schedule(() -&gt; &#123;</span><br><span class="line"><span class="comment">//            ctx.write("Hello world ! ");</span></span><br><span class="line">            ctx.channel().write(<span class="string">"Hello world ! "</span>);</span><br><span class="line">        &#125;, <span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OutboundHandlerC</span> <span class="keyword">extends</span> <span class="title">ChannelOutboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 输出消息</span></span><br><span class="line">        System.out.println(<span class="string">"OutboundHandlerC: "</span> + msg);</span><br><span class="line">        <span class="comment">// 传播write事件到下一个节点</span></span><br><span class="line">        ctx.write(msg, promise);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/wangweiX/netty-in-action/blob/2.0-SNAPSHOT/chapter6/src/main/java/nia/chapter6/NettyPipelineOutboundExample.java" target="_blank" rel="noopener">源码</a></p></blockquote><p>通过 telnet 来连接上面启动好的netty服务，触发channel added事件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> telnet 127.0.0.1 8888</span><br></pre></td></tr></table></figure><p>按照OutboundHandlerA、OutboundHandlerB、OutboundHandlerC的添加顺序，控制台输出如下信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">OutboundHandlerC: Hello world ! </span><br><span class="line">OutboundHandlerB: Hello world ! </span><br><span class="line">OutboundHandlerA: Hello world !</span><br></pre></td></tr></table></figure><p>输出的顺序正好与ChannelHandler的添加顺序相反。</p><p>若是调用它们的添加顺序，则会输出对应顺序的信息，e.g:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> InboundHandlerB());</span><br><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> InboundHandlerA());</span><br><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> InboundHandlerC());</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>输出如下信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">OutboundHandlerC: Hello world ! </span><br><span class="line">OutboundHandlerA: Hello world ! </span><br><span class="line">OutboundHandlerB: Hello world !</span><br></pre></td></tr></table></figure><h3 id="源码分析-1"><a href="#源码分析-1" class="headerlink" title="源码分析"></a>源码分析</h3><blockquote><p><strong>强烈建议</strong> 下面的流程，自己通过IDE的Debug模式来分析</p></blockquote><p>从channel的write方法开始，往下传播write事件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractChannel</span> <span class="keyword">extends</span> <span class="title">DefaultAttributeMap</span> <span class="keyword">implements</span> <span class="title">Channel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ChannelFuture <span class="title">write</span><span class="params">(Object msg)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用pipeline往下传播wirte事件</span></span><br><span class="line">        <span class="keyword">return</span> pipeline.write(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着来看看Pipeline中的write接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultChannelPipeline</span> <span class="keyword">implements</span> <span class="title">ChannelPipeline</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ChannelFuture <span class="title">write</span><span class="params">(Object msg)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 从tail节点开始传播</span></span><br><span class="line">        <span class="keyword">return</span> tail.write(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...    </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用ChannelHandlerContext中的write接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractChannelHandlerContext</span> <span class="keyword">extends</span> <span class="title">DefaultAttributeMap</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">ChannelHandlerContext</span>, <span class="title">ResourceLeakHint</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ChannelFuture <span class="title">write</span><span class="params">(Object msg)</span> </span>&#123;</span><br><span class="line">   	 	<span class="comment">// 往下调用write接口</span></span><br><span class="line">        <span class="keyword">return</span> write(msg, newPromise());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ChannelFuture <span class="title">write</span><span class="params">(<span class="keyword">final</span> Object msg, <span class="keyword">final</span> ChannelPromise promise)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"msg"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (isNotValidPromise(promise, <span class="keyword">true</span>)) &#123;</span><br><span class="line">                ReferenceCountUtil.release(msg);</span><br><span class="line">                <span class="comment">// cancelled</span></span><br><span class="line">                <span class="keyword">return</span> promise;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">            ReferenceCountUtil.release(msg);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 往下调用write接口</span></span><br><span class="line">        write(msg, <span class="keyword">false</span>, promise);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> promise;</span><br><span class="line">    &#125;    </span><br><span class="line">     </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(Object msg, <span class="keyword">boolean</span> flush, ChannelPromise promise)</span> </span>&#123;</span><br><span class="line">    	<span class="comment">// 寻找下一个outbound类型的channelHandlerContext</span></span><br><span class="line">        AbstractChannelHandlerContext next = findContextOutbound();</span><br><span class="line">        <span class="keyword">final</span> Object m = pipeline.touch(msg, next);</span><br><span class="line">        EventExecutor executor = next.executor();</span><br><span class="line">        <span class="keyword">if</span> (executor.inEventLoop()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (flush) &#123;</span><br><span class="line">                next.invokeWriteAndFlush(m, promise);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            	<span class="comment">// 调用接口 invokeWrite(Object msg, ChannelPromise promise)</span></span><br><span class="line">                next.invokeWrite(m, promise);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            AbstractWriteTask task;</span><br><span class="line">            <span class="keyword">if</span> (flush) &#123;</span><br><span class="line">                task = WriteAndFlushTask.newInstance(next, m, promise);</span><br><span class="line">            &#125;  <span class="keyword">else</span> &#123;</span><br><span class="line">                task = WriteTask.newInstance(next, m, promise);</span><br><span class="line">            &#125;</span><br><span class="line">            safeExecute(executor, task, promise, m);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 寻找下一个outbound类型的channelHandlerContext</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> AbstractChannelHandlerContext <span class="title">findContextOutbound</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        AbstractChannelHandlerContext ctx = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            ctx = ctx.prev;</span><br><span class="line">        &#125; <span class="keyword">while</span> (!ctx.outbound);</span><br><span class="line">        <span class="keyword">return</span> ctx;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">invokeWrite</span><span class="params">(Object msg, ChannelPromise promise)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (invokeHandler()) &#123;</span><br><span class="line">        	<span class="comment">// 继续往下调用</span></span><br><span class="line">            invokeWrite0(msg, promise);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            write(msg, promise);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">invokeWrite0</span><span class="params">(Object msg, ChannelPromise promise)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        	<span class="comment">// 获取当前的channelHandler，调用其write接口</span></span><br><span class="line">        	<span class="comment">// handler()依次会返回 OutboundHandlerC OutboundHandlerB OutboundHandlerA</span></span><br><span class="line">            ((ChannelOutboundHandler) handler()).write(<span class="keyword">this</span>, msg, promise);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            notifyOutboundHandlerException(t, promise);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...    </span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终会调用到HeadContext的write接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 调用unsafe进行写数据操作</span></span><br><span class="line">    unsafe.write(msg, promise);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异常传播"><a href="#异常传播" class="headerlink" title="异常传播"></a>异常传播</h2><p>了解了Pipeline的入站与出站事件的机制之后，我们再来看看Pipeline的异常处理机制。</p><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyPipelineExceptionCaughtExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">        ServerBootstrap strap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">        strap.group(group)</span><br><span class="line">                .channel(NioServerSocketChannel.class)</span><br><span class="line">                .localAddress(<span class="keyword">new</span> InetSocketAddress(<span class="number">8888</span>))</span><br><span class="line">                .childOption(ChannelOption.TCP_NODELAY, <span class="keyword">true</span>)</span><br><span class="line">                .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        ch.pipeline().addLast(<span class="keyword">new</span> InboundHandlerA());</span><br><span class="line">                        ch.pipeline().addLast(<span class="keyword">new</span> InboundHandlerB());</span><br><span class="line">                        ch.pipeline().addLast(<span class="keyword">new</span> InboundHandlerC());</span><br><span class="line">                        ch.pipeline().addLast(<span class="keyword">new</span> OutboundHandlerA());</span><br><span class="line">                        ch.pipeline().addLast(<span class="keyword">new</span> OutboundHandlerB());</span><br><span class="line">                        ch.pipeline().addLast(<span class="keyword">new</span> OutboundHandlerC());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ChannelFuture future = strap.bind().sync();</span><br><span class="line">            future.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            group.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InboundHandlerA</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"InboundHandlerA.exceptionCaught:"</span> + cause.getMessage());</span><br><span class="line">            ctx.fireExceptionCaught(cause);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InboundHandlerB</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"ERROR !!!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"InboundHandlerB.exceptionCaught:"</span> + cause.getMessage());</span><br><span class="line">            ctx.fireExceptionCaught(cause);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InboundHandlerC</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"InboundHandlerC.exceptionCaught:"</span> + cause.getMessage());</span><br><span class="line">            ctx.fireExceptionCaught(cause);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OutboundHandlerA</span> <span class="keyword">extends</span> <span class="title">ChannelOutboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"OutboundHandlerA.exceptionCaught:"</span> + cause.getMessage());</span><br><span class="line">            ctx.fireExceptionCaught(cause);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OutboundHandlerB</span> <span class="keyword">extends</span> <span class="title">ChannelOutboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"OutboundHandlerB.exceptionCaught:"</span> + cause.getMessage());</span><br><span class="line">            ctx.fireExceptionCaught(cause);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OutboundHandlerC</span> <span class="keyword">extends</span> <span class="title">ChannelOutboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"OutboundHandlerC.exceptionCaught:"</span> + cause.getMessage());</span><br><span class="line">            ctx.fireExceptionCaught(cause);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/wangweiX/netty-in-action/blob/2.0-SNAPSHOT/chapter6/src/main/java/nia/chapter6/NettyPipelineExceptionCaughtExample.java" target="_blank" rel="noopener">源码</a></p></blockquote><p>通过 telnet 来连接上面启动好的netty服务，并在控制台发送任意字符：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> telnet 127.0.0.1 8888</span><br></pre></td></tr></table></figure><p>触发channel read事件并抛出异常，控制台输出如下信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">InboundHandlerB.exceptionCaught:ERROR !!!</span><br><span class="line">InboundHandlerC.exceptionCaught:ERROR !!!</span><br><span class="line">OutboundHandlerA.exceptionCaught:ERROR !!!</span><br><span class="line">OutboundHandlerB.exceptionCaught:ERROR !!!</span><br><span class="line">OutboundHandlerC.exceptionCaught:ERROR !!!</span><br></pre></td></tr></table></figure><p>可以看到异常的捕获与我们添加的ChannelHandler顺序相同。</p><h3 id="源码分析-2"><a href="#源码分析-2" class="headerlink" title="源码分析"></a>源码分析</h3><p>在我们的示例中，InboundHandlerB的ChannelRead接口抛出异常，导致从InboundHandlerA将ChannelRead事件传播到InboundHandlerB的过程中出现异常，异常被捕获。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractChannelHandlerContext</span> <span class="keyword">extends</span> <span class="title">DefaultAttributeMap</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">ChannelHandlerContext</span>, <span class="title">ResourceLeakHint</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">    ...</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ChannelHandlerContext <span class="title">fireExceptionCaught</span><span class="params">(<span class="keyword">final</span> Throwable cause)</span> </span>&#123;</span><br><span class="line">    	<span class="comment">//调用invokeExceptionCaught接口</span></span><br><span class="line">        invokeExceptionCaught(next, cause);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">invokeExceptionCaught</span><span class="params">(<span class="keyword">final</span> AbstractChannelHandlerContext next, <span class="keyword">final</span> Throwable cause)</span> </span>&#123;</span><br><span class="line">        ObjectUtil.checkNotNull(cause, <span class="string">"cause"</span>);</span><br><span class="line">        EventExecutor executor = next.executor();</span><br><span class="line">        <span class="keyword">if</span> (executor.inEventLoop()) &#123;</span><br><span class="line">        	<span class="comment">// 调用下一个节点的invokeExceptionCaught接口</span></span><br><span class="line">            next.invokeExceptionCaught(cause);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                executor.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        next.invokeExceptionCaught(cause);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">                    logger.warn(<span class="string">"Failed to submit an exceptionCaught() event."</span>, t);</span><br><span class="line">                    logger.warn(<span class="string">"The exceptionCaught() event that was failed to submit was:"</span>, cause);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">invokeChannelRead</span><span class="params">(Object msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (invokeHandler()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 抛出异常</span></span><br><span class="line">                ((ChannelInboundHandler) handler()).channelRead(<span class="keyword">this</span>, msg);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                <span class="comment">// 异常捕获，往下传播</span></span><br><span class="line">                notifyHandlerException(t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fireChannelRead(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 通知Handler发生异常事件</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">notifyHandlerException</span><span class="params">(Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (inExceptionCaught(cause)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">                logger.warn(</span><br><span class="line">                    <span class="string">"An exception was thrown by a user handler "</span> +</span><br><span class="line">                    <span class="string">"while handling an exceptionCaught event"</span>, cause);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">		<span class="comment">// 往下调用invokeExceptionCaught接口</span></span><br><span class="line">        invokeExceptionCaught(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">invokeExceptionCaught</span><span class="params">(<span class="keyword">final</span> Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (invokeHandler()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 调用当前ChannelHandler的exceptionCaught接口</span></span><br><span class="line">                <span class="comment">// 在我们的案例中，依次会调用InboundHandlerB、InboundHandlerC、</span></span><br><span class="line">                <span class="comment">// OutboundHandlerA、OutboundHandlerB、OutboundHandlC</span></span><br><span class="line">                handler().exceptionCaught(<span class="keyword">this</span>, cause);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable error) &#123;</span><br><span class="line">                <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.debug(</span><br><span class="line">                        <span class="string">"An exception &#123;&#125;"</span> +</span><br><span class="line">                        <span class="string">"was thrown by a user handler's exceptionCaught() "</span> +</span><br><span class="line">                        <span class="string">"method while handling the following exception:"</span>,</span><br><span class="line">                        ThrowableUtil.stackTraceToString(error), cause);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">                    logger.warn(</span><br><span class="line">                        <span class="string">"An exception '&#123;&#125;' [enable DEBUG level for full stacktrace] "</span> +</span><br><span class="line">                        <span class="string">"was thrown by a user handler's exceptionCaught() "</span> +</span><br><span class="line">                        <span class="string">"method while handling the following exception:"</span>, error, cause);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fireExceptionCaught(cause);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	...</span><br><span class="line">		</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终会调用到TailContext节点的exceptionCaught接口，如果我们中途没有对异常进行拦截处理，做会打印出一段警告信息！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultChannelPipeline</span> <span class="keyword">implements</span> <span class="title">ChannelPipeline</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TailContext</span> <span class="keyword">extends</span> <span class="title">AbstractChannelHandlerContext</span> <span class="keyword">implements</span> <span class="title">ChannelInboundHandler</span> </span>&#123;</span><br><span class="line">       	</span><br><span class="line">        ...</span><br><span class="line">            </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            onUnhandledInboundException(cause);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ...</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onUnhandledInboundException</span><span class="params">(Throwable cause)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                logger.warn(</span><br><span class="line">                    <span class="string">"An exceptionCaught() event was fired, and it reached at the tail of the pipeline. "</span> +</span><br><span class="line">                    <span class="string">"It usually means the last handler in the pipeline did not handle the exception."</span>,</span><br><span class="line">                    cause);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                ReferenceCountUtil.release(cause);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在实际的应用中，一般会定一个ChannelHandler，放置Pipeline末尾，专门用来处理中途出现的各种异常。</p><h4 id="最佳异常处理实践"><a href="#最佳异常处理实践" class="headerlink" title="最佳异常处理实践"></a>最佳异常处理实践</h4><p>单独定义ExceptionCaughtHandler来处理异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">...</span><br><span class="line">   </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExceptionCaughtHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cause <span class="keyword">instanceof</span> Exception) &#123;</span><br><span class="line">            <span class="comment">// TODO</span></span><br><span class="line">            System.out.println(<span class="string">"Successfully caught exception ! "</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// TODO</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">    </span><br><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> ExceptionCaughtHandler());</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">InboundHandlerB.exceptionCaught:ERROR !!!</span><br><span class="line">InboundHandlerC.exceptionCaught:ERROR !!!</span><br><span class="line">OutboundHandlerA.exceptionCaught:ERROR !!!</span><br><span class="line">OutboundHandlerB.exceptionCaught:ERROR !!!</span><br><span class="line">OutboundHandlerC.exceptionCaught:ERROR !!!</span><br><span class="line">Successfully caught exception !  <span class="comment">// 成功捕获日志</span></span><br></pre></td></tr></table></figure><h2 id="Pipeline回顾与总结"><a href="#Pipeline回顾与总结" class="headerlink" title="Pipeline回顾与总结"></a>Pipeline回顾与总结</h2><p>至此，我们对Pipeline的原理的解析就完成了。</p><ul><li>Pipeline是在什么时候创建的？</li><li>Pipeline添加与删除节点的逻辑是怎么样的？</li><li>netty是如何判断ChannelHandler类型的？</li><li>如何处理ChannelHandler中抛出的异常？</li><li>对于ChannelHandler的添加应遵循什么样的顺序？</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://coding.imooc.com/class/230.html" target="_blank" rel="noopener">Java读源码之Netty深入剖析</a></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Netty Pipeline源码分析(1)]]></title>
      <url>/posts/netty-pipeline-source-analyse-1.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/pexels-photo-1208949.jpeg?imageslim" alt="pexels-photo-1208949"></p><p>前面，我们分析了Netty EventLoop的 <a href="https://wangwei.one/posts/netty-nioeventloop-analyse-for-create.html">创建</a> 与 <a href="https://wangwei.one/posts/netty-nioeventloop-analyse-for-startup.html">启动</a> 原理，接下里我们来分析Netty中另外两个重要组件—— <strong><a href="https://netty.io/4.1/api/io/netty/channel/ChannelHandler.html" target="_blank" rel="noopener"><em>ChannelHandler</em></a></strong> 与 <strong><a href="https://netty.io/4.1/api/io/netty/channel/ChannelPipeline.html" target="_blank" rel="noopener"><em>Pipeline</em></a></strong>。Netty中I/O事件的传播机制均由它负责，下面我们来看看它是如何实现的。</p><a id="more"></a><blockquote><p>Netty版本：4.1.30</p></blockquote><p>我们前面在讲 <a href="https://wangwei.one/posts/netty-channel-source-analyse.html">Channel创建</a> 时，在AbstractChannel的构造函数中， 一笔带过地提到了Pipeline，现在我们来深入分析一下它的原理。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="Netty-channel-lifecycle"><a href="#Netty-channel-lifecycle" class="headerlink" title="Netty channel lifecycle"></a>Netty channel lifecycle</h3><p>前面，我们在分析 <a href="https://wangwei.one/posts/netty-channel-source-analyse.html">Netty channel</a> 源码时，分析了Channel的创建、初始化、注册、绑定过程。在Netty中，channel的生命周期如下所示：</p><p><img src="https://img.i7years.com/netty/Channel%20lifecycle.png" alt="Channel lifecycle"></p><ul><li>ChannelRegistered：Channel注册到了EventLoop上</li><li>ChannelActive：Channel激活，连接到了远程某一个节点上，可以收发数据了</li><li>ChannelInactive：断开连接</li><li>ChannelUnregistered：Channel从EventLoop上取消注册</li></ul><h3 id="Netty-channelHandler"><a href="#Netty-channelHandler" class="headerlink" title="Netty channelHandler"></a>Netty channelHandler</h3><p>Channel 每一次状态的变化，都会产生一个对应的事件，并且都会触发 <a href="https://netty.io/4.1/api/io/netty/channel/ChannelHandler.html" target="_blank" rel="noopener"><strong><em>ChannelHandler</em></strong></a> 中对应的方法进行处理，例如，当一个Channel成功注册到EventLoop上后，会有触发channelHanndler中的handlerRegistered(…) 来处理该事件。</p><p><img src="https://img.i7years.com/netty/ChannelHandlerUML.png" alt="ChannelHandlerUML"></p><p>在上面的 ChannelHandler UML中，最为重要的两个ChannelHandler：</p><ul><li><a href="https://netty.io/4.1/api/io/netty/channel/ChannelInboundHandler.html" target="_blank" rel="noopener">ChannelInboundHandler</a>：处理入站数据以及channel的各种状态变化</li><li><a href="https://netty.io/4.1/api/io/netty/channel/ChannelOutboundHandler.html" target="_blank" rel="noopener">ChannelOutboundHandler</a>：处理出站数据并允许拦截所有操作</li></ul><h3 id="Netty-ChannelPipeline"><a href="#Netty-ChannelPipeline" class="headerlink" title="Netty ChannelPipeline"></a>Netty ChannelPipeline</h3><p>前面我们在分析Channel创建过程时，每一个新创建的Channel都将会被分配一个新的ChannelPipeline。ChannelPipeline是一个拦截流经Channel的入站和出站事件的ChannelHandler实例链，如图所示：</p><p><img src="https://img.i7years.com/netty/Channel-Pipeline.png" alt="Channel-Pipeline"></p><p>一个 Channel 包含了一个 ChannelPipeline，ChannelPipeline内部是一个双向的链表结构，内部由一个个的ChannelHandlerContext节点组成，ChannelPipeline有头尾两个固定的节点HeadContext与TailContext。用户自定的ChannelHandler就是由ChannelHandlerContext包装成Pipeline的节点，参与Channel整个生命周期中所触发的入站事件与出站事件以及相应数据流的拦截处理。</p><p>根据事件的起源，事件将会被ChannelInboundHandler(入站处理器)或者ChannelOutboundHandler(出站处理器)处理。随后，通过调用ChannelHandlerContext实现，它将被转发给同一超类型的下一个ChannelHandler，如图所示：</p><p><img src="https://img.i7years.com/netty/Channel%20Pipeline%20Event%20Flow.png" alt="Channel Pipeline Event Flow"></p><h2 id="Pipeline-UML"><a href="#Pipeline-UML" class="headerlink" title="Pipeline UML"></a>Pipeline UML</h2><p>我们先来看下 <em>ChannelPipeline</em> 以及 <em>ChannelHandlerContext</em> 的类图结构，它们都实现了<em>ChannelInboundInvoker</em>与<em>ChannelOutboundInvoker</em>接口。</p><p><img src="https://img.i7years.com/netty/Netty%20Pipeline%20UML.png" alt="Netty Pipeline UML"></p><h2 id="Pipeline初始化"><a href="#Pipeline初始化" class="headerlink" title="Pipeline初始化"></a>Pipeline初始化</h2><p>AbstractChannel构造函数如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">AbstractChannel</span><span class="params">(Channel parent)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.parent = parent;</span><br><span class="line">    id = newId();</span><br><span class="line">    unsafe = newUnsafe();</span><br><span class="line">    <span class="comment">// 创建默认Pipeline</span></span><br><span class="line">    pipeline = newChannelPipeline();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建默认Pipeline</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> DefaultChannelPipeline <span class="title">newChannelPipeline</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DefaultChannelPipeline(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DefaultChannelPipeline 构造函数如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">DefaultChannelPipeline</span><span class="params">(Channel channel)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.channel = ObjectUtil.checkNotNull(channel, <span class="string">"channel"</span>);</span><br><span class="line">    succeededFuture = <span class="keyword">new</span> SucceededChannelFuture(channel, <span class="keyword">null</span>);</span><br><span class="line">    voidPromise =  <span class="keyword">new</span> VoidChannelPromise(channel, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置尾部节点</span></span><br><span class="line">    tail = <span class="keyword">new</span> TailContext(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">// 设置头部节点</span></span><br><span class="line">    head = <span class="keyword">new</span> HeadContext(<span class="keyword">this</span>);</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 将tail与head串联起来</span></span><br><span class="line">    head.next = tail;</span><br><span class="line">    tail.prev = head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到Pipeline其实是一个双向链表的结构，刚刚初始化的时候，Pipeline(管道)中只有两个节点，如图：</p><p><img src="https://img.i7years.com/netty/Pipeline%20Init%20Ctx.png" alt="Pipeline Init Ctx"></p><p>接下来我们看看组成Pipeline节点的对象—— ChannelHandlerContext。</p><h3 id="ChannelHandlerContext"><a href="#ChannelHandlerContext" class="headerlink" title="ChannelHandlerContext"></a>ChannelHandlerContext</h3><p>ChannelHandlerContext 实现了AttributeMap、ChannelInboundInvoker、ChannelOutboundInvoker接口。Pipeline中的事件传播，都是由ChannelHandlerContext负责，将发生的事件从一个节点传到下一个节点。</p><h4 id="ChannelHandlerContext接口"><a href="#ChannelHandlerContext接口" class="headerlink" title="ChannelHandlerContext接口"></a>ChannelHandlerContext接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ChannelHandlerContext</span> <span class="keyword">extends</span> <span class="title">AttributeMap</span>, <span class="title">ChannelInboundInvoker</span>, <span class="title">ChannelOutboundInvoker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回ChannelHandlerContext中绑定的Channel</span></span><br><span class="line">    <span class="function">Channel <span class="title">channel</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回专用于执行任务的 EventExecutor</span></span><br><span class="line">    <span class="function">EventExecutor <span class="title">executor</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回ChannelHandlerContext的唯一名称。该名字将在ChannelHandler被添加到ChannelPipeline时会被用到，从ChannelPipeline中访问注册的ChannelHandler时，也会被用到。</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 返回ChannelHandlerContext中绑定的ChannelHandler</span></span><br><span class="line">    <span class="function">ChannelHandler <span class="title">handler</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 属于这个ChannelHandlerContext的ChannelHandler从ChannelPipeline移除了，返回true</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isRemoved</span><span class="params">()</span></span>;</span><br><span class="line">		</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">ChannelHandlerContext <span class="title">fireChannelRegistered</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">ChannelHandlerContext <span class="title">fireChannelUnregistered</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">ChannelHandlerContext <span class="title">fireChannelActive</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">ChannelHandlerContext <span class="title">fireChannelInactive</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">ChannelHandlerContext <span class="title">fireExceptionCaught</span><span class="params">(Throwable cause)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">ChannelHandlerContext <span class="title">fireUserEventTriggered</span><span class="params">(Object evt)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">ChannelHandlerContext <span class="title">fireChannelRead</span><span class="params">(Object msg)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">ChannelHandlerContext <span class="title">fireChannelReadComplete</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">ChannelHandlerContext <span class="title">fireChannelWritabilityChanged</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">ChannelHandlerContext <span class="title">read</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">ChannelHandlerContext <span class="title">flush</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回分配的ChannelPipeline</span></span><br><span class="line">    <span class="function">ChannelPipeline <span class="title">pipeline</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回用于分配ByteBuf的ByteBufAllocator</span></span><br><span class="line">    <span class="function">ByteBufAllocator <span class="title">alloc</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AttributeMap接口"><a href="#AttributeMap接口" class="headerlink" title="AttributeMap接口"></a>AttributeMap接口</h4><p>实现 AttributeMap 接口，表示ChannelHandlerContext节点可以存储自定义的属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 属性Map接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AttributeMap</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 通过Key获取属性</span></span><br><span class="line">    &lt;T&gt; <span class="function">Attribute&lt;T&gt; <span class="title">attr</span><span class="params">(AttributeKey&lt;T&gt; key)</span></span>;</span><br><span class="line">	<span class="comment">// 判断属性是否存在</span></span><br><span class="line">    &lt;T&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">hasAttr</span><span class="params">(AttributeKey&lt;T&gt; key)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ChannelInboundInvoker接口"><a href="#ChannelInboundInvoker接口" class="headerlink" title="ChannelInboundInvoker接口"></a>ChannelInboundInvoker接口</h4><p>实现ChannelInboundInvoker接口，表示节点可以用于传播入站相关的事件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ChannelInboundInvoker</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 当Channel注册到EventLoop上时</span></span><br><span class="line">	<span class="comment">// 调用ChannelPipeline中下一个ChannelInboundHandler的channelRegistered(ChannelHandlerContext)方法 </span></span><br><span class="line">    <span class="function">ChannelInboundInvoker <span class="title">fireChannelRegistered</span><span class="params">()</span></span>;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 当Channel从EventLoop上取消注册</span></span><br><span class="line">    <span class="comment">// 调用ChannelPipeline中下一个ChannelInboundHandler的channelUnregistered(ChannelHandlerContext)方法 </span></span><br><span class="line">    <span class="function">ChannelInboundInvoker <span class="title">fireChannelUnregistered</span><span class="params">()</span></span>;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 当Channel处理激活状态，意味着连接已经建立</span></span><br><span class="line">    <span class="comment">// 调用ChannelPipeline中下一个ChannelInboundHandler的channelActive(ChannelHandlerContext)方法 </span></span><br><span class="line">    <span class="function">ChannelInboundInvoker <span class="title">fireChannelActive</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 当Channel处理失效状态，意味着连接已经断开</span></span><br><span class="line">	<span class="comment">// 调用ChannelPipeline中下一个ChannelInboundHandler的channelInactive(ChannelHandlerContext)方法 </span></span><br><span class="line">    <span class="function">ChannelInboundInvoker <span class="title">fireChannelInactive</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在pipeline中某个一个入站(inbound)操作出现了异常</span></span><br><span class="line">	<span class="comment">// 调用ChannelPipeline中下一个ChannelInboundHandler的exceptionCaught(ChannelHandlerContext)方法 </span></span><br><span class="line">    <span class="function">ChannelInboundInvoker <span class="title">fireExceptionCaught</span><span class="params">(Throwable cause)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 收到用户自定义的事件</span></span><br><span class="line">	<span class="comment">// 调用ChannelPipeline中下一个ChannelInboundHandler的userEventTriggered(ChannelHandlerContext)方法</span></span><br><span class="line">    <span class="function">ChannelInboundInvoker <span class="title">fireUserEventTriggered</span><span class="params">(Object event)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Channel接收到了消息</span></span><br><span class="line">	<span class="comment">// 调用ChannelPipeline中下一个ChannelInboundHandler的channelRead(ChannelHandlerContext)方法</span></span><br><span class="line">    <span class="function">ChannelInboundInvoker <span class="title">fireChannelRead</span><span class="params">(Object msg)</span></span>;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">// 调用ChannelPipeline中下一个ChannelInboundHandler的channelReadComplete(ChannelHandlerContext)方法</span></span><br><span class="line">    <span class="function">ChannelInboundInvoker <span class="title">fireChannelReadComplete</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">// 调用ChannelPipeline中下一个ChannelInboundHandler的channelWritabilityChanged(ChannelHandlerContext)方法</span></span><br><span class="line">    <span class="function">ChannelInboundInvoker <span class="title">fireChannelWritabilityChanged</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ChannelOutboundInvoker接口"><a href="#ChannelOutboundInvoker接口" class="headerlink" title="ChannelOutboundInvoker接口"></a>ChannelOutboundInvoker接口</h4><p>实现ChannelOutboundInvoker接口，意味着节点可以用来处理出站相关的事件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ChannelOutboundInvoker</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 将Channel绑定到一个本地地址，这将调用ChannelPipeline中的下一个ChannelOutboundHandler的bind(ChannelHandlerContext, Socket- Address, ChannelPromise)方法</span></span><br><span class="line">    <span class="function">ChannelFuture <span class="title">bind</span><span class="params">(SocketAddress localAddress)</span></span>;</span><br><span class="line">	<span class="function">ChannelFuture <span class="title">bind</span><span class="params">(SocketAddress localAddress, ChannelPromise promise)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将Channel连接到一个远程地址，这将调用ChannelPipeline中的下一个ChannelOutboundHandler的connect(ChannelHandlerContext, Socket- Address, ChannelPromise)方法</span></span><br><span class="line">    <span class="function">ChannelFuture <span class="title">connect</span><span class="params">(SocketAddress remoteAddress)</span></span>;</span><br><span class="line">    <span class="function">ChannelFuture <span class="title">connect</span><span class="params">(SocketAddress remoteAddress, ChannelPromise promise)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ChannelFuture <span class="title">connect</span><span class="params">(SocketAddress remoteAddress, SocketAddress localAddress)</span></span>;</span><br><span class="line">	<span class="function">ChannelFuture <span class="title">connect</span><span class="params">(SocketAddress remoteAddress, SocketAddress localAddress, ChannelPromise promise)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将Channel断开连接。这将调用ChannelPipeline中的下一个ChannelOutbound- Handler的disconnect(ChannelHandlerContext, Channel Promise)方法</span></span><br><span class="line">    <span class="function">ChannelFuture <span class="title">disconnect</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">ChannelFuture <span class="title">disconnect</span><span class="params">(ChannelPromise promise)</span></span>;</span><br><span class="line"></span><br><span class="line">   	<span class="comment">// 将Channel关闭。这将调用ChannelPipeline中的下一个ChannelOutbound- Handler的close(ChannelHandlerContext, ChannelPromise)方法</span></span><br><span class="line">    <span class="function">ChannelFuture <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">ChannelFuture <span class="title">close</span><span class="params">(ChannelPromise promise)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将Channel从它先前所分配的EventExecutor（即EventLoop）中注销。这将调用ChannelPipeline中的下一个ChannelOutboundHandler的deregister (ChannelHandlerContext, ChannelPromise)方法</span></span><br><span class="line">    <span class="function">ChannelFuture <span class="title">deregister</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">ChannelFuture <span class="title">deregister</span><span class="params">(ChannelPromise promise)</span></span>;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 请求从Channel中读取更多的数据。这将调用ChannelPipeline中的下一个ChannelOutboundHandler的read(ChannelHandlerContext)方法</span></span><br><span class="line">    <span class="function">ChannelOutboundInvoker <span class="title">read</span><span class="params">()</span></span>;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 将消息写入Channel。这将调用ChannelPipeline中的下一个Channel- OutboundHandler的write(ChannelHandlerContext, Object msg, Channel- Promise)方法。注意：这并不会将消息写入底层的Socket，而只会将它放入队列中。要将它写入Socket，需要调用flush()或者writeAndFlush()方法 </span></span><br><span class="line">    <span class="function">ChannelFuture <span class="title">write</span><span class="params">(Object msg)</span></span>;</span><br><span class="line">    <span class="function">ChannelFuture <span class="title">write</span><span class="params">(Object msg, ChannelPromise promise)</span></span>;</span><br><span class="line">	</span><br><span class="line">   <span class="comment">// 冲刷Channel所有挂起的写入。这将调用ChannelPipeline中的下一个Channel- OutboundHandler的flush(ChannelHandlerContext)方法</span></span><br><span class="line">    <span class="function">ChannelOutboundInvoker <span class="title">flush</span><span class="params">()</span></span>;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 这是一个先调用write()方法再接着调用flush()方法的便利方法</span></span><br><span class="line">    <span class="function">ChannelFuture <span class="title">writeAndFlush</span><span class="params">(Object msg, ChannelPromise promise)</span></span>;</span><br><span class="line">    <span class="function">ChannelFuture <span class="title">writeAndFlush</span><span class="params">(Object msg)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ChannelPromise <span class="title">newPromise</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ChannelProgressivePromise <span class="title">newProgressivePromise</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ChannelFuture <span class="title">newSucceededFuture</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ChannelFuture <span class="title">newFailedFuture</span><span class="params">(Throwable cause)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ChannelPromise <span class="title">voidPromise</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TailContext-amp-HeadContext"><a href="#TailContext-amp-HeadContext" class="headerlink" title="TailContext &amp; HeadContext"></a>TailContext &amp; HeadContext</h3><p>接下来，我们看看Pipeline中的头部与尾部节点。</p><h4 id="TailContext节点"><a href="#TailContext节点" class="headerlink" title="TailContext节点"></a>TailContext节点</h4><p>TailContext是尾部节点，inbound类型，主要处理Pipeline中数据流的收尾工作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TailContext</span> <span class="keyword">extends</span> <span class="title">AbstractChannelHandlerContext</span> <span class="keyword">implements</span> <span class="title">ChannelInboundHandler</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    TailContext(DefaultChannelPipeline pipeline) &#123;</span><br><span class="line">        <span class="comment">// 调用AbstractChannelHandlerContext构造器</span></span><br><span class="line">        <span class="comment">// TailContext是一个inbound(入站)节点</span></span><br><span class="line">        <span class="keyword">super</span>(pipeline, <span class="keyword">null</span>, TAIL_NAME, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 设置添加完成</span></span><br><span class="line">        setAddComplete();</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 返回Handler，就是它自身</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ChannelHandler <span class="title">handler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    ...</span><br><span class="line">	</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        onUnhandledInboundException(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        onUnhandledInboundMessage(msg);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果pipeline中有异常没做处理，最终会由TailContext打赢一个警告日志</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onUnhandledInboundException</span><span class="params">(Throwable cause)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        logger.warn(</span><br><span class="line">            <span class="string">"An exceptionCaught() event was fired, and it reached at the tail of the pipeline. "</span> +</span><br><span class="line">            <span class="string">"It usually means the last handler in the pipeline did not handle the exception."</span>,</span><br><span class="line">            cause);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 释放对象</span></span><br><span class="line">        ReferenceCountUtil.release(cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果pipeline中有read消息没有处理，最终会由TailContext打赢一个警告日志</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onUnhandledInboundMessage</span><span class="params">(Object msg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        logger.debug(</span><br><span class="line">            <span class="string">"Discarded inbound message &#123;&#125; that reached at the tail of the pipeline. "</span> +</span><br><span class="line">            <span class="string">"Please check your pipeline configuration."</span>, msg);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        ReferenceCountUtil.release(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 ChannelHandlerContext 状态为添加完成，状态=2</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setAddComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">int</span> oldState = handlerState;</span><br><span class="line">        <span class="keyword">if</span> (oldState == REMOVE_COMPLETE || HANDLER_STATE_UPDATER.compareAndSet(<span class="keyword">this</span>, oldState, ADD_COMPLETE)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">       	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AbstractChannelHandlerContext"><a href="#AbstractChannelHandlerContext" class="headerlink" title="AbstractChannelHandlerContext"></a>AbstractChannelHandlerContext</h4><p>AbstractChannelHandlerContext 是 ChannelHandlerContext 的抽象实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractChannelHandlerContext</span> <span class="keyword">extends</span> <span class="title">DefaultAttributeMap</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">ChannelHandlerContext</span>, <span class="title">ResourceLeakHint</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 下一个节点</span></span><br><span class="line">    <span class="keyword">volatile</span> AbstractChannelHandlerContext next;</span><br><span class="line">    <span class="comment">// 上一个节点</span></span><br><span class="line">    <span class="keyword">volatile</span> AbstractChannelHandlerContext prev;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 是否为inBound类型</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> inbound;</span><br><span class="line">    <span class="comment">// 是否为outbound类型</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> outbound;</span><br><span class="line">    <span class="comment">// 绑定的默认pipeline</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DefaultChannelPipeline pipeline;</span><br><span class="line">    <span class="comment">// 节点名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> ordered;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Will be set to null if no child executor should be used, otherwise it will be set to the</span></span><br><span class="line">    <span class="comment">// child executor.</span></span><br><span class="line">    <span class="keyword">final</span> EventExecutor executor;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    AbstractChannelHandlerContext(DefaultChannelPipeline pipeline, EventExecutor executor, String name,<span class="keyword">boolean</span> inbound, <span class="keyword">boolean</span> outbound) &#123;</span><br><span class="line">        <span class="comment">// 设置HandlerContext名称</span></span><br><span class="line">        <span class="keyword">this</span>.name = ObjectUtil.checkNotNull(name, <span class="string">"name"</span>);</span><br><span class="line">        <span class="comment">// 绑定pipeline</span></span><br><span class="line">        <span class="keyword">this</span>.pipeline = pipeline;</span><br><span class="line">        <span class="comment">// 绑定executor(这里为null)</span></span><br><span class="line">        <span class="keyword">this</span>.executor = executor;</span><br><span class="line">        <span class="comment">// 如果节点为inbound类型就设置为true</span></span><br><span class="line">        <span class="keyword">this</span>.inbound = inbound;</span><br><span class="line">        <span class="comment">// 如果节点为outbound类型就设置为true</span></span><br><span class="line">        <span class="keyword">this</span>.outbound = outbound;</span><br><span class="line">        <span class="comment">// Its ordered if its driven by the EventLoop or the given Executor is an instanceof OrderedEventExecutor.</span></span><br><span class="line">        ordered = executor == <span class="keyword">null</span> || executor <span class="keyword">instanceof</span> OrderedEventExecutor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="DefaultChannelHandlerContext"><a href="#DefaultChannelHandlerContext" class="headerlink" title="DefaultChannelHandlerContext"></a>DefaultChannelHandlerContext</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultChannelHandlerContext</span> <span class="keyword">extends</span> <span class="title">AbstractChannelHandlerContext</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ChannelHandler handler;</span><br><span class="line">	</span><br><span class="line">    DefaultChannelHandlerContext(</span><br><span class="line">            DefaultChannelPipeline pipeline, EventExecutor executor, String name, ChannelHandler handler) &#123;</span><br><span class="line">        <span class="comment">// 调用 AbstractChannelHandlerContext 构造函数</span></span><br><span class="line">        <span class="keyword">super</span>(pipeline, executor, name, isInbound(handler), isOutbound(handler));</span><br><span class="line">        <span class="keyword">if</span> (handler == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"handler"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.handler = handler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ChannelHandler <span class="title">handler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> handler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否为inBound类型</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isInbound</span><span class="params">(ChannelHandler handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> handler <span class="keyword">instanceof</span> ChannelInboundHandler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 是否为outBound类型</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isOutbound</span><span class="params">(ChannelHandler handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> handler <span class="keyword">instanceof</span> ChannelOutboundHandler;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="HeadContext"><a href="#HeadContext" class="headerlink" title="HeadContext"></a>HeadContext</h4><p>HeadContext是头部节点，outbound类型，用于传播事件和进行一些底层socket操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">HeadContext</span> <span class="keyword">extends</span> <span class="title">AbstractChannelHandlerContext</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">ChannelOutboundHandler</span>, <span class="title">ChannelInboundHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Unsafe unsafe;</span><br><span class="line">	</span><br><span class="line">    HeadContext(DefaultChannelPipeline pipeline) &#123;</span><br><span class="line">		<span class="comment">// 调用AbstractChannelHandlerContext构造器</span></span><br><span class="line">		<span class="comment">// HeadContext是一个outbound(出站)节点</span></span><br><span class="line">        <span class="keyword">super</span>(pipeline, <span class="keyword">null</span>, HEAD_NAME, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 设置Unsafe对象</span></span><br><span class="line">        unsafe = pipeline.channel().unsafe();</span><br><span class="line">        <span class="comment">// 设置添加完成</span></span><br><span class="line">        setAddComplete();</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 返回ChannelHandler，就只它自身</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ChannelHandler <span class="title">handler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            ChannelHandlerContext ctx, SocketAddress localAddress, ChannelPromise promise)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 调用 unsafe 进行bind操作    </span></span><br><span class="line">        unsafe.bind(localAddress, promise);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            ChannelHandlerContext ctx,</span></span></span><br><span class="line"><span class="function"><span class="params">            SocketAddress remoteAddress, SocketAddress localAddress,</span></span></span><br><span class="line"><span class="function"><span class="params">            ChannelPromise promise)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 调用 unsafe 进行 connect 操作</span></span><br><span class="line">        unsafe.connect(remoteAddress, localAddress, promise);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">disconnect</span><span class="params">(ChannelHandlerContext ctx, ChannelPromise promise)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    	<span class="comment">// 调用 unsafe 进行 disconnect 操作</span></span><br><span class="line">        unsafe.disconnect(promise);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ChannelHandlerContext ctx, ChannelPromise promise)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    	<span class="comment">// 调用 unsafe 进行 close 操作</span></span><br><span class="line">        unsafe.close(promise);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deregister</span><span class="params">(ChannelHandlerContext ctx, ChannelPromise promise)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    	<span class="comment">// 调用 unsafe 进行 deregister 操作</span></span><br><span class="line">        unsafe.deregister(promise);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(ChannelHandlerContext ctx)</span> </span>&#123;</span><br><span class="line">  	  <span class="comment">// 调用 unsafe 进行 read 操作</span></span><br><span class="line">        unsafe.beginRead();</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    	<span class="comment">// 调用 unsafe 进行 write 操作</span></span><br><span class="line">        unsafe.write(msg, promise);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flush</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    	<span class="comment">// 调用 unsafe 进行 flush 操作</span></span><br><span class="line">        unsafe.flush();</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    	<span class="comment">// 传播ExceptionCaught事件</span></span><br><span class="line">        ctx.fireExceptionCaught(cause);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRegistered</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        invokeHandlerAddedIfNeeded();</span><br><span class="line">        <span class="comment">// 传播channelRegistered事件</span></span><br><span class="line">        ctx.fireChannelRegistered();</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelUnregistered</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 传播channelUnregistered事件</span></span><br><span class="line">        ctx.fireChannelUnregistered();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Remove all handlers sequentially if channel is closed and unregistered.</span></span><br><span class="line">        <span class="keyword">if</span> (!channel.isOpen()) &#123;</span><br><span class="line">            destroy();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 传播 channelActive 事件</span></span><br><span class="line">        ctx.fireChannelActive();</span><br><span class="line">		<span class="comment">// 在 https://wangwei.one/posts/netty-channel-source-analyse.html 中分析过了</span></span><br><span class="line">		<span class="comment">// 主要是在channel激活之后，向底层的selector注册一个SelectionKey.OP_ACCEPT监听事件</span></span><br><span class="line">		<span class="comment">// 这样channel在连接之后，就可以监听到一个read事件</span></span><br><span class="line">        readIfIsAutoRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInactive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 传播 channelInactive 事件</span></span><br><span class="line">        ctx.fireChannelInactive();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 传播 channelRead 事件</span></span><br><span class="line">        ctx.fireChannelRead(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 传播 channelReadComplete 事件</span></span><br><span class="line">        ctx.fireChannelReadComplete();</span><br><span class="line">		<span class="comment">// </span></span><br><span class="line">        readIfIsAutoRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readIfIsAutoRead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (channel.config().isAutoRead()) &#123;</span><br><span class="line">            channel.read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userEventTriggered</span><span class="params">(ChannelHandlerContext ctx, Object evt)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    	<span class="comment">// 传播 userEventTriggered 事件</span></span><br><span class="line">        ctx.fireUserEventTriggered(evt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelWritabilityChanged</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 传播 channelWritabilityChanged 事件</span></span><br><span class="line">        ctx.fireChannelWritabilityChanged();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Pipeline-节点添加"><a href="#Pipeline-节点添加" class="headerlink" title="Pipeline 节点添加"></a>Pipeline 节点添加</h2><p>上面我们分析了Pipeline的基本结构，接下来我们看看Pipeline添加节点（也就是Handler处理器）的过程。该过程主要分为三步：</p><ul><li>判断是否重复添加</li><li>创建节点并添加至链表</li><li>回调添加完成事件</li></ul><p>以这段常见的代码为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">b.group(group)</span><br><span class="line">        .channel(NioServerSocketChannel.class)</span><br><span class="line">        .localAddress(<span class="keyword">new</span> InetSocketAddress(port))</span><br><span class="line">        .option(ChannelOption.SO_KEEPALIVE, Boolean.TRUE)</span><br><span class="line">        .childOption(ChannelOption.CONNECT_TIMEOUT_MILLIS, <span class="number">5000</span>)</span><br><span class="line">        .handler(<span class="keyword">new</span> LoggingHandler(LogLevel.INFO))</span><br><span class="line">        .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="comment">// 添加 serverHandler</span></span><br><span class="line">                ch.pipeline().addLast(serverHandler);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">ChannelFuture f = b.bind().sync();</span><br></pre></td></tr></table></figure><p>我们从 <strong>ChannelPipeline.addLast()</strong> 方法进去：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultChannelPipeline</span> <span class="keyword">implements</span> <span class="title">ChannelPipeline</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">    ...</span><br><span class="line">	</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ChannelPipeline <span class="title">addLast</span><span class="params">(ChannelHandler... handlers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> addLast(<span class="keyword">null</span>, handlers);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ChannelPipeline <span class="title">addLast</span><span class="params">(EventExecutorGroup executor, ChannelHandler... handlers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (handlers == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"handlers"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 循环处理</span></span><br><span class="line">        <span class="keyword">for</span> (ChannelHandler h: handlers) &#123;</span><br><span class="line">            <span class="keyword">if</span> (h == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            addLast(executor, <span class="keyword">null</span>, h);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ChannelPipeline <span class="title">addLast</span><span class="params">(EventExecutorGroup group, String name, ChannelHandler handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> AbstractChannelHandlerContext newCtx;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="comment">// 检查是否重复</span></span><br><span class="line">            checkMultiplicity(handler);</span><br><span class="line">            <span class="comment">// 创建新节点</span></span><br><span class="line">            newCtx = newContext(group, filterName(name, handler), handler);</span><br><span class="line">            <span class="comment">// 添加新节点</span></span><br><span class="line">            addLast0(newCtx);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 如果 registered 为 false,则表示这个channel还未注册到EventLoop上.</span></span><br><span class="line">            <span class="comment">// 在这种情况下，我们添加一个Task到PendingHandlerCallback中，</span></span><br><span class="line">            <span class="comment">// 等到这个channel注册成功之后，将会调用立即调用 ChannelHandler.handlerAdded(...) 方法，已达到channel添加的目的</span></span><br><span class="line">            <span class="keyword">if</span> (!registered) &#123;</span><br><span class="line">                <span class="comment">// 设置为待添加状态</span></span><br><span class="line">                newCtx.setAddPending();</span><br><span class="line">                callHandlerCallbackLater(newCtx, <span class="keyword">true</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">            &#125;</span><br><span class="line">			</span><br><span class="line">            <span class="comment">// 获取executor</span></span><br><span class="line">            EventExecutor executor = newCtx.executor();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!executor.inEventLoop()) &#123;</span><br><span class="line">                <span class="comment">// 设置为待添加状态</span></span><br><span class="line">                newCtx.setAddPending();</span><br><span class="line">                executor.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        <span class="comment">// 回调添加完成事件</span></span><br><span class="line">                        callHandlerAdded0(newCtx);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 回调添加完成事件</span></span><br><span class="line">        callHandlerAdded0(newCtx);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查是否重复</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkMultiplicity</span><span class="params">(ChannelHandler handler)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// handler是否为ChannelHandlerAdapter类型，不是则不做处理</span></span><br><span class="line">        <span class="keyword">if</span> (handler <span class="keyword">instanceof</span> ChannelHandlerAdapter) &#123;</span><br><span class="line">            ChannelHandlerAdapter h = (ChannelHandlerAdapter) handler;</span><br><span class="line">            <span class="comment">// 判断handler是否添加了Sharable注解 &amp;&amp; 是否添加过了</span></span><br><span class="line">            <span class="keyword">if</span> (!h.isSharable() &amp;&amp; h.added) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ChannelPipelineException(</span><br><span class="line">                    h.getClass().getName() +</span><br><span class="line">                    <span class="string">" is not a @Sharable handler, so can't be added or removed multiple times."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            h.added = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建新的节点</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> AbstractChannelHandlerContext <span class="title">newContext</span><span class="params">(EventExecutorGroup group, String name, ChannelHandler handler)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用DefaultChannelHandlerContext的构造函数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultChannelHandlerContext(<span class="keyword">this</span>, childExecutor(group), name, handler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在tail节点之前添加新节点</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addLast0</span><span class="params">(AbstractChannelHandlerContext newCtx)</span> </span>&#123;</span><br><span class="line">        AbstractChannelHandlerContext prev = tail.prev;</span><br><span class="line">        newCtx.prev = prev;</span><br><span class="line">        newCtx.next = tail;</span><br><span class="line">        prev.next = newCtx;</span><br><span class="line">        tail.prev = newCtx;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 回调ChannelHandler中的handlerAdded方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">callHandlerAdded0</span><span class="params">(<span class="keyword">final</span> AbstractChannelHandlerContext ctx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 我们必须在handlerAdded方法之前调用setAddComplete方法。否则的话，一旦handlerAdded方法产生了任何pipeline事件，由于状态的缘故，ctx.handler()将会丢失这些事件的处理。</span></span><br><span class="line">            <span class="comment">// 设置新节点的状态为添加完成状态</span></span><br><span class="line">            ctx.setAddComplete();</span><br><span class="line">            <span class="comment">// 调用handlerAdded接口</span></span><br><span class="line">            ctx.handler().handlerAdded(ctx);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            ...</span><br><span class="line">            <span class="comment">// 如果添加失败，则删除新节点    </span></span><br><span class="line">            remove0(ctx);</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来看下setAddComplete()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractChannelHandlerContext</span> <span class="keyword">extends</span> <span class="title">DefaultAttributeMap</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">ChannelHandlerContext</span>, <span class="title">ResourceLeakHint</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">	<span class="comment">// 通过自旋操作，设置状态为ADD_COMPLETE</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setAddComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">int</span> oldState = handlerState;</span><br><span class="line">            <span class="comment">// Ensure we never update when the handlerState is REMOVE_COMPLETE already.</span></span><br><span class="line">            <span class="comment">// oldState is usually ADD_PENDING but can also be REMOVE_COMPLETE when an EventExecutor is used that is not</span></span><br><span class="line">            <span class="comment">// exposing ordering guarantees.</span></span><br><span class="line">            <span class="keyword">if</span> (oldState == REMOVE_COMPLETE || HANDLER_STATE_UPDATER.compareAndSet(<span class="keyword">this</span>, oldState, ADD_COMPLETE)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置为 ADD_PENDING 状态</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setAddPending</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> updated = HANDLER_STATE_UPDATER.compareAndSet(<span class="keyword">this</span>, INIT, ADD_PENDING);</span><br><span class="line">        <span class="keyword">assert</span> updated; </span><br><span class="line">        <span class="comment">// This should always be true as it MUST be called before setAddComplete() or setRemoved().</span></span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回调用户自定义Handler中的handlerAdded方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Sharable</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">	   </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerAdded</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">"ServerHandler added ...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> 	...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ChannelInitializer"><a href="#ChannelInitializer" class="headerlink" title="ChannelInitializer"></a>ChannelInitializer</h3><p>关于回调ChannelHandler中的handlerAdded()方法，最常见的一个场景就是，使用 ChannelInitializer 来添加我们自定义的ChannelHandler。ChannelInitializer被添加完成之后，会回调到它的 initChannel 方法。</p><p>接下来，我们看看 <strong><em>ChannelInitializer</em></strong> 这个类，它是一个特殊的ChannelInboundHandler，它提供了一种在Channel注册到EventLoop后初始化Channel的简便方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Sharable</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">C</span> <span class="keyword">extends</span> <span class="title">Channel</span>&gt; <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> ConcurrentMap&lt;ChannelHandlerContext, Boolean&gt; initMap = PlatformDependent.newConcurrentHashMap();</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 当 ch 注册成功之后，该方法就会被调用，该方法结束返回之后，此ChannelInitializer实例将会从Channel所绑定的ChannelPipeline中移除</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> ch 所注册的Channel</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(C ch)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">   </span><br><span class="line">   ...</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// ChannelInitializer 添加成功后，会回调到handlerAdded()接口</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerAdded</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ctx.channel().isRegistered()) &#123;</span><br><span class="line">            <span class="comment">// This should always be true with our current DefaultChannelPipeline implementation.</span></span><br><span class="line">            <span class="comment">// The good thing about calling initChannel(...) in handlerAdded(...) is that there will be no ordering</span></span><br><span class="line">            <span class="comment">// surprises if a ChannelInitializer will add another ChannelInitializer. This is as all handlers</span></span><br><span class="line">            <span class="comment">// will be added in the expected order.</span></span><br><span class="line">            initChannel(ctx);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">initChannel</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 标记ctx为true,且之前没有标记过。防止重复执行</span></span><br><span class="line">        <span class="keyword">if</span> (initMap.putIfAbsent(ctx, Boolean.TRUE) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 调用initChannel方法</span></span><br><span class="line">                initChannel((C) ctx.channel());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable cause) &#123;</span><br><span class="line">                <span class="comment">// Explicitly call exceptionCaught(...) as we removed the handler before calling initChannel(...).</span></span><br><span class="line">                <span class="comment">// We do so to prevent multiple calls to initChannel(...).</span></span><br><span class="line">                exceptionCaught(ctx, cause);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">// 最终会删除 ChannelInitializer 实例</span></span><br><span class="line">                remove(ctx);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除 ChannelInitializer 实例</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(ChannelHandlerContext ctx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取 Pipeline</span></span><br><span class="line">            ChannelPipeline pipeline = ctx.pipeline();</span><br><span class="line">            <span class="comment">// 从 Pipeline 中返回 ChannelInitializer 实例</span></span><br><span class="line">            <span class="keyword">if</span> (pipeline.context(<span class="keyword">this</span>) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 删除 ChannelInitializer 实例</span></span><br><span class="line">                <span class="comment">// 删除逻辑请看下一小节</span></span><br><span class="line">                pipeline.remove(<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            initMap.remove(ctx);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遍历 ChannelHandlerContext 节点查询出ChannelHandler实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultChannelPipeline</span> <span class="keyword">implements</span> <span class="title">ChannelPipeline</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 通过handler获取ChannelHandlerContext</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ChannelHandlerContext <span class="title">context</span><span class="params">(ChannelHandler handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (handler == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"handler"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">				</span><br><span class="line">        AbstractChannelHandlerContext ctx = head.next;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ctx == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ctx.handler() == handler) &#123;</span><br><span class="line">                <span class="keyword">return</span> ctx;</span><br><span class="line">            &#125;</span><br><span class="line">            ctx = ctx.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Pipeline中除了addLast方法外， 还有addFirst、addBefore、addAfter等方法，逻辑类似，可以自行研究学习。</p><h2 id="Pipeline-节点删除"><a href="#Pipeline-节点删除" class="headerlink" title="Pipeline 节点删除"></a>Pipeline 节点删除</h2><p>上面，我们讲了Pipeline节点的添加，这小结我们看看Pipeline节点的删除功能。</p><p>netty 有个最大的特性之一就是Handler可插拔，做到动态编织pipeline，比如在首次建立连接的时候，需要通过进行权限认证，在认证通过之后，就可以将此context移除，下次pipeline在传播事件的时候就就不会调用到权限认证处理器。</p><p>下面是权限认证Handler最简单的实现，第一个数据包传来的是认证信息，如果校验通过，就删除此Handler，否则，直接关闭连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 鉴权Handler</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">ByteBuf</span>&gt; </span>&#123;</span><br><span class="line">	</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, ByteBuf data)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (verify(authDataPacket)) &#123;</span><br><span class="line">            ctx.pipeline().remove(<span class="keyword">this</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ctx.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">verify</span><span class="params">(ByteBuf byteBuf)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerRemoved</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"AuthHandler has been removed ! "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来看看 DefaultChannelPipeline 中的 remove 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultChannelPipeline</span> <span class="keyword">implements</span> <span class="title">ChannelPipeline</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">    ...</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 从Pipeline中删除ChannelHandler</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ChannelPipeline <span class="title">remove</span><span class="params">(ChannelHandler handler)</span> </span>&#123;</span><br><span class="line">        remove(getContextOrDie(handler));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">	<span class="comment">// 获取 ChannelHandler ，获取不到就抛出异常</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> AbstractChannelHandlerContext <span class="title">getContextOrDie</span><span class="params">(ChannelHandler handler)</span> </span>&#123;</span><br><span class="line">        AbstractChannelHandlerContext ctx = (AbstractChannelHandlerContext) context(handler);</span><br><span class="line">        <span class="keyword">if</span> (ctx == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(handler.getClass().getName());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ctx;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 删除</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> AbstractChannelHandlerContext <span class="title">remove</span><span class="params">(<span class="keyword">final</span> AbstractChannelHandlerContext ctx)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ctx不能为heand与tail</span></span><br><span class="line">        <span class="keyword">assert</span> ctx != head &amp;&amp; ctx != tail;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="comment">// 从pipeline中删除ChannelHandlerContext节点</span></span><br><span class="line">            remove0(ctx);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 如果为false，则表明channel还没有注册到eventloop上</span></span><br><span class="line">            <span class="comment">// 在删除这种场景下，我们先添加一个Task，一旦channel注册成功就会调用这个Task，这个Task就会立即调用ChannelHandler.handlerRemoved(...)方法，来从pipeline中删除context。</span></span><br><span class="line">            <span class="keyword">if</span> (!registered) &#123;</span><br><span class="line">                callHandlerCallbackLater(ctx, <span class="keyword">false</span>);</span><br><span class="line">                <span class="keyword">return</span> ctx;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            EventExecutor executor = ctx.executor();</span><br><span class="line">            <span class="keyword">if</span> (!executor.inEventLoop()) &#123;</span><br><span class="line">                executor.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        <span class="comment">// 回调 handlerRemoved 方法</span></span><br><span class="line">                        callHandlerRemoved0(ctx);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">return</span> ctx;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 回调 handlerRemoved 方法</span></span><br><span class="line">        callHandlerRemoved0(ctx);</span><br><span class="line">        <span class="keyword">return</span> ctx;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"> 	...</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 删除节点 ChannelHandlerContext</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">remove0</span><span class="params">(AbstractChannelHandlerContext ctx)</span> </span>&#123;</span><br><span class="line">        AbstractChannelHandlerContext prev = ctx.prev;</span><br><span class="line">        AbstractChannelHandlerContext next = ctx.next;</span><br><span class="line">        prev.next = next;</span><br><span class="line">        next.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">callHandlerRemoved0</span><span class="params">(<span class="keyword">final</span> AbstractChannelHandlerContext ctx)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Notify the complete removal.</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 回调 handlerRemoved 方法</span></span><br><span class="line">                <span class="comment">// 也就是我们前面例子 AuthHandler 中的 handlerRemoved() 方法</span></span><br><span class="line">                ctx.handler().handlerRemoved(ctx);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">// 设置为ctx 状态为 REMOVE_COMPLETE </span></span><br><span class="line">                ctx.setRemoved();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            fireExceptionCaught(<span class="keyword">new</span> ChannelPipelineException(</span><br><span class="line">                    ctx.handler().getClass().getName() + <span class="string">".handlerRemoved() has thrown an exception."</span>, t));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了， 删除的逻辑就分析到这里了。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这一讲我们分析了Pipeline的创建过程，了解Pipeline中的链表结构以及每个节点的数据结构。还分析了Pipeline是如何添加节点的，又是如何删除节点的。<a href="https://wangwei.one/posts/netty-pipeline-source-analyse-2.html">接下来</a> ，我们会分析Pipeline如何进行事件传播的。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://coding.imooc.com/class/230.html" target="_blank" rel="noopener">Java读源码之Netty深入剖析</a></li><li><a href="https://github.com/wangweiX/myBooks/blob/master/computer/netty/Netty%20in%20Action.epub" target="_blank" rel="noopener">《Netty in action》</a></li><li><a href="https://www.jianshu.com/p/6efa9c5fa702" target="_blank" rel="noopener">https://www.jianshu.com/p/6efa9c5fa702</a></li><li><a href="https://juejin.im/post/5bda4cc55188257f630dac07" target="_blank" rel="noopener">https://juejin.im/post/5bda4cc55188257f630dac07</a></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Netty NioEventLoop 启动过程源码分析]]></title>
      <url>/posts/netty-nioeventloop-analyse-for-startup.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/pexels-photo-1293125.jpeg?imageslim" alt="pexels-photo-1293125"></p><p><a href="https://wangwei.one/posts/netty-nioeventloop-analyse-for-create.html">前面</a> ，我们分析了NioEventLoop的创建过程，接下来我们开始分析NioEventLoop的启动和执行逻辑。</p><a id="more"></a><blockquote><p>Netty版本：4.1.30</p></blockquote><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>在之前分析 <a href="https://wangwei.one/posts/netty-channel-create-init-register-bind-process-analyse.html">Channel绑定</a> 的文章中，提到过下面这段代码，先前只讲了 channel.bind() 绑定逻辑，跳过了execute() 接口，现在我们以这个为例，开始分析NioEventLoop的execute()接口，主要逻辑如下：</p><ul><li>添加任务队列</li><li>绑定当前线程到EventLoop上</li><li>调用EventLoop的run()方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doBind0</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">final</span> ChannelFuture regFuture, <span class="keyword">final</span> Channel channel,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">final</span> SocketAddress localAddress, <span class="keyword">final</span> ChannelPromise promise)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过eventLoop来执行channel绑定的Task</span></span><br><span class="line">    channel.eventLoop().execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (regFuture.isSuccess()) &#123;</span><br><span class="line">                <span class="comment">// channel绑定</span></span><br><span class="line">                channel.bind(localAddress, promise).addListener(ChannelFutureListener.CLOSE_ON_FAILURE);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                promise.setFailure(regFuture.cause());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>往下追踪到 SingleThreadEventExecutor 中 execute 接口，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable task)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (task == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"task"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断当前运行时线程是否与EventLoop中绑定的线程一致</span></span><br><span class="line">    <span class="comment">// 这里还未绑定Thread，所以先返回false</span></span><br><span class="line">    <span class="keyword">boolean</span> inEventLoop = inEventLoop();</span><br><span class="line">    <span class="comment">// 将任务添加任务队列，也就是我们前面讲EventLoop创建时候提到的 MpscQueue.</span></span><br><span class="line">    addTask(task);</span><br><span class="line">    <span class="keyword">if</span> (!inEventLoop) &#123;</span><br><span class="line">        <span class="comment">// 启动线程</span></span><br><span class="line">        startThread();</span><br><span class="line">        <span class="keyword">if</span> (isShutdown() &amp;&amp; removeTask(task)) &#123;</span><br><span class="line">            reject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!addTaskWakesUp &amp;&amp; wakesUpForTask(task)) &#123;</span><br><span class="line">        wakeup(inEventLoop);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动线程接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 状态比较，最开始时state = 1 ，为true</span></span><br><span class="line">    <span class="keyword">if</span> (state == ST_NOT_STARTED) &#123;</span><br><span class="line">        <span class="comment">// cs操作后，state状态设置为 2</span></span><br><span class="line">        <span class="keyword">if</span> (STATE_UPDATER.compareAndSet(<span class="keyword">this</span>, ST_NOT_STARTED, ST_STARTED)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 启动接口</span></span><br><span class="line">                doStartThread();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable cause) &#123;</span><br><span class="line">                STATE_UPDATER.set(<span class="keyword">this</span>, ST_NOT_STARTED);</span><br><span class="line">                PlatformDependent.throwException(cause);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行线程启动方法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doStartThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 断言判断 SingleThreadEventExecutor 还未绑定 Thread</span></span><br><span class="line">    <span class="keyword">assert</span> thread == <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// executor 执行任务</span></span><br><span class="line">    executor.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 将 SingleThreadEventExecutor(在我们的案例中就是NioEventLoop) 与 当前线程进行绑定</span></span><br><span class="line">            thread = Thread.currentThread();</span><br><span class="line">            <span class="keyword">if</span> (interrupted) &#123;</span><br><span class="line">                thread.interrupt();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 设置状态为 false</span></span><br><span class="line">            <span class="keyword">boolean</span> success = <span class="keyword">false</span>;</span><br><span class="line">            <span class="comment">// 更新最近一次任务的执行时间</span></span><br><span class="line">            updateLastExecutionTime();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 往下调用 NioEventLoop 的 run 方法，执行</span></span><br><span class="line">                SingleThreadEventExecutor.<span class="keyword">this</span>.run();</span><br><span class="line">                success = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                logger.warn(<span class="string">"Unexpected exception from an event executor: "</span>, t);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">               </span><br><span class="line">               ...</span><br><span class="line">               </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h2><p>往下调用到 NioEventLoop 中的 run 方法，通过无限for循环，主要做以下三件事情：</p><ul><li>轮循I/O事件：select(wakenUp.getAndSet(false))</li><li>处理I/O事件：processSelectedKeys</li><li>运行Task任务：runAllTasks</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> (selectStrategy.calculateStrategy(selectNowSupplier, hasTasks())) &#123;</span><br><span class="line">                <span class="keyword">case</span> SelectStrategy.CONTINUE:</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">case</span> SelectStrategy.SELECT:</span><br><span class="line">                    <span class="comment">// 轮训检测I/O事件</span></span><br><span class="line">                    <span class="comment">// wakenUp为了标记selector是否是唤醒状态，每次select操作，都设置为false，也就是未唤醒状态。</span></span><br><span class="line">                    select(wakenUp.getAndSet(<span class="keyword">false</span>));</span><br><span class="line">                    <span class="comment">// 'wakenUp.compareAndSet(false, true)' 总是在调用 'selector.wakeup()' 之前进行评估，以减少唤醒的开销</span></span><br><span class="line">                    <span class="comment">// (Selector.wakeup() 是非常耗性能的操作.)</span></span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// 但是，这种方法存在竞争条件。当「wakeup」太早设置为true时触发竞争条件</span></span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// 在下面两种情况下，「wakenUp」会过早设置为true：</span></span><br><span class="line">                    <span class="comment">// 1）Selector 在 'wakenUp.set(false)' 与 'selector.select(...)' 之间被唤醒。(BAD)</span></span><br><span class="line">                    <span class="comment">// 2）Selector 在 'selector.select(...)' 与 'if (wakenUp.get()) &#123; ... &#125;' 之间被唤醒。(OK)</span></span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// 在第一种情况下，'wakenUp'设置为true，后面的'selector.select（...）'将立即唤醒。 直到'wakenUp'在下一轮中再次设置为false，'wakenUp.compareAndSet（false，true）'将失败，因此任何唤醒选择器的尝试也将失败，从而导致以下'selector.select（。 ..）'呼吁阻止不必要的。</span></span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// 要解决这个问题，如果在selector.select（...）操作之后wakenUp立即为true，我们会再次唤醒selector。 它是低效率的，因为它唤醒了第一种情况（BAD - 需要唤醒）和第二种情况（OK - 不需要唤醒）的选择器。</span></span><br><span class="line">                    <span class="keyword">if</span> (wakenUp.get()) &#123;</span><br><span class="line">                        selector.wakeup();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// fall through</span></span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            cancelledKeys = <span class="number">0</span>;</span><br><span class="line">            needsToSelectAgain = <span class="keyword">false</span>;</span><br><span class="line">            <span class="comment">// ioRatio 表示处理I/O事件与执行具体任务事件之间所耗时间的比值。</span></span><br><span class="line">            <span class="comment">// ioRatio 默认为50</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> ioRatio = <span class="keyword">this</span>.ioRatio;</span><br><span class="line">            <span class="keyword">if</span> (ioRatio == <span class="number">100</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 处理I/O事件</span></span><br><span class="line">                    processSelectedKeys();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">// 处理任务队列</span></span><br><span class="line">                    runAllTasks();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 处理IO事件的开始时间</span></span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">long</span> ioStartTime = System.nanoTime();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 处理I/O事件</span></span><br><span class="line">                    processSelectedKeys();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">// 记录io所耗时间</span></span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">long</span> ioTime = System.nanoTime() - ioStartTime;</span><br><span class="line">                    <span class="comment">// 处理任务队列，设置最大的超时时间</span></span><br><span class="line">                    runAllTasks(ioTime * (<span class="number">100</span> - ioRatio) / ioRatio);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            handleLoopException(t);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Always handle shutdown even if the loop processing threw an exception.</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (isShuttingDown()) &#123;</span><br><span class="line">                closeAll();</span><br><span class="line">                <span class="keyword">if</span> (confirmShutdown()) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            handleLoopException(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="轮循检测I-O事件"><a href="#轮循检测I-O事件" class="headerlink" title="轮循检测I/O事件"></a>轮循检测I/O事件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">(<span class="keyword">boolean</span> oldWakenUp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Selector selector = <span class="keyword">this</span>.selector;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// select操作计数</span></span><br><span class="line">        <span class="keyword">int</span> selectCnt = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 记录当前系统时间</span></span><br><span class="line">        <span class="keyword">long</span> currentTimeNanos = System.nanoTime();</span><br><span class="line">        <span class="comment">// delayNanos方法用于计算定时任务队列，最近一个任务的截止时间</span></span><br><span class="line">        <span class="comment">// selectDeadLineNanos 表示当前select操作所不能超过的最大截止时间</span></span><br><span class="line">        <span class="keyword">long</span> selectDeadLineNanos = currentTimeNanos + delayNanos(currentTimeNanos);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="comment">// 计算超时时间，判断是否超时</span></span><br><span class="line">            <span class="keyword">long</span> timeoutMillis = (selectDeadLineNanos - currentTimeNanos + <span class="number">500000L</span>) / <span class="number">1000000L</span>;</span><br><span class="line">            <span class="comment">// 如果 timeoutMillis &lt;= 0， 表示超时，进行一个非阻塞的 select 操作。设置 selectCnt 为 1. 并终止本次循环。</span></span><br><span class="line">            <span class="keyword">if</span> (timeoutMillis &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (selectCnt == <span class="number">0</span>) &#123;</span><br><span class="line">                    selector.selectNow();</span><br><span class="line">                    selectCnt = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 当wakenUp为ture时，恰好有task被提交，这个task将无法获得调用的机会</span></span><br><span class="line">            <span class="comment">// Selector#wakeup. 因此，在执行select操作之前，需要再次检查任务队列</span></span><br><span class="line">            <span class="comment">// 如果不这么做，这个Task将一直挂起，直到select操作超时</span></span><br><span class="line">            <span class="comment">// 如果 pipeline 中存在 IdleStateHandler ，那么Task将一直挂起直到 空闲超时。</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (hasTasks() &amp;&amp; wakenUp.compareAndSet(<span class="keyword">false</span>, <span class="keyword">true</span>)) &#123;</span><br><span class="line">                <span class="comment">// 调用非阻塞方法</span></span><br><span class="line">                selector.selectNow();</span><br><span class="line">                selectCnt = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果当前任务队列为空，并且超时时间未到，则进行一个阻塞式的selector操作。timeoutMillis 为最大的select时间</span></span><br><span class="line">            <span class="keyword">int</span> selectedKeys = selector.select(timeoutMillis);</span><br><span class="line">            <span class="comment">// 操作计数 +1</span></span><br><span class="line">            selectCnt ++;</span><br><span class="line">			</span><br><span class="line">            <span class="comment">// 存在以下情况，本次selector则终止</span></span><br><span class="line">            <span class="keyword">if</span> (selectedKeys != <span class="number">0</span> || oldWakenUp || wakenUp.get() || hasTasks() || hasScheduledTasks()) &#123;</span><br><span class="line">                <span class="comment">// - 轮训到了事件（Selected something,）</span></span><br><span class="line">                <span class="comment">// - 被用户唤醒（waken up by user,）</span></span><br><span class="line">                <span class="comment">// - 已有任务队列（the task queue has a pending task.）</span></span><br><span class="line">                <span class="comment">// - 已有定时任务（a scheduled task is ready for processing）</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (Thread.interrupted()) &#123;</span><br><span class="line">                <span class="comment">// Thread was interrupted so reset selected keys and break so we not run into a busy loop.</span></span><br><span class="line">                <span class="comment">// As this is most likely a bug in the handler of the user or it's client library we will</span></span><br><span class="line">                <span class="comment">// also log it.</span></span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">                <span class="comment">// See https://github.com/netty/netty/issues/2426</span></span><br><span class="line">                <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.debug(<span class="string">"Selector.select() returned prematurely because "</span> +</span><br><span class="line">                            <span class="string">"Thread.currentThread().interrupt() was called. Use "</span> +</span><br><span class="line">                            <span class="string">"NioEventLoop.shutdownGracefully() to shutdown the NioEventLoop."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                selectCnt = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 记录当前时间</span></span><br><span class="line">            <span class="keyword">long</span> time = System.nanoTime();</span><br><span class="line">            <span class="comment">// 如果time &gt; currentTimeNanos + timeoutMillis(超时时间)，则表明已经执行过一次select操作</span></span><br><span class="line">            <span class="keyword">if</span> (time - TimeUnit.MILLISECONDS.toNanos(timeoutMillis) &gt;= currentTimeNanos) &#123;</span><br><span class="line">                <span class="comment">// timeoutMillis elapsed without anything selected.</span></span><br><span class="line">                selectCnt = <span class="number">1</span>;</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="comment">// 如果 time &lt;= currentTimeNanos + timeoutMillis，表示触发了空轮训</span></span><br><span class="line">            <span class="comment">// 如果空轮训的次数超过 SELECTOR_AUTO_REBUILD_THRESHOLD (512)，则重建一个新的selctor，避免空轮训</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (SELECTOR_AUTO_REBUILD_THRESHOLD &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                    selectCnt &gt;= SELECTOR_AUTO_REBUILD_THRESHOLD) &#123;</span><br><span class="line">                <span class="comment">// The selector returned prematurely many times in a row.</span></span><br><span class="line">                <span class="comment">// Rebuild the selector to work around the problem.</span></span><br><span class="line">                logger.warn(</span><br><span class="line">                        <span class="string">"Selector.select() returned prematurely &#123;&#125; times in a row; rebuilding Selector &#123;&#125;."</span>,</span><br><span class="line">                        selectCnt, selector);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 重建创建一个新的selector</span></span><br><span class="line">                rebuildSelector();</span><br><span class="line">                selector = <span class="keyword">this</span>.selector;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Select again to populate selectedKeys.</span></span><br><span class="line">                <span class="comment">// 对重建后的selector进行一次非阻塞调用，用于获取最新的selectedKeys</span></span><br><span class="line">                selector.selectNow();</span><br><span class="line">                <span class="comment">// 设置select计数</span></span><br><span class="line">                selectCnt = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            currentTimeNanos = time;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (selectCnt &gt; MIN_PREMATURE_SELECTOR_RETURNS) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(<span class="string">"Selector.select() returned prematurely &#123;&#125; times in a row for Selector &#123;&#125;."</span>,</span><br><span class="line">                        selectCnt - <span class="number">1</span>, selector);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (CancelledKeyException e) &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(CancelledKeyException.class.getSimpleName() + <span class="string">" raised by a Selector &#123;&#125; - JDK bug?"</span>,</span><br><span class="line">                    selector, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Harmless exception - log anyway</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重新创建一个新的Selector"><a href="#重新创建一个新的Selector" class="headerlink" title="重新创建一个新的Selector"></a>重新创建一个新的Selector</h3><p>该方法的主要逻辑就是：</p><ul><li>创建一个新的selector</li><li>将老的selector上的 selectKey注册到新的 selector 上</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rebuildSelector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!inEventLoop()) &#123;</span><br><span class="line">        execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                rebuildSelector0();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    rebuildSelector0();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新创建selector</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rebuildSelector0</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 暂存老的selector</span></span><br><span class="line">    <span class="keyword">final</span> Selector oldSelector = selector;</span><br><span class="line">    <span class="keyword">final</span> SelectorTuple newSelectorTuple;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (oldSelector == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个新的 SelectorTuple</span></span><br><span class="line">        <span class="comment">// openSelector()在之前分析过了</span></span><br><span class="line">        newSelectorTuple = openSelector();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        logger.warn(<span class="string">"Failed to create a new Selector."</span>, e);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Register all channels to the new Selector.</span></span><br><span class="line">    <span class="comment">// 记录select上注册的channel数量</span></span><br><span class="line">    <span class="keyword">int</span> nChannels = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 遍历老的 selector 上的 SelectionKey </span></span><br><span class="line">    <span class="keyword">for</span> (SelectionKey key: oldSelector.keys()) &#123;</span><br><span class="line">        <span class="comment">// 获取 attachment，这里的attachment就是我们前面在讲 Netty Channel注册时，select会将channel赋值到 attachment 变量上。</span></span><br><span class="line">        <span class="comment">// 获取老的selector上注册的channel </span></span><br><span class="line">        Object a = key.attachment();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!key.isValid() || key.channel().keyFor(newSelectorTuple.unwrappedSelector) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">			<span class="comment">// 获取兴趣集</span></span><br><span class="line">            <span class="keyword">int</span> interestOps = key.interestOps();</span><br><span class="line">            <span class="comment">// 取消 SelectionKey</span></span><br><span class="line">            key.cancel();</span><br><span class="line">            <span class="comment">// 将老的兴趣集重新注册到前面新创建的selector上</span></span><br><span class="line">            SelectionKey newKey = key.channel().register(newSelectorTuple.unwrappedSelector, interestOps, a);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (a <span class="keyword">instanceof</span> AbstractNioChannel) &#123;</span><br><span class="line">                <span class="comment">// Update SelectionKey</span></span><br><span class="line">                ((AbstractNioChannel) a).selectionKey = newKey;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// nChannels计数 + 1</span></span><br><span class="line">            nChannels ++;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.warn(<span class="string">"Failed to re-register a Channel to the new Selector."</span>, e);</span><br><span class="line">            <span class="keyword">if</span> (a <span class="keyword">instanceof</span> AbstractNioChannel) &#123;</span><br><span class="line">                AbstractNioChannel ch = (AbstractNioChannel) a;</span><br><span class="line">                ch.unsafe().close(ch.unsafe().voidPromise());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                NioTask&lt;SelectableChannel&gt; task = (NioTask&lt;SelectableChannel&gt;) a;</span><br><span class="line">                invokeChannelUnregistered(task, key, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 设置新的 selector</span></span><br><span class="line">    selector = newSelectorTuple.selector;</span><br><span class="line">    <span class="comment">// 设置新的 unwrappedSelector</span></span><br><span class="line">    unwrappedSelector = newSelectorTuple.unwrappedSelector;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// time to close the old selector as everything else is registered to the new one</span></span><br><span class="line">        <span class="comment">// 关闭老的seleclor</span></span><br><span class="line">        oldSelector.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">            logger.warn(<span class="string">"Failed to close the old Selector."</span>, t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">        logger.info(<span class="string">"Migrated "</span> + nChannels + <span class="string">" channel(s) to the new Selector."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="处理I-O事件"><a href="#处理I-O事件" class="headerlink" title="处理I/O事件"></a>处理I/O事件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processSelectedKeysOptimized</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; selectedKeys.size; ++i) &#123;</span><br><span class="line">        <span class="keyword">final</span> SelectionKey k = selectedKeys.keys[i];</span><br><span class="line">        <span class="comment">// null out entry in the array to allow to have it GC'ed once the Channel close</span></span><br><span class="line">        <span class="comment">// See https://github.com/netty/netty/issues/2363</span></span><br><span class="line">        <span class="comment">// 设置为null，有利于GC回收</span></span><br><span class="line">        selectedKeys.keys[i] = <span class="keyword">null</span>;</span><br><span class="line">		<span class="comment">// 获取 SelectionKey 中的 attachment, 我们这里就是 NioChannel</span></span><br><span class="line">        <span class="keyword">final</span> Object a = k.attachment();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (a <span class="keyword">instanceof</span> AbstractNioChannel) &#123;</span><br><span class="line">            <span class="comment">// 处理 SelectedKey</span></span><br><span class="line">            processSelectedKey(k, (AbstractNioChannel) a);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">            NioTask&lt;SelectableChannel&gt; task = (NioTask&lt;SelectableChannel&gt;) a;</span><br><span class="line">            processSelectedKey(k, task);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (needsToSelectAgain) &#123;</span><br><span class="line">            <span class="comment">// null out entries in the array to allow to have it GC'ed once the Channel close</span></span><br><span class="line">            <span class="comment">// See https://github.com/netty/netty/issues/2363</span></span><br><span class="line">            selectedKeys.reset(i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            selectAgain();</span><br><span class="line">            i = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理 SelectedKey</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processSelectedKey</span><span class="params">(SelectionKey k, AbstractNioChannel ch)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取Netty Channel中的 NioUnsafe 对象，用于后面的IO操作</span></span><br><span class="line">    <span class="keyword">final</span> AbstractNioChannel.NioUnsafe unsafe = ch.unsafe();</span><br><span class="line">    <span class="comment">// 判断 SelectedKey 的有效性，如果无效，则直接返回并关闭channel</span></span><br><span class="line">    <span class="keyword">if</span> (!k.isValid()) &#123;</span><br><span class="line">        <span class="keyword">final</span> EventLoop eventLoop;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            eventLoop = ch.eventLoop();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable ignored) &#123;</span><br><span class="line">            <span class="comment">// If the channel implementation throws an exception because there is no event loop, we ignore this</span></span><br><span class="line">            <span class="comment">// because we are only trying to determine if ch is registered to this event loop and thus has authority</span></span><br><span class="line">            <span class="comment">// to close ch.</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Only close ch if ch is still registered to this EventLoop. ch could have deregistered from the event loop</span></span><br><span class="line">        <span class="comment">// and thus the SelectionKey could be cancelled as part of the deregistration process, but the channel is</span></span><br><span class="line">        <span class="comment">// still healthy and should not be closed.</span></span><br><span class="line">        <span class="comment">// See https://github.com/netty/netty/issues/5125</span></span><br><span class="line">        <span class="keyword">if</span> (eventLoop != <span class="keyword">this</span> || eventLoop == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// close the channel if the key is not valid anymore</span></span><br><span class="line">        <span class="comment">// 关闭channel</span></span><br><span class="line">        unsafe.close(unsafe.voidPromise());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 获取 SelectionKey 中所有准备就绪的操作集</span></span><br><span class="line">        <span class="keyword">int</span> readyOps = k.readyOps();</span><br><span class="line">        <span class="comment">// We first need to call finishConnect() before try to trigger a read(...) or write(...) as otherwise</span></span><br><span class="line">        <span class="comment">// the NIO JDK channel implementation may throw a NotYetConnectedException.</span></span><br><span class="line">        <span class="comment">// 在调用处理READ与WRITE事件之间，先调用finishConnect()接口，避免异常 NotYetConnectedException 发生。</span></span><br><span class="line">        <span class="keyword">if</span> ((readyOps &amp; SelectionKey.OP_CONNECT) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// remove OP_CONNECT as otherwise Selector.select(..) will always return without blocking</span></span><br><span class="line">            <span class="comment">// See https://github.com/netty/netty/issues/924</span></span><br><span class="line">            <span class="keyword">int</span> ops = k.interestOps();</span><br><span class="line">            ops &amp;= ~SelectionKey.OP_CONNECT;</span><br><span class="line">            k.interestOps(ops);</span><br><span class="line"></span><br><span class="line">            unsafe.finishConnect();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Process OP_WRITE first as we may be able to write some queued buffers and so free memory.</span></span><br><span class="line">        <span class="comment">// 处理 WRITE 事件</span></span><br><span class="line">        <span class="keyword">if</span> ((readyOps &amp; SelectionKey.OP_WRITE) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// Call forceFlush which will also take care of clear the OP_WRITE once there is nothing left to write</span></span><br><span class="line">            ch.unsafe().forceFlush();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Also check for readOps of 0 to workaround possible JDK bug which may otherwise lead</span></span><br><span class="line">        <span class="comment">// to a spin loop</span></span><br><span class="line">        <span class="comment">// 处理 ACCEPT 与 READ 事件</span></span><br><span class="line">        <span class="comment">// 如果当前的EventLoop是WorkGroup，则表示有 READ 事件</span></span><br><span class="line">        <span class="comment">// 如果当前的EventLoop是BossGroup，则表示有 ACCEPT 事件，有新连接进来了</span></span><br><span class="line">        <span class="keyword">if</span> ((readyOps &amp; (SelectionKey.OP_READ | SelectionKey.OP_ACCEPT)) != <span class="number">0</span> || readyOps == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 读取数据</span></span><br><span class="line">            unsafe.read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (CancelledKeyException ignored) &#123;</span><br><span class="line">        unsafe.close(unsafe.voidPromise());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>关于 <code>unsafe.read()</code> 的分析，请看 <a href="https://wangwei.one/posts/netty-new-connection-acceptor-analyse.html">后文</a></p></blockquote><h3 id="执行所有任务"><a href="#执行所有任务" class="headerlink" title="执行所有任务"></a>执行所有任务</h3><p>接下来，我们了解一下执行具体Task任务的接口：runAllTasks。在EventLoop中，待执行的任务队列分为两种：一种是普通任务队列，一种是定时任务队列。</p><p><a href="https://wangwei.one/posts/netty-nioeventloop-analyse-for-create.html">前面</a> 我们讲 EventLoop 创建时提到过NioEventLoop中 taskQueue 的创建，是一个MpscQueue，关于高效率的MpscQueue 后面单独写文章进行介绍：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleThreadEventExecutor</span> <span class="keyword">extends</span> <span class="title">AbstractScheduledEventExecutor</span> <span class="keyword">implements</span> <span class="title">OrderedEventExecutor</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 存放普通任务的队列</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Queue&lt;Runnable&gt; taskQueue;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">SingleThreadEventExecutor</span><span class="params">(EventExecutorGroup parent, Executor executor,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        <span class="keyword">boolean</span> addTaskWakesUp, <span class="keyword">int</span> maxPendingTasks,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        RejectedExecutionHandler rejectedHandler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(parent);</span><br><span class="line">        <span class="keyword">this</span>.addTaskWakesUp = addTaskWakesUp;</span><br><span class="line">        <span class="keyword">this</span>.maxPendingTasks = Math.max(<span class="number">16</span>, maxPendingTasks);</span><br><span class="line">        <span class="keyword">this</span>.executor = ObjectUtil.checkNotNull(executor, <span class="string">"executor"</span>);</span><br><span class="line">        <span class="comment">// 创建TaskQueue</span></span><br><span class="line">        taskQueue = newTaskQueue(<span class="keyword">this</span>.maxPendingTasks);</span><br><span class="line">        rejectedExecutionHandler = ObjectUtil.checkNotNull(rejectedHandler, <span class="string">"rejectedHandler"</span>);</span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">NioEventLoop</span> <span class="keyword">extends</span> <span class="title">SingleThreadEventLoop</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// NioEventLoop 创建TaskQueue队列</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Queue&lt;Runnable&gt; <span class="title">newTaskQueue</span><span class="params">(<span class="keyword">int</span> maxPendingTasks)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// This event loop never calls takeTask()</span></span><br><span class="line">        <span class="keyword">return</span> maxPendingTasks == Integer.MAX_VALUE ? PlatformDependent.&lt;Runnable&gt;newMpscQueue()</span><br><span class="line">                                                    : PlatformDependent.&lt;Runnable&gt;newMpscQueue(maxPendingTasks);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存放定时任务的队列在 AbstractScheduledEventExecutor 中，成员变量为 scheduledTaskQueue，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractScheduledEventExecutor</span> <span class="keyword">extends</span> <span class="title">AbstractEventExecutor</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 优先级队列的比较器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Comparator&lt;ScheduledFutureTask&lt;?&gt;&gt; SCHEDULED_FUTURE_TASK_COMPARATOR =</span><br><span class="line">            <span class="keyword">new</span> Comparator&lt;ScheduledFutureTask&lt;?&gt;&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(ScheduledFutureTask&lt;?&gt; o1, ScheduledFutureTask&lt;?&gt; o2)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> o1.compareTo(o2);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 存放定时任务的优先级队列</span></span><br><span class="line">    PriorityQueue&lt;ScheduledFutureTask&lt;?&gt;&gt; scheduledTaskQueue;</span><br><span class="line">	<span class="comment">// 创建定时任务队列    </span></span><br><span class="line">    PriorityQueue&lt;ScheduledFutureTask&lt;?&gt;&gt; scheduledTaskQueue() &#123;</span><br><span class="line">        <span class="keyword">if</span> (scheduledTaskQueue == <span class="keyword">null</span>) &#123;</span><br><span class="line">            scheduledTaskQueue = <span class="keyword">new</span> DefaultPriorityQueue&lt;ScheduledFutureTask&lt;?&gt;&gt;(</span><br><span class="line">                    SCHEDULED_FUTURE_TASK_COMPARATOR,</span><br><span class="line">                    <span class="comment">// Use same initial capacity as java.util.PriorityQueue</span></span><br><span class="line">                    <span class="number">11</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> scheduledTaskQueue;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 保存定时任务</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ScheduledFuture&lt;?&gt; schedule(Runnable command, <span class="keyword">long</span> delay, TimeUnit unit) &#123;</span><br><span class="line">        ObjectUtil.checkNotNull(command, <span class="string">"command"</span>);</span><br><span class="line">        ObjectUtil.checkNotNull(unit, <span class="string">"unit"</span>);</span><br><span class="line">        <span class="keyword">if</span> (delay &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            delay = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        validateScheduled0(delay, unit);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> schedule(<span class="keyword">new</span> ScheduledFutureTask&lt;Void&gt;(</span><br><span class="line">                <span class="keyword">this</span>, command, <span class="keyword">null</span>, ScheduledFutureTask.deadlineNanos(unit.toNanos(delay))));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存定时任务</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;V&gt; <span class="function">ScheduledFuture&lt;V&gt; <span class="title">schedule</span><span class="params">(Callable&lt;V&gt; callable, <span class="keyword">long</span> delay, TimeUnit unit)</span> </span>&#123;</span><br><span class="line">        ObjectUtil.checkNotNull(callable, <span class="string">"callable"</span>);</span><br><span class="line">        ObjectUtil.checkNotNull(unit, <span class="string">"unit"</span>);</span><br><span class="line">        <span class="keyword">if</span> (delay &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            delay = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        validateScheduled0(delay, unit);</span><br><span class="line">        <span class="keyword">return</span> schedule(<span class="keyword">new</span> ScheduledFutureTask&lt;V&gt;(</span><br><span class="line">                <span class="keyword">this</span>, callable, ScheduledFutureTask.deadlineNanos(unit.toNanos(delay))));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 保存定时任务</span></span><br><span class="line"> 	&lt;V&gt; <span class="function">ScheduledFuture&lt;V&gt; <span class="title">schedule</span><span class="params">(<span class="keyword">final</span> ScheduledFutureTask&lt;V&gt; task)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断是否为当前线程</span></span><br><span class="line">        <span class="keyword">if</span> (inEventLoop()) &#123;</span><br><span class="line">            <span class="comment">// 添加定时任务队列</span></span><br><span class="line">            scheduledTaskQueue().add(task);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="comment">// 添加定时任务队列</span></span><br><span class="line">                    scheduledTaskQueue().add(task);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> task;</span><br><span class="line">  	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Netty存放定时任务队列为 <a href="https://netty.io/4.1/xref/io/netty/util/internal/DefaultPriorityQueue.html" target="_blank" rel="noopener">DefaultPriorityQueue</a> ，定时任务的封装对象为 ScheduledFutureTask ，在队列中的优先按照它们的截止时间进行排序，其次在按照id进行排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledFutureTask</span>&lt;<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">PromiseTask</span>&lt;<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">ScheduledFuture</span>&lt;<span class="title">V</span>&gt;, <span class="title">PriorityQueueNode</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 比较 ScheduledFutureTask 之间的排序</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Delayed o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">		</span><br><span class="line">        ScheduledFutureTask&lt;?&gt; that = (ScheduledFutureTask&lt;?&gt;) o;</span><br><span class="line">        <span class="keyword">long</span> d = deadlineNanos() - that.deadlineNanos();</span><br><span class="line">        <span class="keyword">if</span> (d &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (d &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (id &lt; that.id) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (id == that.id) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来看看任务的执行逻辑，首先将定时任务取出，聚合到普通任务队列中，再去for循环运行每个Task。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">runAllTasks</span><span class="params">(<span class="keyword">long</span> timeoutNanos)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 将定时任务从定时队列中取出，放入普通队列中</span></span><br><span class="line">    fetchFromScheduledTaskQueue();</span><br><span class="line">    <span class="comment">// 从队列中取出任务</span></span><br><span class="line">    Runnable task = pollTask();</span><br><span class="line">    <span class="keyword">if</span> (task == <span class="keyword">null</span>) &#123;</span><br><span class="line">        afterRunningAllTasks();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 计算任务执行的最大超时时间</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> deadline = ScheduledFutureTask.nanoTime() + timeoutNanos;</span><br><span class="line">    <span class="comment">// 任务计数</span></span><br><span class="line">    <span class="keyword">long</span> runTasks = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 最近一次任务执行的时间</span></span><br><span class="line">    <span class="keyword">long</span> lastExecutionTime;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="comment">// 执行任务</span></span><br><span class="line">        safeExecute(task);</span><br><span class="line">		<span class="comment">// 任务计数 +1</span></span><br><span class="line">        runTasks ++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check timeout every 64 tasks because nanoTime() is relatively expensive.</span></span><br><span class="line">        <span class="comment">// <span class="doctag">XXX:</span> Hard-coded value - will make it configurable if it is really a problem.</span></span><br><span class="line">        <span class="comment">// 由于nanoTime() 是非常好性能的操作，因此每64次就对比一下 定时任务的执行时间与 deadline，</span></span><br><span class="line">        <span class="comment">// 如果 lastExecutionTime &gt;= deadline，则表示任务超时了，需要中断退出</span></span><br><span class="line">        <span class="keyword">if</span> ((runTasks &amp; <span class="number">0x3F</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            lastExecutionTime = ScheduledFutureTask.nanoTime();</span><br><span class="line">            <span class="keyword">if</span> (lastExecutionTime &gt;= deadline) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">		</span><br><span class="line">        <span class="comment">// 获取任务</span></span><br><span class="line">        task = pollTask();</span><br><span class="line">        <span class="keyword">if</span> (task == <span class="keyword">null</span>) &#123;</span><br><span class="line">            lastExecutionTime = ScheduledFutureTask.nanoTime();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    afterRunningAllTasks();</span><br><span class="line">    <span class="comment">// 记录最后一次的执行时间</span></span><br><span class="line">    <span class="keyword">this</span>.lastExecutionTime = lastExecutionTime;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取出任务</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Runnable <span class="title">pollTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">assert</span> <span class="title">inEventLoop</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">return</span> pollTaskFrom(taskQueue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从队列中取出任务</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> Runnable <span class="title">pollTaskFrom</span><span class="params">(Queue&lt;Runnable&gt; taskQueue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        Runnable task = taskQueue.poll();</span><br><span class="line">        <span class="keyword">if</span> (task == WAKEUP_TASK) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> task;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将定时任务从定时队列中取出，聚合到普通队列中：</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">fetchFromScheduledTaskQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 得到nanoTime = 当前时间 - ScheduledFutureTask的START_TIME(开始时间)</span></span><br><span class="line">    <span class="keyword">long</span> nanoTime = AbstractScheduledEventExecutor.nanoTime();</span><br><span class="line">    <span class="comment">// 获得截止时间小于nanoTime的定时任务</span></span><br><span class="line">    Runnable scheduledTask  = pollScheduledTask(nanoTime);</span><br><span class="line">    <span class="keyword">while</span> (scheduledTask != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 将定时任务放入普通队列中，以备运行</span></span><br><span class="line">        <span class="keyword">if</span> (!taskQueue.offer(scheduledTask)) &#123;</span><br><span class="line">            <span class="comment">// No space left in the task queue add it back to the scheduledTaskQueue so we pick it up again.</span></span><br><span class="line">            <span class="comment">// 如果 taskQueue 没有足够的空间，导致添加失败，则将其返回定时任务队列中</span></span><br><span class="line">            scheduledTaskQueue().add((ScheduledFutureTask&lt;?&gt;) scheduledTask);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        scheduledTask  = pollScheduledTask(nanoTime);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得截止时间小于nanoTime的定时任务</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> Runnable <span class="title">pollScheduledTask</span><span class="params">(<span class="keyword">long</span> nanoTime)</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">assert</span> <span class="title">inEventLoop</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="comment">// 获取定时任务队列</span></span><br><span class="line">    Queue&lt;ScheduledFutureTask&lt;?&gt;&gt; scheduledTaskQueue = <span class="keyword">this</span>.scheduledTaskQueue;</span><br><span class="line">    <span class="comment">// 获取第一个定时任务</span></span><br><span class="line">    ScheduledFutureTask&lt;?&gt; scheduledTask = scheduledTaskQueue == <span class="keyword">null</span> ? <span class="keyword">null</span> : scheduledTaskQueue.peek();</span><br><span class="line">    <span class="keyword">if</span> (scheduledTask == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 如果该定时任务的截止时间 &lt;= nanoTime ，则返回</span></span><br><span class="line">    <span class="keyword">if</span> (scheduledTask.deadlineNanos() &lt;= nanoTime) &#123;</span><br><span class="line">        scheduledTaskQueue.remove();</span><br><span class="line">        <span class="keyword">return</span> scheduledTask;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>好了，NioEventLoop的原理以及它的 <a href="https://wangwei.one/posts/netty-nioeventloop-analyse-for-create.html">创建</a> 与 <a href="https://wangwei.one/posts/netty-nioeventloop-analyse-for-startup.html">启动执行</a> 流程到这里就分析完毕了。启动流程主要流程如下：</p><ul><li>将待执行的任务添加到任务队列中</li><li>将当前线程绑定到EventLoop上</li><li>轮循I/O事件，在轮循selector过程中，会对JDK的空轮循Bug做一个处理。</li><li>处理I/O事件。</li><li>运行Task任务。将定时任务聚合到普通任务队列中，然后在依次执行队列中的任务。</li></ul><p>问题：</p><ul><li>默认情况下，netty服务端启动多少个线程？何时启动？</li><li>netty是如何解决空轮训Bug的？</li><li>netty是如何保证串行无锁化的？</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://coding.imooc.com/class/230.html" target="_blank" rel="noopener">Java读源码之Netty深入剖析</a></li><li><a href="https://github.com/wangweiX/myBooks/blob/master/computer/netty/Netty%20in%20Action.epub" target="_blank" rel="noopener">《Netty in action》</a></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Netty NioEventLoop 创建过程源码分析]]></title>
      <url>/posts/netty-nioeventloop-analyse-for-create.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/pexels-photo-1266808.jpeg?imageslim" alt="pexels-photo-1266808"></p><p><a href="https://wangwei.one/posts/netty-channel-create-init-register-bind-process-analyse.html">前面</a> ，我们分析了Netty中的Channel组件，本篇我们来介绍一下与Channel关联的另一个核心的组件 —— <strong>EventLoop</strong>。</p><a id="more"></a><blockquote><p>Netty版本：4.1.30</p></blockquote><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>EventLoop定义了Netty的核心抽象，用于处理网络连接生命周期中所有发生的事件。</p><p>我们先来从一个比较高的视角来了解一下Channels、Thread、EventLoops、EventLoopGroups之间的关系。</p><p><img src="https://img.i7years.com/netty/Netty%20EventLoop%20Channel.png" alt="Netty-EventLoop-Channel"></p><p>上图是表示了拥有4个EventLoop的EventLoopGroup处理IO的流程图。它们之间的关系如下：</p><ul><li>一个 EventLoopGroup包含一个或多个EventLoop</li><li>一个 EventLoop在它的生命周期内只和一个Thread绑定</li><li>所有由EventLoop处理的I/O事件都将在它专有的Thread上被处理</li><li>一个Channel在它的生命周期内只注册于一个EventLoop</li><li>一个EventLoop可能会被分配给一个或多个Channel</li></ul><h2 id="EventLoop-原理"><a href="#EventLoop-原理" class="headerlink" title="EventLoop 原理"></a>EventLoop 原理</h2><p>下图是Netty EventLoop相关类的UML图。从中我们可以看到EventLoop相关的类都是实现了 <code>java.util.concurrent</code> 包中的 ExecutorService 接口。我们可以直接将任务(Runable 或 Callable) 提交给EventLoop去立即执行或定时执行。</p><p><img src="https://img.i7years.com/netty/Netty%20EventLoop%20UML.png" alt="Netty EventLoop UML"></p><p>例如，使用EventLoop去执行定时任务，样例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">scheduleViaEventLoop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Channel ch = <span class="keyword">new</span> NioSocketChannel();</span><br><span class="line">    ScheduledFuture&lt;?&gt; future = ch.eventLoop().schedule(</span><br><span class="line">            () -&gt; System.out.println(<span class="string">"60 seconds later"</span>), <span class="number">60</span>, TimeUnit.SECONDS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Thread-管理"><a href="#Thread-管理" class="headerlink" title="Thread 管理"></a>Thread 管理</h3><p>Netty线程模型的高性能主要取决于当前所执行线程的身份的确定。一个线程提交到EventLoop执行的流程如下：</p><ul><li>将Task任务提交给EventLoop执行</li><li>在Task传递到execute方法之后，检查当前要执行的Task的线程是否是分配给EventLoop的那个线程</li><li>如果是，则该线程会立即执行</li><li>如果不是，则将线程放入任务队列中，等待下一次执行</li></ul><p>其中，Netty中的每一个EventLoop都有它自己的任务队列，并且和其他的EventLoop的任务队列独立开来。</p><p><img src="https://img.i7years.com/netty/Netty%20EventLoop%20Thread%20management.png" alt="Nettu EventLoop Thread management"></p><h3 id="Thread-分配"><a href="#Thread-分配" class="headerlink" title="Thread 分配"></a>Thread 分配</h3><p>服务于Channel的I/O和事件的EventLoop包含在EventLoopGroup中。根据不同的传输实现，EventLoop的创建和分配方式也不同。</p><h4 id="NIO传输"><a href="#NIO传输" class="headerlink" title="NIO传输"></a>NIO传输</h4><p><img src="https://img.i7years.com/netty/Netty%20EventLoop%20Thread%20allocation%20for%20NIO.png" alt="Netty EventLoop Thread allocation NIO"></p><p>在NIO传输方式中，使用尽可能少的EventLoop就可以服务多个Channel。如图所示，EventLoopGroup采用顺序循环的方式负责为每一个新创建的Channel分配EventLoop，每一个EventLoop会被分配给多个Channels。</p><p>一旦一个Channel被分配给了一个EventLoop，则这个Channel的生命周期内，只会绑定这个EventLoop。这就让我们在ChannelHandler的实现省去了对线程安全和同步问题的担心。</p><h4 id="OIO传输"><a href="#OIO传输" class="headerlink" title="OIO传输"></a>OIO传输</h4><p><img src="https://img.i7years.com/netty/Netty%20EventLoop%20Thread%20allocation%20for%20OIO.png" alt="Netty EventLoop Thread allocation OIO"></p><p>与NIO方式的不同在于，一个EventLoop只会服务于一个Channel。</p><h2 id="NioEventLoop-amp-NioEventLoopGroup-创建"><a href="#NioEventLoop-amp-NioEventLoopGroup-创建" class="headerlink" title="NioEventLoop &amp; NioEventLoopGroup 创建"></a>NioEventLoop &amp; NioEventLoopGroup 创建</h2><p>初步了解了 EventLoop 以及 EventLoopGroup 的工作机制，接下来我们以 NioEventLoopGroup 为例，来深入分析 NioEventLoopGroup 是如何创建的，又是如何启动的，它的内部执行逻辑又是怎样的等等问题。</p><h3 id="MultithreadEventExecutorGroup-构造器"><a href="#MultithreadEventExecutorGroup-构造器" class="headerlink" title="MultithreadEventExecutorGroup 构造器"></a>MultithreadEventExecutorGroup 构造器</h3><p>我们从 NioEventLoopGroup 的构造函数开始分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EventLoopGroup acceptorEventLoopGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>NioEventLoopGroup构造函数会调用到父类 MultithreadEventLoopGroup 的构造函数，默认情况下，EventLoop的数量 = 处理器数量 x 2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MultithreadEventLoopGroup</span> <span class="keyword">extends</span> <span class="title">MultithreadEventExecutorGroup</span> <span class="keyword">implements</span> <span class="title">EventLoopGroup</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> InternalLogger logger = InternalLoggerFactory.getInstance(MultithreadEventLoopGroup.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_EVENT_LOOP_THREADS;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认情况下，EventLoop的数量 = 处理器数量 x 2</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        DEFAULT_EVENT_LOOP_THREADS = Math.max(<span class="number">1</span>, SystemPropertyUtil.getInt(</span><br><span class="line">                <span class="string">"io.netty.eventLoopThreads"</span>, NettyRuntime.availableProcessors() * <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">"-Dio.netty.eventLoopThreads: &#123;&#125;"</span>, DEFAULT_EVENT_LOOP_THREADS);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">MultithreadEventLoopGroup</span><span class="params">(<span class="keyword">int</span> nThreads, Executor executor, Object... args)</span>    </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(nThreads == <span class="number">0</span> ? DEFAULT_EVENT_LOOP_THREADS : nThreads, executor, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续调用父类，会调用到 MultithreadEventExecutorGroup 的构造器，主要做三件事情：</p><ul><li>创建线程任务执行器 ThreadPerTaskExecutor</li><li>通过for循环创建数量为 nThreads 个的 EventLoop</li><li>创建 EventLoop 选择器 EventExecutorChooser</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">MultithreadEventExecutorGroup</span><span class="params">(<span class="keyword">int</span> nThreads, Executor executor,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        EventExecutorChooserFactory chooserFactory, Object... args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nThreads &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(String.format(<span class="string">"nThreads: %d (expected: &gt; 0)"</span>, nThreads));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建任务执行器 ThreadPerTaskExecutor</span></span><br><span class="line">    <span class="keyword">if</span> (executor == <span class="keyword">null</span>) &#123;</span><br><span class="line">        executor = <span class="keyword">new</span> ThreadPerTaskExecutor(newDefaultThreadFactory());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 EventExecutor 数组</span></span><br><span class="line">    children = <span class="keyword">new</span> EventExecutor[nThreads];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过for循环创建数量为 nThreads 个的 EventLoop</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nThreads; i ++) &#123;</span><br><span class="line">        <span class="keyword">boolean</span> success = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 调用 newChild 接口</span></span><br><span class="line">            children[i] = newChild(executor, args);</span><br><span class="line">            success = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> Think about if this is a good exception type</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"failed to create a child event loop"</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j ++) &#123;</span><br><span class="line">                    children[j].shutdownGracefully();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j ++) &#123;</span><br><span class="line">                    EventExecutor e = children[j];</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">while</span> (!e.isTerminated()) &#123;</span><br><span class="line">                            e.awaitTermination(Integer.MAX_VALUE, TimeUnit.SECONDS);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException interrupted) &#123;</span><br><span class="line">                        <span class="comment">// Let the caller handle the interruption.</span></span><br><span class="line">                        Thread.currentThread().interrupt();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 创建选择器</span></span><br><span class="line">    chooser = chooserFactory.newChooser(children);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> FutureListener&lt;Object&gt; terminationListener = <span class="keyword">new</span> FutureListener&lt;Object&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationComplete</span><span class="params">(Future&lt;Object&gt; future)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (terminatedChildren.incrementAndGet() == children.length) &#123;</span><br><span class="line">                terminationFuture.setSuccess(<span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (EventExecutor e: children) &#123;</span><br><span class="line">        e.terminationFuture().addListener(terminationListener);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Set&lt;EventExecutor&gt; childrenSet = <span class="keyword">new</span> LinkedHashSet&lt;EventExecutor&gt;(children.length);</span><br><span class="line">    Collections.addAll(childrenSet, children);</span><br><span class="line">    readonlyChildren = Collections.unmodifiableSet(childrenSet);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建线程任务执行器-ThreadPerTaskExecutor"><a href="#创建线程任务执行器-ThreadPerTaskExecutor" class="headerlink" title="创建线程任务执行器 ThreadPerTaskExecutor"></a>创建线程任务执行器 ThreadPerTaskExecutor</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (executor == <span class="keyword">null</span>) &#123;</span><br><span class="line">    executor = <span class="keyword">new</span> ThreadPerTaskExecutor(newDefaultThreadFactory());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程任务执行器 ThreadPerTaskExecutor 源码如下，具体的任务都由 ThreadFactory 去执行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPerTaskExecutor</span> <span class="keyword">implements</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ThreadFactory threadFactory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadPerTaskExecutor</span><span class="params">(ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (threadFactory == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"threadFactory"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.threadFactory = threadFactory;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 使用 threadFactory 执行任务</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span> </span>&#123;</span><br><span class="line">        threadFactory.newThread(command).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来看看 newDefaultThreadFactory 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ThreadFactory <span class="title">newDefaultThreadFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DefaultThreadFactory(getClass());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="DefaultThreadFactory"><a href="#DefaultThreadFactory" class="headerlink" title="DefaultThreadFactory"></a>DefaultThreadFactory</h4><p>接下来看看 DefaultThreadFactory 这个类，实现了 ThreadFactory 接口，我们可以了解到：</p><ul><li>EventLoopGroup的命名规则</li><li>具体的线程为 FastThreadLocalThread</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultThreadFactory</span> <span class="keyword">implements</span> <span class="title">ThreadFactory</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">// 线程池ID编号自增器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicInteger poolId = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">	<span class="comment">// 线程ID自增器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger nextId = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">    <span class="comment">// 线程名称前缀</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String prefix;</span><br><span class="line">    <span class="comment">// 是否为守护进程</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> daemon;</span><br><span class="line">    <span class="comment">// 线程优先级</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> priority;</span><br><span class="line">    <span class="comment">// 线程组</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> ThreadGroup threadGroup;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DefaultThreadFactory</span><span class="params">(Class&lt;?&gt; poolType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(poolType, <span class="keyword">false</span>, Thread.NORM_PRIORITY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取线程名，返回结果：nioEventLoopGroup</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toPoolName</span><span class="params">(Class&lt;?&gt; poolType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (poolType == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"poolType"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String poolName = StringUtil.simpleClassName(poolType);</span><br><span class="line">        <span class="keyword">switch</span> (poolName.length()) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"unknown"</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> poolName.toLowerCase(Locale.US);</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">if</span> (Character.isUpperCase(poolName.charAt(<span class="number">0</span>)) &amp;&amp; Character.isLowerCase(poolName.charAt(<span class="number">1</span>))) &#123;</span><br><span class="line">                    <span class="keyword">return</span> Character.toLowerCase(poolName.charAt(<span class="number">0</span>)) + poolName.substring(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> poolName;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DefaultThreadFactory</span><span class="params">(String poolName, <span class="keyword">boolean</span> daemon, <span class="keyword">int</span> priority, ThreadGroup threadGroup)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (poolName == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"poolName"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (priority &lt; Thread.MIN_PRIORITY || priority &gt; Thread.MAX_PRIORITY) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                    <span class="string">"priority: "</span> + priority + <span class="string">" (expected: Thread.MIN_PRIORITY &lt;= priority &lt;= Thread.MAX_PRIORITY)"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">		</span><br><span class="line">        <span class="comment">// nioEventLoopGroup-2-</span></span><br><span class="line">        prefix = poolName + <span class="string">'-'</span> + poolId.incrementAndGet() + <span class="string">'-'</span>;</span><br><span class="line">        <span class="keyword">this</span>.daemon = daemon;</span><br><span class="line">        <span class="keyword">this</span>.priority = priority;</span><br><span class="line">        <span class="keyword">this</span>.threadGroup = threadGroup;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DefaultThreadFactory</span><span class="params">(String poolName, <span class="keyword">boolean</span> daemon, <span class="keyword">int</span> priority)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(poolName, daemon, priority, System.getSecurityManager() == <span class="keyword">null</span> ?</span><br><span class="line">                Thread.currentThread().getThreadGroup() : System.getSecurityManager().getThreadGroup());</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建新线程 nioEventLoopGroup-2-1</span></span><br><span class="line">        Thread t = newThread(FastThreadLocalRunnable.wrap(r), prefix + nextId.incrementAndGet());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (t.isDaemon() != daemon) &#123;</span><br><span class="line">                t.setDaemon(daemon);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (t.getPriority() != priority) &#123;</span><br><span class="line">                t.setPriority(priority);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ignored) &#123;</span><br><span class="line">            <span class="comment">// Doesn't matter even if failed to set.</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 创建新线程 FastThreadLocalThread</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Thread <span class="title">newThread</span><span class="params">(Runnable r, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FastThreadLocalThread(threadGroup, r, name);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建NioEventLoop"><a href="#创建NioEventLoop" class="headerlink" title="创建NioEventLoop"></a>创建NioEventLoop</h3><p>继续从 MultithreadEventExecutorGroup 构造器开始，创建完任务执行器 ThreadPerTaskExecutor 之后，进入for循环，开始创建 NioEventLoop：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nThreads; i ++) &#123;</span><br><span class="line">    <span class="keyword">boolean</span> success = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 创建 nioEventLoop</span></span><br><span class="line">        children[i] = newChild(executor, args);</span><br><span class="line">        success = <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Think about if this is a good exception type</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"failed to create a child event loop"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line"> 	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NioEventLoopGroup类中的 <code>newChild()</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> EventLoop <span class="title">newChild</span><span class="params">(Executor executor, Object... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> NioEventLoop(<span class="keyword">this</span>, executor, (SelectorProvider) args[<span class="number">0</span>],</span><br><span class="line">        ((SelectStrategyFactory) args[<span class="number">1</span>]).newSelectStrategy(), (RejectedExecutionHandler) args[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NioEventLoop 构造器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">NioEventLoop</span> <span class="keyword">extends</span> <span class="title">SingleThreadEventLoop</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    NioEventLoop(NioEventLoopGroup parent, Executor executor, SelectorProvider selectorProvider, SelectStrategy strategy, RejectedExecutionHandler rejectedExecutionHandler) &#123;</span><br><span class="line">        <span class="comment">// 调用父类 SingleThreadEventLoop 构造器</span></span><br><span class="line">        <span class="keyword">super</span>(parent, executor, <span class="keyword">false</span>, DEFAULT_MAX_PENDING_TASKS, rejectedExecutionHandler);</span><br><span class="line">        <span class="keyword">if</span> (selectorProvider == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"selectorProvider"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (strategy == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"selectStrategy"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置 selectorProvider</span></span><br><span class="line">        provider = selectorProvider;</span><br><span class="line">        <span class="comment">// 获取 SelectorTuple 对象，里面封装了原生的selector和优化过的selector</span></span><br><span class="line">        <span class="keyword">final</span> SelectorTuple selectorTuple = openSelector();</span><br><span class="line">        <span class="comment">// 设置优化过的selector</span></span><br><span class="line">        selector = selectorTuple.selector;</span><br><span class="line">        <span class="comment">// 设置原生的selector</span></span><br><span class="line">        unwrappedSelector = selectorTuple.unwrappedSelector;</span><br><span class="line">        <span class="comment">// 设置select策略</span></span><br><span class="line">        selectStrategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们看看 获取多路复用选择器 方法—— openSelector() ，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// selectKey 优化选项flag</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> DISABLE_KEYSET_OPTIMIZATION =</span><br><span class="line">    SystemPropertyUtil.getBoolean(<span class="string">"io.netty.noKeySetOptimization"</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> SelectorTuple <span class="title">openSelector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// JDK原生的selector</span></span><br><span class="line">    <span class="keyword">final</span> Selector unwrappedSelector;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 通过 SelectorProvider 创建获得selector</span></span><br><span class="line">        unwrappedSelector = provider.openSelector();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ChannelException(<span class="string">"failed to open a new selector"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果不优化，则直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (DISABLE_KEYSET_OPTIMIZATION) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SelectorTuple(unwrappedSelector);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过反射创建 sun.nio.ch.SelectorImpl 对象</span></span><br><span class="line">    Object maybeSelectorImplClass = AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Object&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> Class.forName(</span><br><span class="line">                        <span class="string">"sun.nio.ch.SelectorImpl"</span>,</span><br><span class="line">                        <span class="keyword">false</span>,</span><br><span class="line">                        PlatformDependent.getSystemClassLoader());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable cause) &#123;</span><br><span class="line">                <span class="keyword">return</span> cause;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果 maybeSelectorImplClass 不是 selector 的一个实现，则直接返回原生的Selector </span></span><br><span class="line">    <span class="keyword">if</span> (!(maybeSelectorImplClass <span class="keyword">instanceof</span> Class) ||</span><br><span class="line">        <span class="comment">// ensure the current selector implementation is what we can instrument.</span></span><br><span class="line">        <span class="comment">// 确保当前的选择器实现是我们可以检测的</span></span><br><span class="line">        !((Class&lt;?&gt;) maybeSelectorImplClass).isAssignableFrom(unwrappedSelector.getClass())) &#123;</span><br><span class="line">        <span class="keyword">if</span> (maybeSelectorImplClass <span class="keyword">instanceof</span> Throwable) &#123;</span><br><span class="line">            Throwable t = (Throwable) maybeSelectorImplClass;</span><br><span class="line">            logger.trace(<span class="string">"failed to instrument a special java.util.Set into: &#123;&#125;"</span>, unwrappedSelector, t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SelectorTuple(unwrappedSelector);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// maybeSelectorImplClass 是selector的实现，则转化为 selector 实现类</span></span><br><span class="line">    <span class="keyword">final</span> Class&lt;?&gt; selectorImplClass = (Class&lt;?&gt;) maybeSelectorImplClass;</span><br><span class="line">    <span class="comment">// 创建新的 SelectionKey 集合 SelectedSelectionKeySet,内部采用的是 SelectionKey 数组的形</span></span><br><span class="line">    <span class="comment">// 式，而非 set 集合</span></span><br><span class="line">    <span class="keyword">final</span> SelectedSelectionKeySet selectedKeySet = <span class="keyword">new</span> SelectedSelectionKeySet();</span><br><span class="line"></span><br><span class="line">    Object maybeException = AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Object&gt;() &#123;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 通过反射的方式获取 sun.nio.ch.SelectorImpl 的成员变量 selectedKeys</span></span><br><span class="line">            Field selectedKeysField = selectorImplClass.getDeclaredField(<span class="string">"selectedKeys"</span>);</span><br><span class="line">            <span class="comment">// 通过反射的方式获取 sun.nio.ch.SelectorImpl 的成员变量 publicSelectedKeys</span></span><br><span class="line">            Field publicSelectedKeysField = selectorImplClass.getDeclaredField(<span class="string">"publicSelectedKeys"</span>);</span><br><span class="line"></span><br><span class="line">             <span class="keyword">if</span> (PlatformDependent.javaVersion() &gt;= <span class="number">9</span> &amp;&amp; PlatformDependent.hasUnsafe()) &#123;</span><br><span class="line">                 <span class="comment">// Let us try to use sun.misc.Unsafe to replace the SelectionKeySet.</span></span><br><span class="line">                 <span class="comment">// This allows us to also do this in Java9+ without any extra flags.</span></span><br><span class="line">           <span class="keyword">long</span> selectedKeysFieldOffset = 	PlatformDependent.objectFieldOffset(selectedKeysField);</span><br><span class="line">           <span class="keyword">long</span> publicSelectedKeysFieldOffset =</span><br><span class="line">                            PlatformDependent.objectFieldOffset(publicSelectedKeysField);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (selectedKeysFieldOffset != -<span class="number">1</span> &amp;&amp; publicSelectedKeysFieldOffset != -<span class="number">1</span>) &#123;</span><br><span class="line">             PlatformDependent.putObject( unwrappedSelector, selectedKeysFieldOffset, selectedKeySet);</span><br><span class="line">             PlatformDependent.putObject(unwrappedSelector, publicSelectedKeysFieldOffset, selectedKeySet);</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">          &#125;</span><br><span class="line">                    <span class="comment">// We could not retrieve the offset, lets try reflection as last-resort.</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">               <span class="comment">// 设置字段 selectedKeys  Accessible 为true</span></span><br><span class="line">                Throwable cause = ReflectionUtil.trySetAccessible(selectedKeysField, <span class="keyword">true</span>);</span><br><span class="line">                <span class="keyword">if</span> (cause != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> cause;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 设置字段 publicSelectedKeys  Accessible 为true</span></span><br><span class="line">                cause = ReflectionUtil.trySetAccessible(publicSelectedKeysField, <span class="keyword">true</span>);</span><br><span class="line">                <span class="keyword">if</span> (cause != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> cause;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                selectedKeysField.set(unwrappedSelector, selectedKeySet);</span><br><span class="line">                publicSelectedKeysField.set(unwrappedSelector, selectedKeySet);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">                <span class="keyword">return</span> e;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                <span class="keyword">return</span> e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (maybeException <span class="keyword">instanceof</span> Exception) &#123;</span><br><span class="line">        selectedKeys = <span class="keyword">null</span>;</span><br><span class="line">        Exception e = (Exception) maybeException;</span><br><span class="line">        logger.trace(<span class="string">"failed to instrument a special java.util.Set into: &#123;&#125;"</span>, unwrappedSelector, e);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SelectorTuple(unwrappedSelector);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置 SelectedSelectionKeySet</span></span><br><span class="line">    selectedKeys = selectedKeySet;</span><br><span class="line">    logger.trace(<span class="string">"instrumented a special java.util.Set into: &#123;&#125;"</span>, unwrappedSelector);</span><br><span class="line">    <span class="comment">// 返回包含了原生selector和优化过的selector的SelectorTuple</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SelectorTuple(unwrappedSelector,</span><br><span class="line">                             <span class="keyword">new</span> SelectedSelectionKeySetSelector(unwrappedSelector, selectedKeySet));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优化后的 SelectedSelectionKeySet 对象，内部采用 SelectionKey 数组的形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectedSelectionKeySet</span> <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">SelectionKey</span>&gt; </span>&#123;</span><br><span class="line">    SelectionKey[] keys;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    SelectedSelectionKeySet() &#123;</span><br><span class="line">        keys = <span class="keyword">new</span> SelectionKey[<span class="number">1024</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用数组，来替代HashSet,可以降低时间复杂度为O(1)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(SelectionKey o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        keys[size++] = o;</span><br><span class="line">        <span class="keyword">if</span> (size == keys.length) &#123;</span><br><span class="line">            increaseCapacity();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;SelectionKey&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Iterator&lt;SelectionKey&gt;() &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">int</span> idx;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> idx &lt; size;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> SelectionKey <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (!hasNext()) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> keys[idx++];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        reset(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">(<span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">        Arrays.fill(keys, start, size, <span class="keyword">null</span>);</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 扩容</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">increaseCapacity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SelectionKey[] newKeys = <span class="keyword">new</span> SelectionKey[keys.length &lt;&lt; <span class="number">1</span>];</span><br><span class="line">        System.arraycopy(keys, <span class="number">0</span>, newKeys, <span class="number">0</span>, size);</span><br><span class="line">        keys = newKeys;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SingleThreadEventLoop 构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleThreadEventLoop</span> <span class="keyword">extends</span> <span class="title">SingleThreadEventExecutor</span> <span class="keyword">implements</span> <span class="title">EventLoop</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="title">SingleThreadEventLoop</span><span class="params">(EventLoopGroup parent, Executor executor,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">boolean</span> addTaskWakesUp, <span class="keyword">int</span> maxPendingTasks,</span></span></span><br><span class="line"><span class="function"><span class="params">                                RejectedExecutionHandler rejectedExecutionHandler)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用 SingleThreadEventExecutor 构造器</span></span><br><span class="line">        <span class="keyword">super</span>(parent, executor, addTaskWakesUp, maxPendingTasks, rejectedExecutionHandler);</span><br><span class="line">        tailTasks = newTaskQueue(maxPendingTasks);</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SingleThreadEventExecutor 构造器，主要做两件事情：</p><ul><li>设置线程任务执行器。</li><li>设置任务队列。前面讲到EventLoop对于不能立即执行的Task会放入一个队列中，就是这里设置的。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleThreadEventExecutor</span> <span class="keyword">extends</span> <span class="title">AbstractScheduledEventExecutor</span> <span class="keyword">implements</span> <span class="title">OrderedEventExecutor</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">SingleThreadEventExecutor</span><span class="params">(EventExecutorGroup parent, Executor executor,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    <span class="keyword">boolean</span> addTaskWakesUp, <span class="keyword">int</span> maxPendingTasks,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    RejectedExecutionHandler rejectedHandler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(parent);</span><br><span class="line">        <span class="keyword">this</span>.addTaskWakesUp = addTaskWakesUp;</span><br><span class="line">        <span class="keyword">this</span>.maxPendingTasks = Math.max(<span class="number">16</span>, maxPendingTasks);</span><br><span class="line">        <span class="comment">// 设置线程任务执行器</span></span><br><span class="line">        <span class="keyword">this</span>.executor = ObjectUtil.checkNotNull(executor, <span class="string">"executor"</span>);</span><br><span class="line">        <span class="comment">// 设置任务队列</span></span><br><span class="line">        taskQueue = newTaskQueue(<span class="keyword">this</span>.maxPendingTasks);</span><br><span class="line">        rejectedExecutionHandler = ObjectUtil.checkNotNull(rejectedHandler, <span class="string">"rejectedHandler"</span>);</span><br><span class="line">    </span><br><span class="line">	&#125;    </span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NioEventLoop 中对 newTaskQueue 接口的实现，返回的是 <a href="https://github.com/JCTools/JCTools" target="_blank" rel="noopener">JCTools</a> 工具包 Mpsc 队列。后面我们写文章单独介绍 JCTools 中的相关队列。</p><blockquote><p>Mpsc：Multi Producer Single Consumer (Lock less, bounded and unbounded)</p><blockquote><p>多个生产者对单个消费者（无锁、有界和无界都有实现）</p></blockquote></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">NioEventLoop</span> <span class="keyword">extends</span> <span class="title">SingleThreadEventLoop</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Queue&lt;Runnable&gt; <span class="title">newTaskQueue</span><span class="params">(<span class="keyword">int</span> maxPendingTasks)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// This event loop never calls takeTask()</span></span><br><span class="line">        <span class="keyword">return</span> maxPendingTasks == Integer.MAX_VALUE ? PlatformDependent.&lt;Runnable&gt;newMpscQueue()</span><br><span class="line">                                                    : PlatformDependent.&lt;Runnable&gt;newMpscQueue(maxPendingTasks);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建线程执行选择器chooser"><a href="#创建线程执行选择器chooser" class="headerlink" title="创建线程执行选择器chooser"></a>创建线程执行选择器chooser</h2><p>接下来，我们看看 MultithreadEventExecutorGroup 构造器的最后一个部分内容，创建线程执行选择器chooser，它的主要作用就是 EventLoopGroup 用于从 EventLoop 数组中选择一个 EventLoop 去执行任务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建选择器</span></span><br><span class="line">chooser = chooserFactory.newChooser(children);</span><br></pre></td></tr></table></figure><p>EventLoopGroup 中定义的 <code>next()</code> 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EventLoopGroup</span> <span class="keyword">extends</span> <span class="title">EventExecutorGroup</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	...</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 选择下一个 EventLoop 用于执行任务</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">EventLoop <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">	</span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MultithreadEventExecutorGroup 中对 next() 的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> EventExecutor <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 调用 DefaultEventExecutorChooserFactory 中的next()</span></span><br><span class="line">    <span class="keyword">return</span> chooser.next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DefaultEventExecutorChooserFactory 对于如何从数组中选择任务执行器，也做了巧妙的优化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultEventExecutorChooserFactory</span> <span class="keyword">implements</span> <span class="title">EventExecutorChooserFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> DefaultEventExecutorChooserFactory INSTANCE = <span class="keyword">new</span> DefaultEventExecutorChooserFactory();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DefaultEventExecutorChooserFactory</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EventExecutorChooser <span class="title">newChooser</span><span class="params">(EventExecutor[] executors)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isPowerOfTwo(executors.length)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> PowerOfTwoEventExecutorChooser(executors);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> GenericEventExecutorChooser(executors);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 判断线程任务执行的个数是否为 2 的幂次方。e.g: 2、4、8、16</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (val &amp; -val) == val;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 幂次方选择器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PowerOfTwoEventExecutorChooser</span> <span class="keyword">implements</span> <span class="title">EventExecutorChooser</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger idx = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> EventExecutor[] executors;</span><br><span class="line">        </span><br><span class="line">        PowerOfTwoEventExecutorChooser(EventExecutor[] executors) &#123;</span><br><span class="line">            <span class="keyword">this</span>.executors = executors;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> EventExecutor <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 通过二级制进行 &amp; 运算，效率更高</span></span><br><span class="line">            <span class="keyword">return</span> executors[idx.getAndIncrement() &amp; executors.length - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 普通选择器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericEventExecutorChooser</span> <span class="keyword">implements</span> <span class="title">EventExecutorChooser</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger idx = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> EventExecutor[] executors;</span><br><span class="line"></span><br><span class="line">        GenericEventExecutorChooser(EventExecutor[] executors) &#123;</span><br><span class="line">            <span class="keyword">this</span>.executors = executors;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> EventExecutor <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 按照最普通的取模的方式从index=0开始向后开始选择</span></span><br><span class="line">            <span class="keyword">return</span> executors[Math.abs(idx.getAndIncrement() % executors.length)];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>通过本节内容，我们了解到了EventLoop与EventLoopGroup的基本原理，EventLoopGroup与EventLoop的创建过程：</p><ul><li>创建线程任务执行器 ThreadPerTaskExecutor</li><li>创建EventLoop</li><li>创建任务选择器 EventExecutorChooser</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://coding.imooc.com/class/230.html" target="_blank" rel="noopener">Java读源码之Netty深入剖析</a></li><li><a href="https://github.com/wangweiX/myBooks/blob/master/computer/netty/Netty%20in%20Action.epub" target="_blank" rel="noopener">《Netty in action》</a></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Netty Channel源码分析]]></title>
      <url>/posts/netty-channel-source-analyse.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/pexels-photo-889839.jpeg?imageslim" alt="pexels-photo-889839"></p><p><a href="https://wangwei.one/posts/netty-core-assembly-intro.html">前面</a>，我们大致了解了Netty中的几个核心组件。今天我们就来先来介绍Netty的网络通信组件，用于执行网络I/O操作 —— <a href="https://netty.io/4.1/api/io/netty/channel/Channel.html" target="_blank" rel="noopener"><strong><em>Channel</em></strong></a>。</p><a id="more"></a><blockquote><p>Netty版本：4.1.30</p></blockquote><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>数据在网络中总是以字节的形式进行流通。我们在进行网络编程时选用何种传输方式编码（OIO、NIO等）决定了这些字节的传输方式。</p><p>在没有Netty之前，为了提升系统的并发能力，从OIO切换到NIO时，需要对代码进行大量的重构，因为相应的Java NIO 与 IO API大不相同。而Netty在这些Java原生API的基础上做了一层封装，对用户提供了高度抽象而又统一的API，从而让传输方式的切换不在变得困难，只需要直接使用即可，而不需要对整个代码进行重构。</p><h3 id="Netty-Channel-UML"><a href="#Netty-Channel-UML" class="headerlink" title="Netty Channel UML"></a>Netty Channel UML</h3><p>netty channel族如下：</p><p><img src="https://img.i7years.com/netty/NettyChannelUML.png" alt="NettyChannel"></p><p>整个族群中，<a href="https://netty.io/4.1/api/io/netty/channel/AbstractChannel.html" target="_blank" rel="noopener">AbstractChannel</a> 是最为关键的一个抽象类，从它继承出了AbstractNioChannel、AbstractOioChannel、AbstractEpollChannel、LocalChannel、EmbeddedChannel等类，每个类代表了不同的协议以及相应的IO模型。除了 TCP 协议以外，Netty 还支持很多其他的连接协议，并且每种协议还有 NIO(异步 IO) 和 OIO(Old-IO，即传统的阻塞 IO) 版本的区别. 不同协议不同的阻塞类型的连接都有不同的 Channel 类型与之对应。下面是一些常用的 Channel 类型：</p><ul><li>NioSocketChannel：代表异步的客户端 TCP Socket 连接</li><li>NioServerSocketChannel：异步的服务器端 TCP Socket 连接</li><li>NioDatagramChannel：异步的 UDP 连接</li><li>NioSctpChannel：异步的客户端 Sctp 连接</li><li>NioSctpServerChannel：异步的 Sctp 服务器端连接</li><li>OioSocketChannel：同步的客户端 TCP Socket 连接</li><li>OioServerSocketChannel：同步的服务器端 TCP Socket 连接</li><li>OioDatagramChannel：同步的 UDP 连接</li><li>OioSctpChannel：同步的 Sctp 服务器端连接</li><li>OioSctpServerChannel：同步的客户端 TCP Socket 连接</li></ul><h3 id="Channel-API"><a href="#Channel-API" class="headerlink" title="Channel API"></a>Channel API</h3><p>我们先来看下最顶层接口 <a href="https://netty.io/4.1/api/io/netty/channel/Channel.html" target="_blank" rel="noopener">channel</a> 主要的API，常用的如下：</p><table><thead><tr><th>接口名</th><th>描述</th></tr></thead><tbody><tr><td>eventLoop()</td><td>Channel需要注册到EventLoop的多路复用器上，用于处理I/O事件，通过eventLoop()方法可以获取到Channel注册的EventLoop。EventLoop本质上就是处理网络读写事件的Reactor线程。在Netty中，它不仅仅用来处理网络事件，也可以用来执行定时任务和用户自定义NioTask等任务。</td></tr><tr><td>pipeline()</td><td>返回channel分配的ChannelPipeline</td></tr><tr><td>isActive()</td><td>判断channel是否激活。激活的意义取决于底层的传输类型。例如，一个Socket传输一旦连接到了远程节点便是活动的，而一个Datagram传输一旦被打开便是活动的</td></tr><tr><td>localAddress()</td><td>返回本地的socket地址</td></tr><tr><td>remoteAddress()</td><td>返回远程的socket地址</td></tr><tr><td>flush()</td><td>将之前已写的数据冲刷到底层Channel上去</td></tr><tr><td>write(Object msg)</td><td>请求将当前的msg通过ChannelPipeline写入到目标Channel中。注意，write操作只是将消息存入到消息发送环形数组中，并没有真正被发送，只有调用flush操作才会被写入到Channel中，发送给对方。</td></tr><tr><td>writeAndFlush()</td><td>等同于调用write()并接着调用flush()</td></tr><tr><td>metadate()</td><td>熟悉TCP协议的读者可能知道，当创建Socket的时候需要指定TCP参数，例如接收和发送的TCP缓冲区大小，TCP的超时时间。是否重用地址等。在Netty中，每个Channel对应一个物理链接，每个连接都有自己的TCP参数配置。所以，Channel会聚合一个ChannelMetadata用来对TCP参数提供元数据描述信息，通过metadata()方法就可以获取当前Channel的TCP参数配置。</td></tr><tr><td>read()</td><td>从当前的Channel中读取数据到第一个inbound缓冲区中，如果数据被成功读取，触发ChannelHandler.channelRead(ChannelHandlerContext,Object)事件。读取操作API调用完成后，紧接着会触发ChannelHander.channelReadComplete（ChannelHandlerContext）事件，这样业务的ChannelHandler可以决定是否需要继续读取数据。如果已经有操作请求被挂起，则后续的读操作会被忽略。</td></tr><tr><td>close(ChannelPromise promise)</td><td>主动关闭当前连接，通过ChannelPromise设置操作结果并进行结果通知，无论操作是否成功，都可以通过ChannelPromise获取操作结果。该操作会级联触发ChannelPipeline中所有ChannelHandler的ChannelHandler.close(ChannelHandlerContext，ChannelPromise)事件。</td></tr><tr><td>parent()</td><td>对于服务端Channel而言，它的父Channel为空；对于客户端Channel，它的父Channel就是创建它的ServerSocketChannel。</td></tr><tr><td>id()</td><td>返回ChannelId对象，ChannelId是Channel的唯一标识。</td></tr></tbody></table><h2 id="Channel创建"><a href="#Channel创建" class="headerlink" title="Channel创建"></a>Channel创建</h2><p>对Netty Channel API以及相关的类有了一个初步了解之后，接下来我们来详细了解一下在Netty的启动过程中Channel是如何创建的。服务端Channel的创建过程，主要分为四个步骤：1）Channel创建；2）Channel初始化；3）Channel注册；4）Channel绑定。</p><p><img src="https://img.i7years.com/blog/Netty%20Channel%20Process.png" alt="Netty Channel Process"></p><p>我们以下面的代码为例进行解析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建两个线程组,专门用于网络事件的处理，Reactor线程组</span></span><br><span class="line"><span class="comment">// 用来接收客户端的连接，</span></span><br><span class="line">EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"><span class="comment">// 用来进行SocketChannel的网络读写</span></span><br><span class="line">EventLoopGroup workGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建辅助启动类ServerBootstrap，并设置相关配置：</span></span><br><span class="line">ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line"><span class="comment">// 设置处理Accept事件和读写操作的事件循环组</span></span><br><span class="line">b.group(bossGroup, workGroup)</span><br><span class="line">         <span class="comment">// 配置Channel类型</span></span><br><span class="line">        .channel(NioServerSocketChannel.class)</span><br><span class="line">         <span class="comment">// 配置监听地址</span></span><br><span class="line">        .localAddress(<span class="keyword">new</span> InetSocketAddress(port))</span><br><span class="line">         <span class="comment">// 设置服务器通道的选项，设置TCP属性</span></span><br><span class="line">        .option(ChannelOption.SO_KEEPALIVE, Boolean.TRUE)</span><br><span class="line">         <span class="comment">// 设置建立连接后的客户端通道的选项</span></span><br><span class="line">        .childOption(ChannelOption.CONNECT_TIMEOUT_MILLIS, <span class="number">5000</span>)</span><br><span class="line">         <span class="comment">// channel属性，便于保存用户自定义数据</span></span><br><span class="line">        .attr(AttributeKey.newInstance(<span class="string">"UserId"</span>), <span class="string">"60293"</span>)</span><br><span class="line">    	.handler(<span class="keyword">new</span> LoggingHandler(LogLevel.INFO))</span><br><span class="line">        <span class="comment">// 设置子处理器，主要是用户的自定义处理器，用于处理IO网络事件</span></span><br><span class="line">        .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                ch.pipeline().addLast(serverHandler);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用bind()方法绑定端口，sync()会阻塞等待处理请求。这是因为bind()方法是一个异步过程，会立即返回一个ChannelFuture对象，调用sync()会等待执行完成</span></span><br><span class="line">ChannelFuture f = b.bind().sync();</span><br><span class="line"><span class="comment">// 获得Channel的closeFuture阻塞等待关闭，服务器Channel关闭时closeFuture会完成</span></span><br><span class="line">f.channel().closeFuture().sync();</span><br></pre></td></tr></table></figure><p>调用channel()接口设置 <em>AbstractBootstrap</em> 的成员变量 <em>channelFactory</em>，该变量顾名思义就是用于创建channel的工厂类。源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> B <span class="title">channel</span><span class="params">(Class&lt;? extends C&gt; channelClass)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (channelClass == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"channelClass"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建 channelFactory</span></span><br><span class="line">    <span class="keyword">return</span> channelFactory(<span class="keyword">new</span> ReflectiveChannelFactory&lt;C&gt;(channelClass));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> B <span class="title">channelFactory</span><span class="params">(ChannelFactory&lt;? extends C&gt; channelFactory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (channelFactory == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"channelFactory"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.channelFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"channelFactory set already"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.channelFactory = channelFactory;</span><br><span class="line">    <span class="keyword">return</span> (B) <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><em>channelFactory</em> 设置为 <a href="https://netty.io/4.1/api/io/netty/channel/ReflectiveChannelFactory.html" target="_blank" rel="noopener">ReflectiveChannelFactory</a> ，在我们这个例子中 clazz 为 <em>NioServerSocketChannel</em> ，我们可以看到其中有个 newChannel() 接口，通过反射的方式来调用，这个接口的调用处我们后面会介绍到。源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Channel工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectiveChannelFactory</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Channel</span>&gt; <span class="keyword">implements</span> <span class="title">ChannelFactory</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;? extends T&gt; clazz;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ReflectiveChannelFactory</span><span class="params">(Class&lt;? extends T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"clazz"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.clazz = clazz;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">newChannel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 通过反射来进行常见Channel实例</span></span><br><span class="line">            <span class="keyword">return</span> clazz.newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ChannelException(<span class="string">"Unable to create Channel from class "</span> + clazz, t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> StringUtil.simpleClassName(clazz) + <span class="string">".class"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们来看下 <em>NioServerSocketChannel</em> 的构造函数，主要就是：</p><ul><li>生成ServerSocketChannel对象。NioServerSocketChannel创建时，首先使用SelectorProvider的openServerSocketChannel打开服务器套接字通道。SelectorProvider是Java的NIO提供的抽象类，是选择器和可选择通道的服务提供者。具体的实现类有SelectorProviderImpl，EPollSelectorProvide，PollSelectorProvider。选择器的主要工作是根据操作系统类型和版本选择合适的Provider：如果LInux内核版本&gt;=2.6则，具体的SelectorProvider为EPollSelectorProvider，否则为默认的PollSelectorProvider。</li><li>设置 ServerSocketChannelConfig 成员变量。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ServerSocketChannel <span class="title">newSocket</span><span class="params">(SelectorProvider provider)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 调用JDK底层API生成 ServerSocketChannel 对象实例</span></span><br><span class="line">        <span class="keyword">return</span> provider.openServerSocketChannel();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ChannelException(<span class="string">"Failed to open a server socket."</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ServerSocketChannelConfig config;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NioServerSocketChannel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(newSocket(DEFAULT_SELECTOR_PROVIDER));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NioServerSocketChannel</span><span class="params">(SelectorProvider provider)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(newSocket(provider));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NioServerSocketChannel</span><span class="params">(ServerSocketChannel channel)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 调用 AbstractNioChannel 构造器，创建 NioServerSocketChannel，设置SelectionKey为ACCEPT</span></span><br><span class="line">    <span class="keyword">super</span>(<span class="keyword">null</span>, channel, SelectionKey.OP_ACCEPT);</span><br><span class="line">    <span class="comment">// 创建ChannleConfig对象,主要是TCP参数配置类</span></span><br><span class="line">    config = <span class="keyword">new</span> NioServerSocketChannelConfig(<span class="keyword">this</span>, javaChannel().socket());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AbstractNioChannel 的构造器如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">AbstractNioChannel</span><span class="params">(Channel parent, SelectableChannel ch, <span class="keyword">int</span> readInterestOp)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 调用 AbstractChannel 构造器</span></span><br><span class="line">    <span class="keyword">super</span>(parent);</span><br><span class="line">    <span class="keyword">this</span>.ch = ch;</span><br><span class="line">    <span class="comment">// 从上一步过来，这里设置为 SelectionKey.OP_ACCEPT</span></span><br><span class="line">    <span class="keyword">this</span>.readInterestOp = readInterestOp;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 设置为非阻塞状态</span></span><br><span class="line">        ch.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ch.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e2) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">                logger.warn(<span class="string">"Failed to close a partially initialized socket."</span>, e2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ChannelException(<span class="string">"Failed to enter non-blocking mode."</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <em>AbstractChannel</em> 构造器中，会设Channel关联的三个核心对象：ChannelId、ChannelPipeline、Unsafe。</p><ul><li>初始化ChannelId，ChannelId是一个全局唯一的值；</li><li>创建 <em>NioMessageUnsafe</em> 实例，该类为Channel提供了用于完成网络通讯相关的底层操作，如connect(),read(),register(),bind(),close()等；</li><li>为Channel创建DefaultChannelPipeline，初始事件传播管道。关于Pipeline的分析，请看 <a href="https://wangwei.one/posts/netty-pipeline-source-analyse.html">后文</a> 的分析。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">AbstractChannel</span><span class="params">(Channel parent)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.parent = parent;</span><br><span class="line">    <span class="comment">// 设置ChannelId</span></span><br><span class="line">    id = newId();</span><br><span class="line">    <span class="comment">// 设置Unsafe</span></span><br><span class="line">    unsafe = newUnsafe();</span><br><span class="line">    <span class="comment">// 设置Pipeline</span></span><br><span class="line">    pipeline = newChannelPipeline();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从 NioServerSocketChannelConfig 的构造函数追溯下去，在 DefaultChannelConfig 会设置channel成员变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DefaultChannelConfig</span><span class="params">(Channel channel)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(channel, <span class="keyword">new</span> AdaptiveRecvByteBufAllocator());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">DefaultChannelConfig</span><span class="params">(Channel channel, RecvByteBufAllocator allocator)</span> </span>&#123;</span><br><span class="line">    setRecvByteBufAllocator(allocator, channel.metadata());</span><br><span class="line">    <span class="comment">// 绑定channel</span></span><br><span class="line">    <span class="keyword">this</span>.channel = channel;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是channel创建的过程，总结一下:</p><ul><li>通过 ReflectiveChannelFactory 工厂类，以反射的方式对channel进行创建；</li><li>channel创建的过程中，会创建四个重要的对象：ChannelId、ChannelConfig、ChannelPipeline、Unsafe。</li></ul><h2 id="Channel初始化"><a href="#Channel初始化" class="headerlink" title="Channel初始化"></a>Channel初始化</h2><p>主要分为以下两步：</p><ul><li>将启动器（Bootstrap）设置的选项和属性设置到NettyChannel上面</li><li>向Pipeline添加初始化Handler，供注册后使用</li></ul><p>我们从 <em>AbstractBootstrap</em> 的 bind() 接口进去，调用链：bind() —&gt; doBind(localAddress) —&gt; initAndRegister() —&gt; init(Channel channel)，我们看下 <em>ServerBootstrap</em> 中 init() 接口的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> ChannelFuture <span class="title">initAndRegister</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Channel channel = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 调用Channel工程类的newChannel()接口，创建channel，就是前面我们讲的部分内容</span></span><br><span class="line">        channel = channelFactory.newChannel();</span><br><span class="line">        <span class="comment">// 初始化channel</span></span><br><span class="line">        init(channel);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化Channel，我们来重点看下 init(channel) 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(Channel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 获取启动器 启动时配置的option参数，主要是TCP的一些属性</span></span><br><span class="line">    <span class="keyword">final</span> Map&lt;ChannelOption&lt;?&gt;, Object&gt; options = options0();</span><br><span class="line">    <span class="comment">// 将获得到 options 配置到 ChannelConfig 中去</span></span><br><span class="line">    <span class="keyword">synchronized</span> (options) &#123;</span><br><span class="line">        setChannelOptions(channel, options, logger);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取 ServerBootstrap 启动时配置的 attr 参数</span></span><br><span class="line">    <span class="keyword">final</span> Map&lt;AttributeKey&lt;?&gt;, Object&gt; attrs = attrs0();</span><br><span class="line">    <span class="comment">// 配置 Channel attr，主要是设置用户自定义的一些参数</span></span><br><span class="line">    <span class="keyword">synchronized</span> (attrs) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;AttributeKey&lt;?&gt;, Object&gt; e: attrs.entrySet()) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">            AttributeKey&lt;Object&gt; key = (AttributeKey&lt;Object&gt;) e.getKey();</span><br><span class="line">            channel.attr(key).set(e.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 获取channel中的 pipeline，这个pipeline使我们前面在channel创建过程中设置的 pipeline</span></span><br><span class="line">    ChannelPipeline p = channel.pipeline();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将启动器中配置的 childGroup 保存到局部变量 currentChildGroup</span></span><br><span class="line">    <span class="keyword">final</span> EventLoopGroup currentChildGroup = childGroup;</span><br><span class="line">    <span class="comment">// 将启动器中配置的 childHandler 保存到局部变量 currentChildHandler</span></span><br><span class="line">    <span class="keyword">final</span> ChannelHandler currentChildHandler = childHandler;</span><br><span class="line">    <span class="keyword">final</span> Entry&lt;ChannelOption&lt;?&gt;, Object&gt;[] currentChildOptions;</span><br><span class="line">    <span class="keyword">final</span> Entry&lt;AttributeKey&lt;?&gt;, Object&gt;[] currentChildAttrs;</span><br><span class="line">    <span class="comment">// 保存用户设置的 childOptions 到局部变量 currentChildOptions</span></span><br><span class="line">    <span class="keyword">synchronized</span> (childOptions) &#123;</span><br><span class="line">        currentChildOptions = childOptions.entrySet().toArray(newOptionArray(childOptions.size()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 保存用户设置的 childAttrs 到局部变量 currentChildAttrs</span></span><br><span class="line">    <span class="keyword">synchronized</span> (childAttrs) &#123;</span><br><span class="line">        currentChildAttrs = childAttrs.entrySet().toArray(newAttrArray(childAttrs.size()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p.addLast(<span class="keyword">new</span> ChannelInitializer&lt;Channel&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(<span class="keyword">final</span> Channel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line">            <span class="comment">// 获取启动器上配置的handler</span></span><br><span class="line">            ChannelHandler handler = config.handler();</span><br><span class="line">            <span class="keyword">if</span> (handler != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 添加 handler 到 pipeline 中</span></span><br><span class="line">                pipeline.addLast(handler);</span><br><span class="line">            &#125;</span><br><span class="line">            ch.eventLoop().execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="comment">// 用child相关的参数创建出一个新连接接入器ServerBootstrapAcceptor</span></span><br><span class="line">                    <span class="comment">// 通过 ServerBootstrapAcceptor 可以将一个新连接绑定到一个线程上去</span></span><br><span class="line">                    <span class="comment">// 每次有新的连接进来 ServerBootstrapAcceptor 都会用child相关的属性对它们进行配置，并注册到ChaildGroup上去</span></span><br><span class="line">                    pipeline.addLast(<span class="keyword">new</span> ServerBootstrapAcceptor(</span><br><span class="line">                            ch, currentChildGroup, currentChildHandler, currentChildOptions, currentChildAttrs));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>对于新连接接入器 ServerBootstrapAcceptor 的分析 ，请查看 <a href="https://wangwei.one/posts/netty-new-connection-acceptor-and-niosocketchannel-analyse.html">后文</a></p></blockquote><h2 id="Channel注册"><a href="#Channel注册" class="headerlink" title="Channel注册"></a>Channel注册</h2><p>在channel完成创建和初始化之后，接下来就需要将其注册到事件轮循器Selector上去。我们回到 initAndRegister 接口上去：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> ChannelFuture <span class="title">initAndRegister</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取 EventLoopGroup ，并调用它的 register 方法来注册 channel</span></span><br><span class="line">    ChannelFuture regFuture = config().group().register(channel);</span><br><span class="line">    <span class="keyword">if</span> (regFuture.cause() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (channel.isRegistered()) &#123;</span><br><span class="line">            channel.close();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            channel.unsafe().closeForcibly();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> regFuture;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终会向下调用到 SingleThreadEventLoop 中的 register 接口：</p><blockquote><p>如何调用到这里，里面的细节需要等到后面文章讲到 MultithreadEventExecutorGroup 再详细说明</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ChannelFuture <span class="title">register</span><span class="params">(<span class="keyword">final</span> ChannelPromise promise)</span> </span>&#123;</span><br><span class="line">    ObjectUtil.checkNotNull(promise, <span class="string">"promise"</span>);</span><br><span class="line">    <span class="comment">// 调用unsafe的register接口</span></span><br><span class="line">    promise.channel().unsafe().register(<span class="keyword">this</span>, promise);</span><br><span class="line">    <span class="keyword">return</span> promise;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码跟踪下去，直到 AbstractChannel 中的 AbstractUnsafe 这个类中的 register 接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(EventLoop eventLoop, <span class="keyword">final</span> ChannelPromise promise)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (eventLoop == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"eventLoop"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isRegistered()) &#123;</span><br><span class="line">        promise.setFailure(<span class="keyword">new</span> IllegalStateException(<span class="string">"registered to an event loop already"</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!isCompatible(eventLoop)) &#123;</span><br><span class="line">        promise.setFailure(</span><br><span class="line">                <span class="keyword">new</span> IllegalStateException(<span class="string">"incompatible event loop type: "</span> + eventLoop.getClass().getName()));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将该Channel与eventLoop 进行绑定，后续与该channel相关的IO操作都由eventLoop来处理</span></span><br><span class="line">    AbstractChannel.<span class="keyword">this</span>.eventLoop = eventLoop;</span><br><span class="line">	<span class="comment">// 初次注册时 eventLoop.inEventLoop() 返回false</span></span><br><span class="line">    <span class="keyword">if</span> (eventLoop.inEventLoop()) &#123;</span><br><span class="line">        <span class="comment">// 调用实际的注册接口register0</span></span><br><span class="line">        register0(promise);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            eventLoop.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="comment">// 调用实际的注册接口register0</span></span><br><span class="line">                    register0(promise);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            logger.warn(</span><br><span class="line">                    <span class="string">"Force-closing a channel whose registration task was not accepted by an event loop: &#123;&#125;"</span>,</span><br><span class="line">                    AbstractChannel.<span class="keyword">this</span>, t);</span><br><span class="line">            closeForcibly();</span><br><span class="line">            closeFuture.setClosed();</span><br><span class="line">            safeSetFailure(promise, t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>register0接口主要分为以下三段逻辑：</p><ul><li><p>doRegister();</p></li><li><p>pipeline.invokeHandlerAddedIfNeeded();</p></li><li>pipeline.fireChannelRegistered();</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">register0</span><span class="params">(ChannelPromise promise)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!promise.setUncancellable() || !ensureOpen(promise)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span> firstRegistration = neverRegistered;</span><br><span class="line">        <span class="comment">// 调用 doRegister() 接口</span></span><br><span class="line">        doRegister();</span><br><span class="line">        neverRegistered = <span class="keyword">false</span>;</span><br><span class="line">        registered = <span class="keyword">true</span>;</span><br><span class="line">        </span><br><span class="line">       	<span class="comment">// 通过pipeline的传播机制，触发handlerAdded事件</span></span><br><span class="line">        pipeline.invokeHandlerAddedIfNeeded();</span><br><span class="line">        safeSetSuccess(promise);</span><br><span class="line">        <span class="comment">// 通过pipeline的传播机制，触发channelRegistered事件</span></span><br><span class="line">        pipeline.fireChannelRegistered();</span><br><span class="line">        <span class="comment">// 还没有绑定，所以这里的 isActive() 返回false.</span></span><br><span class="line">        <span class="keyword">if</span> (isActive()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (firstRegistration) &#123;</span><br><span class="line">                pipeline.fireChannelActive();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (config().isAutoRead()) &#123;</span><br><span class="line">                beginRead();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        closeForcibly();</span><br><span class="line">        closeFuture.setClosed();</span><br><span class="line">        safeSetFailure(promise, t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来看 AbstractNioChannel 中的 doRegister()接口，最终调用的就是Java JDK底层的NIO API来注册。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doRegister</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> selected = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// eventLoop().unwrappedSelector()：获取selector，将在后面介绍 EventLoop 创建时会讲到</span></span><br><span class="line">            <span class="comment">// 将selector注册到Java NIO Channel上</span></span><br><span class="line">            <span class="comment">// ops 设置为 0，表示不关心任何事件</span></span><br><span class="line">            <span class="comment">// att 设置为 channel自身，表示后面还会将channel取出来用作它用(后面文章会讲到)</span></span><br><span class="line">            selectionKey = javaChannel().register(eventLoop().unwrappedSelector(), <span class="number">0</span>, <span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CancelledKeyException e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!selected) &#123;</span><br><span class="line">                eventLoop().selectNow();</span><br><span class="line">                selected = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Channel绑定"><a href="#Channel绑定" class="headerlink" title="Channel绑定"></a>Channel绑定</h2><p>在完成创建、初始化以及注册之后，接下来就是Channel绑定操作。</p><blockquote><p>本小节涉及到的pipeline事件传播机制，我们放到后面的文章中去讲解。</p></blockquote><p>从启动器的bind()接口开始，往下调用 doBind() 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ChannelFuture <span class="title">doBind</span><span class="params">(<span class="keyword">final</span> SocketAddress localAddress)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化及注册</span></span><br><span class="line">    <span class="keyword">final</span> ChannelFuture regFuture = initAndRegister();</span><br><span class="line">    <span class="keyword">final</span> Channel channel = regFuture.channel();</span><br><span class="line">    <span class="keyword">if</span> (regFuture.cause() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> regFuture;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (regFuture.isDone()) &#123;</span><br><span class="line">        <span class="comment">// At this point we know that the registration was complete and successful.</span></span><br><span class="line">        ChannelPromise promise = channel.newPromise();</span><br><span class="line">        <span class="comment">// 调用 doBind0</span></span><br><span class="line">        doBind0(regFuture, channel, localAddress, promise);</span><br><span class="line">        <span class="keyword">return</span> promise;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>doBind 方法又会调用 doBind0() 方法，在doBind0()方法中会通过EventLoop去执行channel的bind()任务，关于EventLoop的execute接口的分析，请看后面的 <a href="https://wangwei.one/posts/netty-nioeventloop-analyse-for-startup.html">文章</a> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doBind0</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">final</span> ChannelFuture regFuture, <span class="keyword">final</span> Channel channel,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">final</span> SocketAddress localAddress, <span class="keyword">final</span> ChannelPromise promise)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    channel.eventLoop().execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (regFuture.isSuccess()) &#123;</span><br><span class="line">                <span class="comment">// 调用channel.bind接口</span></span><br><span class="line">                channel.bind(localAddress, promise).addListener(ChannelFutureListener.CLOSE_ON_FAILURE);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                promise.setFailure(regFuture.cause());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>doBind0() 方法往下会条用到 <code>pipeline.bind(localAddress, promise);</code> 方法，通过pipeline的传播机制，最终会调用到 AbstractChannel.AbstractUnsafe.bind() 方法，这个方法主要做两件事情：</p><ul><li>调用doBind()：调用底层JDK API进行Channel的端口绑定。</li><li>调用pipeline.fireChannelActive()：</li></ul><blockquote><p>关于Pipeline的传播机制，请看 <a href="https://wangwei.one/posts/netty-pipeline-source-analyse-2.html">后文</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(<span class="keyword">final</span> SocketAddress localAddress, <span class="keyword">final</span> ChannelPromise promise)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    ....</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// wasActive 在绑定成功前为 false</span></span><br><span class="line">    <span class="keyword">boolean</span> wasActive = isActive();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 调用doBind()调用JDK底层API进行端口绑定</span></span><br><span class="line">        doBind(localAddress);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        safeSetFailure(promise, t);</span><br><span class="line">        closeIfClosed();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 完成绑定之后，isActive() 返回true</span></span><br><span class="line">    <span class="keyword">if</span> (!wasActive &amp;&amp; isActive()) &#123;</span><br><span class="line">        invokeLater(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 触发channelActive事件</span></span><br><span class="line">                pipeline.fireChannelActive();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    safeSetSuccess(promise);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们这里看服务端 NioServerSocketChannel 实现的 doBind方法，最终会调用JDK 底层 NIO Channel的bind方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doBind</span><span class="params">(SocketAddress localAddress)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (PlatformDependent.javaVersion() &gt;= <span class="number">7</span>) &#123;</span><br><span class="line">        javaChannel().bind(localAddress, config.getBacklog());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        javaChannel().socket().bind(localAddress, config.getBacklog());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用 pipeline.fireChannelActive()，开始传播active事件，pipeline首先就会调用HeadContext节点进行事件传播，会调用到 DefaultChannelPipeline.HeadContext.channelActive() 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 触发heanlder 的 ChannelActive 方法</span></span><br><span class="line">    ctx.fireChannelActive();</span><br><span class="line">    <span class="comment">// 调用接口readIfIsAutoRead</span></span><br><span class="line">    readIfIsAutoRead();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readIfIsAutoRead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (channel.config().isAutoRead()) &#123;</span><br><span class="line">        <span class="comment">// 调用channel.read()</span></span><br><span class="line">        channel.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>channel.read() 方法往下会调用到 AbstractChannelHandlerContext.read() 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ChannelHandlerContext <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取下一个ChannelHandlerContext节点</span></span><br><span class="line">    <span class="keyword">final</span> AbstractChannelHandlerContext next = findContextOutbound();</span><br><span class="line">    <span class="comment">// 获取EventExecutor</span></span><br><span class="line">    EventExecutor executor = next.executor();</span><br><span class="line">    <span class="keyword">if</span> (executor.inEventLoop()) &#123;</span><br><span class="line">        <span class="comment">// 调用下一个节点的invokeRead接口</span></span><br><span class="line">        next.invokeRead();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Runnable task = next.invokeReadTask;</span><br><span class="line">        <span class="keyword">if</span> (task == <span class="keyword">null</span>) &#123;</span><br><span class="line">            next.invokeReadTask = task = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    next.invokeRead();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        executor.execute(task);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过pipeline的事件传播机制，最终会调用到 AbstractChannel.AbstractUnsafe.beginRead() 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">beginRead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    assertEventLoop();</span><br><span class="line">    <span class="keyword">if</span> (!isActive()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 调用 doBeginRead();</span></span><br><span class="line">        doBeginRead();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Exception e) &#123;</span><br><span class="line">        invokeLater(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                pipeline.fireExceptionCaught(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        close(voidPromise());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看下 AbstractNioChannel 对doBeginRead接口的实现逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册一个OP_ACCEPT</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doBeginRead</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// Channel.read() or ChannelHandlerContext.read() was called</span></span><br><span class="line">    <span class="comment">// 获取channel注册是的设置的 selectionKey</span></span><br><span class="line">    <span class="keyword">final</span> SelectionKey selectionKey = <span class="keyword">this</span>.selectionKey;</span><br><span class="line">    <span class="comment">// selectionKey无效则返回</span></span><br><span class="line">    <span class="keyword">if</span> (!selectionKey.isValid()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    readPending = <span class="keyword">true</span>;</span><br><span class="line">	<span class="comment">// 前面讲到channel在注册的时候，这是 interestOps 设置的是 0</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> interestOps = selectionKey.interestOps();</span><br><span class="line">    <span class="comment">// readInterestOp 在前面讲到channel创建的时候，设置值为 SelectionKey.OP_ACCEPT</span></span><br><span class="line">    <span class="keyword">if</span> ((interestOps &amp; readInterestOp) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 最终 selectionKey 的兴趣集就会设置为 SelectionKey.OP_ACCEPT</span></span><br><span class="line">        <span class="comment">// 表示随时可以接收新连接的接入</span></span><br><span class="line">        selectionKey.interestOps(interestOps | readInterestOp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此，我们就分析完了Channel的创建、初始化、注册、绑定的流程。其中涉及到的EventLoopGroup和Pipeline事件传播机制的知识点，我们放到后面的文章中去讲解。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://coding.imooc.com/class/230.html" target="_blank" rel="noopener">Java读源码之Netty深入剖析</a></li><li><a href="https://www.kancloud.cn/ssj234/netty-source/433213" target="_blank" rel="noopener">https://www.kancloud.cn/ssj234/netty-source/433213</a></li><li><a href="https://segmentfault.com/a/1190000007282789" target="_blank" rel="noopener">https://segmentfault.com/a/1190000007282789</a></li><li><a href="https://segmentfault.com/a/1190000007283053" target="_blank" rel="noopener">https://segmentfault.com/a/1190000007283053</a></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Netty核心组件介绍]]></title>
      <url>/posts/netty-core-assembly-intro.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/pexels-photo-935785.jpeg?imageslim" alt="pexels-photo-935785"></p><p>前面，我们学习了Netty的基本 <a href="https://wangwei.one/posts/ce42513b.html">原理和架构</a> ，今天我们来大致了解一下Netty中的各个组件。</p><a id="more"></a><p>同我们 <a href="https://wangwei.one/posts/319e2a29.html">前面</a> 学习IO与NIO一样的套路，我们先通过echo服务demo来学习netty的使用。</p><p><img src="https://img.i7years.com/blog/Netty%20Echo%20Service.png" alt="Netty Echo Service"></p><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><ul><li>JDK &gt;= 8</li><li><a href="https://mvnrepository.com/artifact/io.netty/netty-all/4.1.29.Final" target="_blank" rel="noopener">Netty 4.1.29.Final</a></li></ul><h2 id="编写Echo-Server代码"><a href="#编写Echo-Server代码" class="headerlink" title="编写Echo Server代码"></a>编写Echo Server代码</h2><p>Netty服务端的开发主要有以下两个步骤：</p><ul><li>至少有一个<strong>ChannelHandler</strong> —— 这个主要用于处理从client端接受到的信息，是主要的业务逻辑处理类。</li><li><strong>Bootstrapping</strong> —— 用于配置服务的启动代码。最简单的就是，监听一个端口。</li></ul><h3 id="实现EchoServerHandler逻辑"><a href="#实现EchoServerHandler逻辑" class="headerlink" title="实现EchoServerHandler逻辑"></a>实现EchoServerHandler逻辑</h3><p>服务端用于处理入站的网络请求，因此我们需要实现接口类 <a href="https://netty.io/4.1/api/index.html?io/netty/channel/ChannelInboundHandler.html" target="_blank" rel="noopener">ChannelInboundHandler</a>，它里面定义了用于</p><p>处理入站请求的一些接口。由于我们这个例子比较简单，只需要用到它的几个方法即可，因此我们的实现类只需要继承子类 <a href="https://netty.io/4.1/api/index.html?io/netty/channel/ChannelInboundHandlerAdapter.html" target="_blank" rel="noopener">ChannelInboundHandlerAdapter</a> 即可，它默认实现了 <a href="https://netty.io/4.1/api/index.html?io/netty/channel/ChannelInboundHandler.html" target="_blank" rel="noopener">ChannelInboundHandler</a> 中的接口。</p><p>有几个方法需要留意一下：</p><ul><li><strong>channelRead()</strong> —— 每当有入站请求来临时，该方法都会被调用</li><li><strong>channelReadComplete()</strong> —— 对channelRead() 的最后一次调用是当前批处理中的最后一条消息时，该方法会被调用</li><li><strong>exceptionCaught()</strong> —— 在read操作执行期间，如果发生异常，该方法则会被调用。</li></ul><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @Sharable象征着该ChannelHandler实例在多个channels之间可以被安全地分享</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Sharable</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> </span>&#123;</span><br><span class="line">        ByteBuf in = (ByteBuf) msg;</span><br><span class="line">        <span class="comment">// 打印消息日志</span></span><br><span class="line">        System.out.println(<span class="string">"Server received: "</span> + in.toString(CharsetUtil.UTF_8));</span><br><span class="line">        <span class="comment">// 将入站消息发送给发送者，但不冲刷出站消息</span></span><br><span class="line">        ctx.write(in);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 将待处理的消息冲刷到远程节点上，并关闭Channel</span></span><br><span class="line">        ctx.writeAndFlush(Unpooled.EMPTY_BUFFER)</span><br><span class="line">                .addListener(ChannelFutureListener.CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 打印堆栈信息</span></span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">        <span class="comment">// 关闭channel</span></span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现EchoServer逻辑"><a href="#实现EchoServer逻辑" class="headerlink" title="实现EchoServer逻辑"></a>实现EchoServer逻辑</h3><p>接下来，我们使用 <a href="https://netty.io/4.1/api/io/netty/bootstrap/ServerBootstrap.html" target="_blank" rel="noopener">ServerBootstrap</a> 来实现服务端的开发，主要以下两点：</p><ul><li>绑定一个监听端口</li><li>配置Channels，当有入站消息到达时，通知 EchoServerHeadler 实例。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> nia.chapter2.echoserver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoServer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EchoServer</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (args.length != <span class="number">1</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">"Usage: "</span> + EchoServer.class.getSimpleName() + <span class="string">" &lt;port&gt;"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> port = Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">new</span> EchoServer(port).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> EchoServerHandler serverHandler = <span class="keyword">new</span> EchoServerHandler();</span><br><span class="line">        <span class="comment">// 创建 EventLoopGroup 实例</span></span><br><span class="line">        EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建 ServerBootstrap 实例</span></span><br><span class="line">            ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            b.group(group)</span><br><span class="line">                	<span class="comment">// 执行Channel的类型为：NioServerSocketChannel</span></span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                	<span class="comment">// 绑定端口</span></span><br><span class="line">                    .localAddress(<span class="keyword">new</span> InetSocketAddress(port))</span><br><span class="line">                	<span class="comment">// 将EchoServerHandler添加到ChannelPipeline中去</span></span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            <span class="comment">// EchoServerHandler有注解 @Sharable，因此我们总是可以使用改实例</span></span><br><span class="line">                            ch.pipeline().addLast(serverHandler);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">			<span class="comment">// 异步绑定服务，sync() 用于等待绑定完成</span></span><br><span class="line">            ChannelFuture f = b.bind().sync();</span><br><span class="line">            System.out.println(EchoServer.class.getName() +</span><br><span class="line">                    <span class="string">" started and listening for connections on "</span> + f.channel().localAddress());</span><br><span class="line">            <span class="comment">// 获取Channel的CloseFutrue，在完成之前一直处于阻塞状态</span></span><br><span class="line">            f.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭所有 EventLoopGroup，并释放所有资源</span></span><br><span class="line">            group.shutdownGracefully().sync();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写Echo-Client代码"><a href="#编写Echo-Client代码" class="headerlink" title="编写Echo Client代码"></a>编写Echo Client代码</h2><p>Echo Client代码逻辑：</p><ol><li>连接服务器</li><li>发送一个或多个消息</li><li>等待服务端返回同样的消息</li><li>关闭连接</li></ol><h3 id="实现EchoClientHandler逻辑"><a href="#实现EchoClientHandler逻辑" class="headerlink" title="实现EchoClientHandler逻辑"></a>实现EchoClientHandler逻辑</h3><p>同服务端一样，客户端也要实现 <a href="https://netty.io/4.1/api/index.html?io/netty/channel/ChannelInboundHandler.html" target="_blank" rel="noopener">ChannelInboundHandler</a> 接口，客户端需要继承 <a href="https://netty.io/4.1/api/index.html?io/netty/channel/SimpleChannelInboundHandler.html" target="_blank" rel="noopener">SimpleChannelInboundHandler</a> ，有以下三个接口需要重写：</p><ul><li><strong>channelActive()</strong> —— 当连接建立时，调用该方法</li><li><strong>channelRead0()</strong> —— 当接收到服务端的消息时，调用该方法</li><li><strong>exceptionCaught()</strong> —— 当有异常发生时，执行该方法</li></ul><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> nia.chapter2.echoclient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandler.Sharable;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.CharsetUtil;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Sharable用于标记EchoClientHandler，可以在channel中分享使用</span></span><br><span class="line"><span class="meta">@Sharable</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoClientHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">ByteBuf</span>&gt; </span>&#123;</span><br><span class="line">	</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 一旦连接建立，将会发送消息</span></span><br><span class="line">        ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">"Netty rocks!"</span>,CharsetUtil.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, ByteBuf in)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 记录收到的消息</span></span><br><span class="line">        System.out.println(<span class="string">"Client received: "</span> + in.toString(CharsetUtil.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 打印堆栈信息</span></span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">        <span class="comment">// 关闭channel</span></span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现-EchoClient-逻辑"><a href="#实现-EchoClient-逻辑" class="headerlink" title="实现 EchoClient 逻辑"></a>实现 EchoClient 逻辑</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> nia.chapter2.echoclient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.Bootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoClient</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String host;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EchoClient</span><span class="params">(String host, <span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.host = host;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建Bootstrap</span></span><br><span class="line">            Bootstrap b = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">            <span class="comment">// 指定使用 NioEventLoopGroup 去处理客户端事件</span></span><br><span class="line">            b.group(group)</span><br><span class="line">                <span class="comment">// 指定channel类型为NIO</span></span><br><span class="line">                .channel(NioSocketChannel.class)</span><br><span class="line">                <span class="comment">// 指定要连接的远程地址</span></span><br><span class="line">                .remoteAddress(<span class="keyword">new</span> InetSocketAddress(host, port))</span><br><span class="line">                <span class="comment">// 将 EchoClientHandler 添加到 pipeline中</span></span><br><span class="line">                .handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        ch.pipeline().addLast(<span class="keyword">new</span> EchoClientHandler());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            <span class="comment">// 连接远程地址，一直等待直到连接完成</span></span><br><span class="line">            ChannelFuture f = b.connect().sync();</span><br><span class="line">            <span class="comment">// 在channel关闭前一直处于block状态</span></span><br><span class="line">            f.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭线程池，释放所有资源</span></span><br><span class="line">            group.shutdownGracefully().sync();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (args.length != <span class="number">2</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">"Usage: "</span> + EchoClient.class.getSimpleName() +</span><br><span class="line">                    <span class="string">" &lt;host&gt; &lt;port&gt;"</span></span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> String host = args[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> port = Integer.parseInt(args[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">new</span> EchoClient(host, port).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>为什么client使用SimpleChannelInboundHandler ，而server端使用ChannelInboundHandlerAdapter 的区别 ？</p><p>在Client中，channelRead0()完成时，消息已经处理完。当该方法返回时，SimpleChannelInboundHandler 会释放保存该消息的ByteBuf的内存引用。</p><p>在Server中，接收完消息后，还需要将消息回传给客户端，并且wirte()是异步的，当channelRead() 完成时，消息内存还没有被释放。需要等到channelReadComplete()中调用writeAndFlush()才会被释放。</p></blockquote><h2 id="Netty组件"><a href="#Netty组件" class="headerlink" title="Netty组件"></a>Netty组件</h2><p>这里我们先简要了解一下以下几个组件的作用，留个映像，后面我们会对每个组件做详细深入。</p><p><strong>Channel</strong></p><p>同我们前面学习 <a href="https://wangwei.one/posts/d7aa1132.html">Java NIO Channel</a> 类似，Netty Channel在此基础上做了高度抽象的封装，主要用于网络I/O数据的基本操作，如bind()、connect()、read()、write()等。</p><p><strong>EventLoop</strong></p><p>在网络连接的整个生命周期内，发生的所有事件的处理主要有EventLoop来处理</p><p><strong>ChannelFuture</strong></p><p>在Netty中，I/O操作主要都是异步进行，当操作发生时，我们需要通过一种方式来知道操作在未来的时间点的执行结果。ChannelFutrue中的addListener()方法，可以注册监听器ChannelFutureListener，当操作完成时，监听器可以主动通知我们。</p><p><strong>ChannelHandler</strong></p><p>channelHandler主要用于应用程序中的业务逻辑的处理，网络中的进入与出去的数据都经由它处理，当有事件发生时，channelHandler会被触发执行。</p><p><strong>ChannelPipeline</strong></p><p>ChannelPipeline提供了一种容器，用于定义数据流入与流出过程中的处理流程。可以将Pipeline看作是一条流水线，原始的原料(字节流)进来，经过加工，最后输出。</p><p><strong>Bootstrapping</strong></p><p>主要用于配置服务端或客户端的Netty程序的启动信息。</p><p><strong>ByteBuf</strong></p><p>字节数据容器，提供比 <a href="https://wangwei.one/posts/40e0e28f.html">Java NIO ByteBuffer</a> 更好的的API。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://github.com/wangweiX/myBooks/blob/master/computer/netty/Netty%20in%20Action.epub" target="_blank" rel="noopener">《Netty in action》</a></li><li><a href="http://tutorials.jenkov.com/netty/overview.html" target="_blank" rel="noopener">http://tutorials.jenkov.com/netty/overview.html</a></li><li><a href="https://github.com/normanmaurer/netty-in-action/tree/2.0-SNAPSHOT/chapter2" target="_blank" rel="noopener">源代码</a></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Netty基本原理介绍]]></title>
      <url>/posts/netty-base-theory-intro.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/pexels-photo-1193743.jpeg?imageslim" alt="pexels-photo-1193743"></p><p>此前，我们学习了 <a href="https://wangwei.one/tags/NIO/">Java NIO API</a> 的使用，也学习了几种常见的 <a href="https://wangwei.one/posts/26906a0d.html">IO模型</a> 以及传统阻塞I/O服务模型和 <a href="https://wangwei.one/posts/e5250930.html">Reactor线程模型</a> 。你体会到直接去使用Java NIO API去进行网络编程会非常麻烦，除了要对Java NIO API掌握的非常熟练之外，还需要掌握多线程等其他技术。不过这些问题，Netty都可以帮我们解决。</p><a id="more"></a><p><a href="http://netty.io/" target="_blank" rel="noopener">Netty</a> 是一个NIO客户端服务器框架，可以快速轻松地开发协议服务器和客户端等网络应用程序。 它极大地简化了TCP和UDP套接字服务器等网络编程的复杂度。</p><p>『快速而又简单』并不意味着最终的应用程序会受到可维护性或性能问题的影响。 Netty经过精心设计，具有丰富的协议，如FTP，SMTP，HTTP以及各种二进制和基于文本的传统协议。 因此，Netty成功地找到了一种在不妥协的情况下实现易于开发，性能，稳定性和灵活性的方法。</p><h2 id="服务端IO编程"><a href="#服务端IO编程" class="headerlink" title="服务端IO编程"></a>服务端IO编程</h2><h3 id="传统的BIO编程"><a href="#传统的BIO编程" class="headerlink" title="传统的BIO编程"></a>传统的BIO编程</h3><p>网络编程的基本模型是Client/Server模型，也就是两个进程之间进行相互通信，其中服务端提供位置信息（绑定的IP地址和监听端口），客户端通过连接操作向服务端监听的地址发起连接请求，通过三次握手建立连接，如果连接建立成功，双方就可以通过网络套接字（Socket）进行通信。</p><p>在基于传统同步阻塞模型开发中，ServerSocket负责绑定IP地址，启动监听端口；Socket负责发起连接操作。连接成功之后，双方通过输入和输出流进行同步阻塞式通信。</p><p><img src="https://img.i7years.com/blog/Server-BIO.png" alt="Server-BIO"></p><p>首先，我们通过如图所示的通信模型图来熟悉下BIO的服务端通信模型：采用BIO通信模型的服务端，通常由一个独立的Acceptor线程负责监听客户端的连接，它接收到客户端连接请求之后为每个客户端创建一个新的线程进行链路处理，处理完成之后，通过输出流返回应答给客户端，线程销毁。这就是典型的一请求一应答通信模型”</p><p>该模型最大的问题就是缺乏弹性伸缩能力，当客户端并发访问量增加后，服务端的线程个数和客户端并发访问数呈1：1的正比关系，由于线程是Java虚拟机非常宝贵的系统资源，当线程数膨胀之后，系统的性能将急剧下降，随着并发访问量的继续增大，系统会发生线程堆栈溢出、创建新线程失败等问题，并最终导致进程宕机或者僵死，不能对外提供服务。</p><h3 id="伪异步I-O编程"><a href="#伪异步I-O编程" class="headerlink" title="伪异步I/O编程"></a>伪异步I/O编程</h3><p>为了解决同步阻塞I/O面临的一个链路需要一个线程处理的问题，后来有人对它的线程模型进行了优化，后端通过一个线程池来处理多个客户端的请求接入，形成客户端个数M：线程池最大线程数N的比例关系，其中M可以远远大于N，通过线程池可以灵活的调配线程资源，设置线程的最大值，防止由于海量并发接入导致线程耗尽。</p><p>采用线程池和任务队列可以实现一种叫做伪异步的I/O通信框架，它的模型图如图1-2所示。<br>当有新的客户端接入的时候，将客户端的Socket封装成一个Task（该任务实现java.lang.Runnable接口）投递到后端的线程池中进行处理，JDK的线程池维护一个消息队列和N个活跃线程对消息队列中的任务进行处理。由于线程池可以设置消息队列的大小和最大线程数，因此，它的资源占用是可控的，无论多少个客户端并发访问，都不会导致资源的耗尽和宕机。</p><p><img src="https://img.i7years.com/blog/Server-BIO-Thread-Pool.png" alt="Server-BIO-Thread-Pool"></p><p>伪异步I/O实际上仅仅只是对之前I/O线程模型的一个简单优化，它无法从根本上解决同步I/O导致的通信线程阻塞问题。下面我们就简单分析下如果通信对方返回应答时间过长，会引起的级联故障。</p><ol><li>服务端处理缓慢，返回应答消息耗费60s，平时只需要10ms。</li><li>采用伪异步I/O的线程正在读取故障服务节点的响应，由于读取输入流是阻塞的，因此，它将会被同步阻塞60s。</li><li>假如所有的可用线程都被故障服务器阻塞，那后续所有的I/O消息都将在队列中排队。</li><li>由于线程池采用阻塞队列实现，当队列积满之后，后续入队列的操作将被阻塞。</li><li>由于前端只有一个Accptor线程接收客户端接入，它被阻塞在线程池的同步阻塞队列之后，新的客户端请求消息将被拒绝，客户端会发生大量的连接超时。</li><li>由于几乎所有的连接都超时，调用者会认为系统已经崩溃，无法接收新的请求消息。</li></ol><h3 id="NIO编程"><a href="#NIO编程" class="headerlink" title="NIO编程"></a>NIO编程</h3><p>与Socket类和ServerSocket类相对应，NIO也提供了SocketChannel和ServerSocketChannel两种不同的套接字通道实现。这两种新增的通道都支持阻塞和非阻塞两种模式。阻塞模式使用非常简单，但是性能和可靠性都不好，非阻塞模式则正好相反。开发人员一般可以根据自己的需要来选择合适的模式，一般来说，低负载、低并发的应用程序可以选择同步阻塞I/O以降低编程复杂度，但是对于高负载、高并发的网络应用，需要使用NIO的非阻塞模式进行开发。</p><blockquote><p>详见 <a href="https://wangwei.one/tags/NIO/">Java NIO API</a></p></blockquote><h3 id="AIO编程"><a href="#AIO编程" class="headerlink" title="AIO编程"></a>AIO编程</h3><p>NIO2.0引入了新的异步通道的概念，并提供了异步文件通道和异步套接字通道的实现。异步通道提供两种方式获取获取操作结果：</p><ol><li>通过java.util.concurrent.Future类来表示异步操作的结果；</li><li>在执行异步操作的时候传入一个java.nio.channels；</li><li>CompletionHandler接口的实现类作为操作完成的回调。</li></ol><p>NIO2.0的异步套接字通道是真正的异步非阻塞I/O，它对应UNIX网络编程中的事件驱动I/O（AIO），它不需要通过多路复用器（Selector）对注册的通道进行轮询操作即可实现异步读写，从而简化了NIO的编程模型。</p><blockquote><p>详见 <a href="https://wangwei.one/posts/f409841b.html">https://wangwei.one/posts/f409841b.html</a></p></blockquote><h3 id="几种IO模型对比"><a href="#几种IO模型对比" class="headerlink" title="几种IO模型对比"></a>几种IO模型对比</h3><table><thead><tr><th></th><th>BIO</th><th>伪异步IO</th><th>NIO</th><th>AIO</th></tr></thead><tbody><tr><td>客户端个数:IO线程数</td><td>1:1</td><td>M:N (M &gt; N)</td><td>M:1（1个IO线程处理多个客户端连接）</td><td>M:0（不需要启动额外的I/O线程，被动回调）</td></tr><tr><td>I/O类型（同步）</td><td>同步IO</td><td>同步IO</td><td>同步IO</td><td>异步IO</td></tr><tr><td>I/O类型 （阻塞）</td><td>阻塞IO</td><td>阻塞IO</td><td>非阻塞IO</td><td>非阻塞IO</td></tr><tr><td>调试难度</td><td>简单</td><td>简单</td><td>负责</td><td>复杂</td></tr><tr><td>可靠性</td><td>非常差</td><td>非常差</td><td>高</td><td>高</td></tr><tr><td>吞吐量</td><td>低</td><td>中</td><td>高</td><td>高</td></tr><tr><td>API使用难度</td><td>简单</td><td>简单</td><td>非常难</td><td>复杂</td></tr></tbody></table><h2 id="为什么要用Netty"><a href="#为什么要用Netty" class="headerlink" title="为什么要用Netty"></a>为什么要用Netty</h2><p><strong>为什么不建议直接使用 JDK 原生 NIO 框架去进行开发？</strong></p><ol><li>NIO的类库和API繁杂，使用麻烦，你需要熟练掌握Selector、ServerSocketChannel、SocketChannel、ByteBuffer等。</li><li>需要具备其他的额外技能做铺垫，例如熟悉Java多线程编程。这是因为NIO编程涉及到Reactor模式，你必须对多线程和网路编程非常熟悉，才能编写出高质量的NIO程序。</li><li>可靠性能力补齐，工作量和难度都非常大。例如客户端面临断连重连、网络闪断、半包读写、失败缓存、网络拥塞和异常码流的处理等问题，NIO编程的特点是功能开发相对容易，但是可靠性能力补齐的工作量和难度都非常大。</li><li>JDK NIO的BUG，例如臭名昭著的epoll bug，它会导致Selector空轮询，最终导致CPU 100%。官方声称在JDK1.6版本的update18修复了该问题，但是直到JDK1.7版本该问题仍旧存在，只不过该BUG发生概率降低了一些而已，它并没有被根本解决。该BUG以及与该BUG相关的问题单可以参见以下链接内容。<ul><li><a href="https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6403933" target="_blank" rel="noopener">https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6403933</a></li><li><a href="http://bugs.java.com/bugdatabase/view_bug.do?bug_id=2147719" target="_blank" rel="noopener">http://bugs.java.com/bugdatabase/view_bug.do?bug_id=2147719</a></li></ul></li></ol><p><strong>选择Netty的理由</strong></p><p>Netty是业界最流行的NIO框架之一，它的健壮性、功能、性能、可定制性和可扩展性在同类框架中都是首屈一指的，它已经得到成百上千的商用项目验证，例如：Dubbo、RocketMQ、Spark、Spring5、Elasticsearch等，他具有如下优点：</p><ul><li>异步事件通知框架，可开发出高性能的服务端和客户端；</li><li>封装了JDK底层BIO、NIO模型，提高简单易用的API，开发门槛低；</li><li>成熟、稳定，Netty修复了已经发现的所有JDK NIO BUG，业务开发人员不需要再为NIO的BUG而烦恼；</li><li>功能强大，预置了多种编解码功能，解决了拆包粘包问题，支持多种主流协议；</li><li>定制能力强，可以通过ChannelHandler对通信框架进行灵活地扩展；</li><li>性能高，通过与其他业界主流的NIO框架对比，Netty的综合性能最优；</li><li>社区活跃，版本迭代周期短，发现的BUG可以被及时修复，同时，更多的新功能会加入；</li><li>经历了大规模的商业应用考验，质量得到验证。在互联网、大数据、网络游戏、企业应用、电信软件等众多行业得到成功商用，证明了它已经完全能够满足不同行业的商业应用了。</li></ul><h2 id="Netty架构"><a href="#Netty架构" class="headerlink" title="Netty架构"></a>Netty架构</h2><p><strong>功能架构图</strong></p><p><img src="https://img.i7years.com/blog/Netty%20Functional%20Architecture.png" alt="Netty Functional Architecture"></p><p><strong>逻辑架构图</strong></p><p><img src="https://img.i7years.com/blog/Netty%20Logical%20Architecture.png" alt="Netty Logical architecture"></p><ul><li><strong>Reactor 通信调度层</strong>：它由一系列辅助类完成，包括Reactor线程NioEventLoop及其父类，NioSocketChannel / NioServerSocketChannel 及其父类，ByteBuffer以及由其衍生出来的各种Buffer，Unsafe 以及其衍生出的各种内部类等。该层的主要职责就是监听网络的读写和连接操作，负责将网络层的数据读取到内存缓冲区中，然后触发各种网络事件，例如连接创建、连接激活、读事件、写事件等，将这些事件触发到 PipeLine 中，由 PipeLine 管理的职责链来进行后续的处理。</li><li><strong>职责链 ChannelPipeline</strong>：它负责事件在职责链中的有序传播，同时负责动态地编排职责链。职责链可以选择监听和处理自己关心的事件，它可以拦截处理和向后 / 向前传播事件。不同应用的 Handler 节点的功能也不同，通常情况下，往往会开发编解码 Hanlder 用于消息的编解码，它可以将外部的协议消息转换成内部的 POJO对象，这样上层业务则只需要关心处理业务逻辑即可，不需要感知底层的协议差异和线程模型差异，实现了架构层面的分层隔离。</li><li><strong>业务逻辑编排层（Service ChannelHandler）</strong>：业务逻辑编排层通常有两类：一类是纯粹的业务逻辑编排，还有一类是其他的应用层协议插件，用于特定协议相关的会话和链路管理。</li></ul><h2 id="Netty-Reactor模型"><a href="#Netty-Reactor模型" class="headerlink" title="Netty Reactor模型"></a>Netty Reactor模型</h2><p>前面，我们介绍了三种常见的 <a href="https://wangwei.one/posts/e5250930.html">Reactor线程模型</a> ，Netty是典型的Reactor模型结构，下图是Netty常见的主从Reactor模型示例图。</p><p><img src="https://img.i7years.com/netty/Netty%20Reactor%20Model.png" alt="Netty Reactor Model"></p><p>在创建ServerBootstrap类实例前，先创建两个EventLoopGroup，一个bossGroup，一个workerGroup。它们实际上是两个独立的Reactor线程池，bossGroup负责接收客户端的连接，workerGroup负责处理IO相关的读写操作，或者执行系统task、定时task等。</p><p>用于接收客户端请求的线程池职责如下：</p><ol><li>接收客户端TCP连接，初始化Channel参数；</li><li>将链路状态变更事件通知给ChannelPipeline；</li></ol><p>处理IO操作的线程池职责如下：</p><ol><li>异步读取远端数据，发送读事件到ChannelPipeline；</li><li>异步发送数据到远端，调用ChannelPipeline的发送消息接口；</li><li>执行系统调用Task；</li><li>执行定时任务Task，如空闲链路检测和发送心跳消息等。</li></ol><p>通过调整两个EventLoopGroup的线程数、是否共享线程池等方式，Netty的Reactor线程模型可以在单线程、多线程和主从多线程间切换，用户可以根据实际情况灵活配置。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://github.com/wangweiX/myBooks/blob/master/computer/netty/Netty%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97.pdf" target="_blank" rel="noopener">《Netty权威指南》</a></li><li><a href="https://github.com/wangweiX/myBooks/blob/master/computer/netty/Netty-In-Depth.epub" target="_blank" rel="noopener">《Netty-In-Depth》</a></li><li><a href="https://github.com/wangweiX/myBooks/blob/master/computer/netty/Netty%20in%20Action.epub" target="_blank" rel="noopener">《Netty in action》</a></li><li><a href="https://github.com/wangweiX/myBooks/blob/master/computer/netty/Netty5.0%20architecture%20analysis%20and%20source%20code%20interpretation.pdf" target="_blank" rel="noopener">《Netty5.0 architecture analysis and source code interpretation》</a></li><li><a href="http://www.importnew.com/15656.html" target="_blank" rel="noopener">http://www.importnew.com/15656.html</a></li><li><a href="http://netty.io/wiki/user-guide-for-4.x.html" target="_blank" rel="noopener">http://netty.io/wiki/user-guide-for-4.x.html</a></li><li><a href="http://www.infoq.com/cn/articles/netty-threading-model" target="_blank" rel="noopener">http://www.infoq.com/cn/articles/netty-threading-model</a></li><li><a href="https://juejin.im/post/5bda4cc55188257f630dac07" target="_blank" rel="noopener">https://juejin.im/post/5bda4cc55188257f630dac07</a></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[好用的工具清单]]></title>
      <url>/posts/good-tool-list.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p align="center"><br><a target="_blank" href="https://wangwei.one/posts/good-tool-list.html"><img src="https://img.i7years.com/blog/garage-hanging-mechanic-162553.jpg?imageslim"></a><br></p><p>发现好东西，遇见好……分享自己日常工作与生活中经常使用的工具、app以及网站。</p><a id="more"></a><h2 id="实体物件"><a href="#实体物件" class="headerlink" title="实体物件"></a>实体物件</h2><table><thead><tr><th>一级</th><th>二级</th><th>类目</th></tr></thead><tbody><tr><td>电子产品</td><td>苹果</td><td>MacBook Pro<br>iPhone<br>iPad Pro<br>Apple Watch<br>iMac Pro<br></td></tr><tr><td></td><td>阅读</td><td>Kindle Oasis</td></tr></tbody></table><h2 id="应用程序"><a href="#应用程序" class="headerlink" title="应用程序"></a>应用程序</h2><table><thead><tr><th>一级</th><th>二级</th><th>类目</th></tr></thead><tbody><tr><td>制图</td><td>流程图/UML/原型</td><td><a href="https://www.omnigroup.com/omnigraffle" target="_blank" rel="noopener">OmniGraffle</a><br><a href="http://staruml.io/" target="_blank" rel="noopener">StarUML</a><br><a href="https://www.axure.com/" target="_blank" rel="noopener">Axure RP 8</a></td></tr><tr><td>图片处理</td><td>截图拼接</td><td><a href="https://itunes.apple.com/us/app/tailor-screenshot-stitching/id926653095?mt=8" target="_blank" rel="noopener">Tailor</a></td></tr><tr><td>个人管理</td><td>时间管理</td><td><a href="http://www.atimelogger.com/" target="_blank" rel="noopener">aTimelogger2</a></td></tr><tr><td></td><td>任务管理</td><td><a href="https://www.omnigroup.com/omniFocus" target="_blank" rel="noopener">OmniFocus</a><br><a href="https://culturedcode.com/things/" target="_blank" rel="noopener">Things</a></td></tr><tr><td></td><td>精力管理</td><td>冥想：<a href="https://insighttimer.com/" target="_blank" rel="noopener">Insight Timer</a><br>专注：<a href="https://www.forestapp.cc/en/" target="_blank" rel="noopener">Forest</a><br>睡眠：<a href="https://sleeptown.seekrtech.com/" target="_blank" rel="noopener">SleepTown</a></td></tr><tr><td></td><td>运动健身</td><td><a href="https://www.gotokeep.com/" target="_blank" rel="noopener">Keep</a></td></tr><tr><td>团队协作</td><td>项目管理</td><td><a href="https://www.omnigroup.com/omniPlan" target="_blank" rel="noopener">OmniPlan</a></td></tr><tr><td></td><td>文档协作</td><td><a href="https://www.teambition.com/en" target="_blank" rel="noopener">Teambition</a><br><a href="https://tower.im/" target="_blank" rel="noopener">Tower</a><br><a href="https://shimo.im/" target="_blank" rel="noopener">石墨文档</a></td></tr><tr><td>记录</td><td>写作</td><td><a href="https://typora.io/" target="_blank" rel="noopener">Typora</a><br><a href="https://www.omnigroup.com/omnioutliner" target="_blank" rel="noopener">OmniOutliner</a><br><a href="https://evernote.com/intl/en/" target="_blank" rel="noopener">evernote</a><br><a href="http://www.bear-writer.com/" target="_blank" rel="noopener">Bear</a><br><a href="https://mindnode.com/" target="_blank" rel="noopener">MindNode</a><br><a href="https://itunes.apple.com/cn/app/%E8%AE%AF%E9%A3%9E%E8%AF%AD%E8%AE%B0-%E8%AF%AD%E9%9F%B3%E5%8F%98%E6%96%87%E5%AD%97%E8%BE%93%E5%85%A5%E7%9A%84%E4%BA%91%E7%AC%94%E8%AE%B0/id931409652?mt=8" target="_blank" rel="noopener">讯飞语录</a></td></tr><tr><td>阅读</td><td>电子书籍管理</td><td>iBooks<br><a href="https://calibre-ebook.com/" target="_blank" rel="noopener">calibre</a></td></tr><tr><td>安全</td><td>账号密码安全</td><td><a href="https://authy.com/" target="_blank" rel="noopener">authy</a><br><a href="https://1password.com/" target="_blank" rel="noopener">1Password</a></td></tr><tr><td></td><td>网络防火墙</td><td><a href="https://www.obdev.at/products/littlesnitch/index.html" target="_blank" rel="noopener">Little Snitch</a></td></tr><tr><td>效率</td><td>自动化工具</td><td><a href="https://ifttt.com/" target="_blank" rel="noopener">IFTT</a><br><a href="https://itunes.apple.com/app/workflow-powerful-automation/id915249334" target="_blank" rel="noopener">Shortcuts</a></td></tr><tr><td>学习</td><td>教育学习</td><td><a href="https://www.igetget.com/" target="_blank" rel="noopener">得到App</a><br><a href="http://www.hundun.cn/" target="_blank" rel="noopener">混沌大学</a><br><a href="https://time.geekbang.org/" target="_blank" rel="noopener">极客时间</a></td></tr><tr><td></td><td>学习社区</td><td><a href="https://www.xiaomiquan.com/" target="_blank" rel="noopener">知识星球</a><br><a href="https://www.bcathub.com/" target="_blank" rel="noopener">大猫城堡</a></td></tr><tr><td></td><td>英语词典</td><td><a href="https://itunes.apple.com/ca/app/ldoce-inapp-longman-dictionary-of-english-5th/id600007708?mt=8" target="_blank" rel="noopener">LDOCE</a><br><a href="https://www.eudic.net/v4/en/app/eudic" target="_blank" rel="noopener">Eudic</a></td></tr><tr><td></td><td></td><td></td></tr><tr><td>科学上网</td><td>即时通讯</td><td><a href="https://telegram.org/" target="_blank" rel="noopener">Telegram</a></td></tr><tr><td></td><td>VPN</td><td><a href="https://wangwei.one/posts/build-your-own-vpn-by-shadowsocks-or-rixcloud.html">推荐VPN</a></td></tr><tr><td></td><td></td><td></td></tr><tr><td>游戏</td><td></td><td><a href="http://www.fireproofgames.com/games/the-room" target="_blank" rel="noopener">TheRoom</a></td></tr><tr><td></td><td></td><td></td></tr><tr><td>钱包</td><td>区块链资产钱包</td><td><a href="https://token.im/" target="_blank" rel="noopener">imToken</a></td></tr><tr><td></td><td></td><td></td></tr><tr><td>mac维护</td><td>磁盘文件扫描</td><td><a href="https://daisydiskapp.com/index.html" target="_blank" rel="noopener">DaisyDisk</a></td></tr><tr><td></td><td>电脑清理</td><td><a href="https://cleanmymac.com/" target="_blank" rel="noopener">CleanMac3</a></td></tr><tr><td></td><td>恶意文件/病毒扫描</td><td><a href="https://www.totalav.com/" target="_blank" rel="noopener">Antivirus</a></td></tr><tr><td></td><td></td><td></td></tr><tr><td>mac文件管理</td><td></td><td><a href="https://totalfinder.binaryage.com/" target="_blank" rel="noopener">Totalfinder</a></td></tr><tr><td></td><td></td><td></td></tr><tr><td>虚拟机</td><td></td><td><a href="https://www.parallels.com/" target="_blank" rel="noopener">Parallels Desktop</a></td></tr></tbody></table><blockquote><p>优秀APP：</p><ul><li><a href="https://github.com/hzlzh/Best-App" target="_blank" rel="noopener">https://github.com/hzlzh/Best-App</a></li><li><a href="https://github.com/Louiszhai/tool" target="_blank" rel="noopener">https://github.com/Louiszhai/tool</a></li></ul></blockquote><h2 id="Chrome插件"><a href="#Chrome插件" class="headerlink" title="Chrome插件"></a>Chrome插件</h2><table><thead><tr><th>Extensions</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://chrome.google.com/webstore/detail/google-translate/aapbdbdomjkkjkaonfhkkikfgjllcleb" target="_blank" rel="noopener">Google Translate</a></td><td>Goole语言翻译</td></tr><tr><td><a href="https://chrome.google.com/webstore/detail/evernote-web-clipper/pioclpoplcdbaefihamjohnefbikjilc" target="_blank" rel="noopener">Evernote Web Clipper</a></td><td>网页内容抓取，保存至Evernote</td></tr><tr><td><a href="https://chrome.google.com/webstore/detail/%E6%8E%98%E9%87%91/lecdifefmmfjnjjinhaennhdlmcaeeeb" target="_blank" rel="noopener">掘金</a></td><td>掘金技术社区</td></tr><tr><td><a href="https://chrome.google.com/webstore/detail/clickclean/ghgabhipcejejjmhhchfonmamedcbeod" target="_blank" rel="noopener">Click&amp;Clean</a></td><td>清除浏览器缓存、隐私数据、历史记录，安全关闭浏览器</td></tr><tr><td><a href="https://duckduckgo.com/" target="_blank" rel="noopener">Duckduckgo</a></td><td>安全搜索引擎</td></tr><tr><td><a href="https://chrome.google.com/webstore/detail/adguard-adblocker/bgnkhhnnamicmpeenaelnjfhikgbkllg" target="_blank" rel="noopener">AdGuard AdBlocker</a></td><td>屏蔽站点广告</td></tr><tr><td><a href="https://chrome.google.com/webstore/detail/1password-extension-deskt/aomjjhallfgjeglblehebfpbcfeobpgk" target="_blank" rel="noopener">1Password</a></td><td>账号密码管理</td></tr><tr><td><a href="https://www.getpostman.com/apps" target="_blank" rel="noopener">Postman</a></td><td>API模拟请求</td></tr><tr><td><a href="https://chrome.google.com/webstore/detail/json-formatter/bcjindcccaagfpapjjmafapmmgkkhgoa" target="_blank" rel="noopener">JSON Formatter</a></td><td>json字符串格式化</td></tr><tr><td><a href="https://convertio.co" target="_blank" rel="noopener">convertio</a></td><td>图片、视频、音频、电子书等等类型文件转换</td></tr><tr><td><a href="https://chrome.google.com/webstore/detail/the-qr-code-extension/oijdcdmnjjgnnhgljmhkjlablaejfeeb/related?h1=en" target="_blank" rel="noopener">QR Code</a></td><td>二维码生成</td></tr><tr><td><a href="https://github.com/ovity/octotree" target="_blank" rel="noopener">octotree</a></td><td>GitHub代码树形阅读插件</td></tr></tbody></table><blockquote><p>Chrome插件英雄榜：<a href="https://github.com/zhaoolee/ChromeAppHeroes" target="_blank" rel="noopener">https://github.com/zhaoolee/ChromeAppHeroes</a></p></blockquote><h2 id="程序员工具"><a href="#程序员工具" class="headerlink" title="程序员工具"></a>程序员工具</h2><ul><li><a href="https://wangwei.one/posts/dev-env-config-list-guide.html">https://wangwei.one/posts/dev-env-config-list-guide.html</a></li></ul>]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tool </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java8新特性介绍]]></title>
      <url>/posts/java-8-new-feature-base-intro.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>Java 8 于 2014年3月份发布，新版本增添很多不错的特性，本篇文章我们一起纵览一下这些新特性，后面的文章我们将会一一详细讨论。</p><a id="more"></a><h2 id="Java8介绍"><a href="#Java8介绍" class="headerlink" title="Java8介绍"></a>Java8介绍</h2><p>促使Java做出重大改变的动力主要来源于：</p><ul><li>代码可读性</li><li>多核运行</li></ul><h3 id="代码可读性"><a href="#代码可读性" class="headerlink" title="代码可读性"></a>代码可读性</h3><p>Java代码非常的啰嗦冗长，导致了代码可读性的下降，换句话说，需要很多额外的代码来解释一段很小的内容。例如，现在有个需求，要按照发票金额的数量倒序排序发票列表。在Java 8之前，你可能需要这么处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Collections.sort(invoices, <span class="keyword">new</span> Comparator&lt;Invoice&gt;() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Invoice inv1, Invoice inv2)</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> Double.compare(inv2.getAmount(), inv1.getAmount());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>而在Java8中，你只需要这样即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">invoices.sort(comparingDouble(Invoice::getAmount).reversed());</span><br></pre></td></tr></table></figure><blockquote><p>后面的章节会做详细介绍</p></blockquote><p>此外，Java 8引入了一种名为Streams API的新API，可以让你编写可读性良好的代码来处理数据。Streams API支持多种内置操作，以更简单的方式来处理数据。在业务运营环境中，你可能希望生成一个结束日期报表，以过滤和汇总来自各个部门的发票。 好消息是，使用Streams API，您无需担心如何实现查询本身。<br>这种方法与您习惯使用SQL的方法类似。 事实上，在SQL中，您可以指定查询而不用担心其内部实现。 例如，假设您想要查找金额大于1,000的发票的所有ID：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> invoices <span class="keyword">WHERE</span> amount &gt; <span class="number">1000</span></span><br></pre></td></tr></table></figure><p>这种编写查询所做的风格通常被称为<strong>声明式编程</strong>。 以下是如何使用Streams API并行地解决这个问题的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; ids = invoices.stream()</span><br><span class="line">                .filter(inv -&gt; inv.getAmount() &gt; <span class="number">1000</span>)</span><br><span class="line">                .map(Invoice::getId)</span><br><span class="line">                .collect(Collectors.toList());</span><br></pre></td></tr></table></figure><blockquote><p>后面的章节会做详细介绍</p></blockquote><h3 id="多核"><a href="#多核" class="headerlink" title="多核"></a>多核</h3><p>Java 8的第二个重大变化是多核处理器时代所必须的。在过去，你的电脑只有一个处理单元。想要更快地运行应用程序通常意味着提高处理单元的性能。 不幸的是，处理单元的时钟速度不会再更快了。 今天，绝大多数计算机和移动设备都有多个处理单元（称为核）来以并行的方式进行工作。</p><p>应用程序应该利用不同的处理单元来提高性能。 Java应用程序通常通过线程来实现这一点。 不幸的是，与线程一起工作往往是困难且容易出错的，并且通常专供专家使用。</p><p>Java 8中的Streams API 能够让你非常方便地以并行方式来处理数据。例如，将前面的代码改为并行运行，只需要使用 <em>parallelStream()</em> 接口即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; ids = invoices.parallelStream()</span><br><span class="line">                .filter(inv -&gt; inv.getAmount() &gt; <span class="number">1000</span>)</span><br><span class="line">                .map(Invoice::getId)</span><br><span class="line">                .collect(Collectors.toList());</span><br></pre></td></tr></table></figure><blockquote><p>后面的章节会做详细介绍</p></blockquote><h2 id="新特性纵览"><a href="#新特性纵览" class="headerlink" title="新特性纵览"></a>新特性纵览</h2><h3 id="Lambda表达式-Lambda-Expressions"><a href="#Lambda表达式-Lambda-Expressions" class="headerlink" title="Lambda表达式(Lambda Expressions)"></a>Lambda表达式(Lambda Expressions)</h3><p>Lambda表达式可以让您以简洁的方式传递一段代码。 例如，假设你需要获得一个线程来执行任务。 你可以通过创建一个Runnable对象来实现，然后将其作为参数传递给Thread：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello world"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">new</span> Thread(runnable).start();</span><br></pre></td></tr></table></figure><p>使用lambda表达式，你可以用可读性更强的方式重构前面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread(() -&gt; System.out.println(<span class="string">"Hello world"</span>)).start();</span><br></pre></td></tr></table></figure><h3 id="方法引用-Method-references"><a href="#方法引用-Method-references" class="headerlink" title="方法引用(Method references)"></a>方法引用(Method references)</h3><p>方法引用构成了一个与Lambda表达式密切相关的新特性。他们可以让你选择一个在类中定义的方法并且传递它。 例如，假设您需要通过忽略大小写来比较字符串列表。 目前，您会编写如下所示的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; strs = Arrays.asList(<span class="string">"C"</span>, <span class="string">"a"</span>, <span class="string">"A"</span>, <span class="string">"b"</span>);</span><br><span class="line">Collections.sort(strs, <span class="keyword">new</span> Comparator&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s1.compareToIgnoreCase(s2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用方法引用，代码简洁如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Collections.sort(strs, String::compareToIgnoreCase);</span><br></pre></td></tr></table></figure><p><code>String::compareToIgnoreCase</code> 就是方法引用，它使用一种特殊的语法 <code>::</code> .</p><h3 id="流-Streams"><a href="#流-Streams" class="headerlink" title="流(Streams)"></a>流(Streams)</h3><p>几乎每一个Java应用程序都会去创建和处理数据集合。它们是诸多应用程序的基础，因为它们可以让你对数据进行分组，并且处理数据。然而，使用Java集合去编写程序，代码可能会非常冗长，并且难以并行化运行。下面的例子，充分说明了使用集合，导致冗余的可能性。</p><p>找出与培训相关的发票的ID，并且按照发票的金额进行排序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Invoice&gt; trainingInvoices = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(Invoice inv: invoices) &#123;</span><br><span class="line">  <span class="keyword">if</span>(inv.getTitle().contains(<span class="string">"Training"</span>)) &#123;</span><br><span class="line">    trainingInvoices.add(inv);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Collections.sort(trainingInvoices, <span class="keyword">new</span> Comparator() &#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Invoice inv1, Invoice inv2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> inv2.getAmount().compareTo(inv1.getAmount());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">List&lt;Integer&gt; invoiceIds = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(Invoice inv: trainingInvoices) &#123;</span><br><span class="line">  invoiceIds.add(inv.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用Java 8中的Stream API就可将上述代码简化为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; invoiceIds = invoices.stream()</span><br><span class="line">                       .filter(inv -&gt; inv.getTitle().contains(<span class="string">"Training"</span>))</span><br><span class="line">                       .sorted(comparingDouble(Invoice::getAmount).reversed())</span><br><span class="line">                       .map(Invoice::getId)</span><br><span class="line">                       .collect(Collectors.toList());</span><br></pre></td></tr></table></figure><h3 id="接口增强-Enhanced-Interfaces"><a href="#接口增强-Enhanced-Interfaces" class="headerlink" title="接口增强(Enhanced Interfaces)"></a>接口增强(Enhanced Interfaces)</h3><p>Java 8中的接口现在可以通过两个改进来声明带有实现代码的方法。</p><h3 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h3><p>首先，Java 8引入了默认方法，它允许您在接口中声明具有实现代码的方法。它们是作为一种以向后兼容的方式发展Java API的机制而引入的。例如，您将看到在Java 8中，List接口现在支持一种排序方法，其定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> E&gt; c)</span> </span>&#123;</span><br><span class="line">     Object[] a = <span class="keyword">this</span>.toArray();</span><br><span class="line">     Arrays.sort(a, (Comparator) c);</span><br><span class="line">     ListIterator&lt;E&gt; i = <span class="keyword">this</span>.listIterator();</span><br><span class="line">     <span class="keyword">for</span> (Object e : a) &#123;</span><br><span class="line">          i.next();</span><br><span class="line">          i.set((E) e);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认方法也可以作为行为的多重继承机制。 事实上，在Java 8之前，一个类可能已经实现了多个接口。 现在，您可以从多个不同的接口继承默认方法。 请注意，Java 8具有明确的规则来防止C ++中常见的继承问题（例如diamond problem）。</p><h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><p>其次，接口现在也可以有静态方法。 定义用于处理接口实例的静态方法的接口和伴随类是一种常见模式。 例如，Java具有Collection接口和Collections类，它定义了实用程序的静态方法。 这种实用静态方法现在可以存在于接口中。 例如，Java 8中的Stream接口声明了一个像这样的静态方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; Stream&lt;T&gt; <span class="title">of</span><span class="params">(T... values)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> Arrays.stream(values);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CompletableFuture"><a href="#CompletableFuture" class="headerlink" title="CompletableFuture"></a>CompletableFuture</h3><p>Java 8 通过一个新的Class类 <em>CompletableFuture</em> 来考虑一种新的异步编程方式。 这是对旧有的Future类的改进，其操作灵感来源于新Streams API中的类似设计选择（即声明式风格和流畅链接方法的能力）。 换句话说，您可以声明式地处理和编写多个异步任务。<br>以下是一个同时查询两个阻塞任务的示例：价格查找服务以及汇率计算器。 一旦两项服务的结果可用，您可以将其结果合并计算并以英镑打印价格：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">findBestPrice(<span class="string">"iPhone6"</span>)</span><br><span class="line">    .thenCombine(lookupExchangeRate(Currency.GBP), <span class="keyword">this</span>::exchange)</span><br><span class="line">    .thenAccept(localAmount -&gt; System.out.printf(<span class="string">"It will cost you %f GBP\n"</span>, localAmount));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> CompletableFuture&lt;Price&gt; <span class="title">findBestPrice</span><span class="params">(String productName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> CompletableFuture.supplyAsync(() -&gt; priceFinder.findBestPrice(productName));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> CompletableFuture&lt;Double&gt; <span class="title">lookupExchangeRate</span><span class="params">(Currency localCurrency)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> CompletableFuture.supplyAsync(() -&gt; exchangeService.lookupExchangeRate(Currency.USD, localCurrency));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h3><p>Java 8引入了一个名为Optional的新类。 受到函数式编程语言的启发，当值可能存在或缺失时，允许在代码库中更好地建模。 把它看作一个单值容器，因为它包含一个值或是空的。 Optional已经在替代集合框架（如Guava）中可用，但现在可作为Java API的一部分。 Optional的另一个好处是它可以保护你免受NullPointerExceptions的侵害。 事实上，Optional定义了一些方法来强制你明确地检查一个值是否存在。 以下面的代码为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getEventWithId(<span class="number">10</span>).getLocation().getCity();</span><br></pre></td></tr></table></figure><p>getEventWithId(10)返回null，或者getLocation()返回null，都会导致程序抛出异常：NullPointerException。为了避免异常发生，需要做以下判断：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCityForEvent</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    Event event = getEventWithId(id);</span><br><span class="line">    <span class="keyword">if</span>(event != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Location location = event.getLocation();</span><br><span class="line">        <span class="keyword">if</span>(location != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> location.getCity();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"TBC"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这段代码中，一个 <code>Event</code> 可能有一个关联的 <code>Location</code>。 然而，一个 <code>Location</code> 总是有一个相关的 <code>City</code>。 不幸的是，我们常常忘记检查null。 另外，代码也会变得更加冗长。 使用Optional，您可以重构代码，使其变得更加简单明了，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCityForEvent</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    Optional.ofNullable(getEventWithId(id))</span><br><span class="line">            .flatMap(<span class="keyword">this</span>::getLocation)</span><br><span class="line">            .map(<span class="keyword">this</span>::getCity)</span><br><span class="line">            .orElse(<span class="string">"TBC"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="新Date和Time-API"><a href="#新Date和Time-API" class="headerlink" title="新Date和Time API"></a>新Date和Time API</h3><p>java 8引入了一个全新的<code>Date</code>和<code>Time</code>的API，修复了旧<code>Date</code>和<code>Calendar</code> 中存在的许多问题。新的Date和Time API主要根据以下两个原则进行设计：</p><p><strong>领域驱动设计</strong></p><p>新的Date和Time API通过引入新的class对象来精确模式各种日期和时间的概念。例如，您可以使用Period类来表示类似“2个月和3天”的值，并使用ZonedDateTime来表示具有时区的日期时间。每个类都提供了基于流畅式编码风格的特定领域的方法。 因此，您可以使用方法链来编写更多可读性强的代码。 例如，以下代码显示如何创建一个新的LocalDateTime对象并添加2小时30分钟：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LocatedDateTime coffeeBreak = LocalDateTime.now()</span><br><span class="line">                                           .plusHours(<span class="number">2</span>)</span><br><span class="line">                                           .plusMinutes(<span class="number">30</span>);</span><br></pre></td></tr></table></figure><p><strong>不可变性</strong></p><p>Date和Calender类的另一个问题就是它们是线程不安全的。另外，使用日期作为其API的开发人员可能会意外地更新时间值。为了预防这种潜在Bug的产生，在新的Date和Time API中，所有的类都是不可变的。换句话说，在新的Date和Time API中，你无法修改对象的状态，相反，你需要调用新的方法来更新值，并且会返回一个新的对象。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ZoneId london = ZoneId.of(<span class="string">"Europe/London"</span>);</span><br><span class="line">LocalDate july4 = LocalDate.of(<span class="number">2014</span>, Month.JULY, <span class="number">4</span>);</span><br><span class="line">LocalTime early = LocalTime.parse(<span class="string">"08:45"</span>);</span><br><span class="line">ZonedDateTime flightDeparture = ZonedDateTime.of(july4, early, london);</span><br><span class="line">System.out.println(flightDeparture);</span><br><span class="line"></span><br><span class="line">LocalTime from = LocalTime.from(flightDeparture);</span><br><span class="line">System.out.println(from);</span><br><span class="line"></span><br><span class="line">ZonedDateTime touchDown = ZonedDateTime.of(july4,</span><br><span class="line">           LocalTime.of(<span class="number">11</span>, <span class="number">35</span>),</span><br><span class="line">           ZoneId.of(<span class="string">"Europe/Stockholm"</span>));</span><br><span class="line">Duration flightLength = Duration.between(flightDeparture, touchDown);</span><br><span class="line">System.out.println(flightLength);</span><br><span class="line"></span><br><span class="line"><span class="comment">// How long have I been in continental Europe?</span></span><br><span class="line">ZonedDateTime now = ZonedDateTime.now();</span><br><span class="line">Duration timeHere = Duration.between(touchDown, now);</span><br><span class="line">System.out.println(timeHere);</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2014-07-04T08:45+01:00[Europe/London]</span><br><span class="line">08:45</span><br><span class="line">PT1H50M</span><br><span class="line">PT33879H12M25.546S</span><br></pre></td></tr></table></figure><h5 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h5><ul><li><a href="https://www.oreilly.com/programming/free/introducing-java-8.csp" target="_blank" rel="noopener">https://www.oreilly.com/programming/free/introducing-java-8.csp</a></li><li><a href="https://javabrains.thinkific.com/courses/take/java-8-lambda-basics/multimedia/2817266-introduction" target="_blank" rel="noopener">https://javabrains.thinkific.com/courses/take/java-8-lambda-basics/multimedia/2817266-introduction</a></li><li><a href="http://ifeve.com/java-8-features-tutorial" target="_blank" rel="noopener">http://ifeve.com/java-8-features-tutorial</a></li><li><a href="http://www.importnew.com/19345.html" target="_blank" rel="noopener">http://www.importnew.com/19345.html</a></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java8 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Concurrent Mark Sweep(CMS)]]></title>
      <url>/posts/jvm-gc-concurrent-mark-sweep-cms.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/pexels-photo-1193879.jpeg?imageslim" alt="pexels-photo-1193879"></p><p><a href="https://wangwei.one/posts/4cec9f4f.html">前面</a> 我们介绍了 Serial GC 与 Parallel GC 的使用与配置，今天我们来介绍CMS GC的使用与配置。</p><a id="more"></a><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>年轻代采用并行STW方式的 <a href="https://wangwei.one/posts/396cfa32.html">mark-copy(标记-复制)</a> 算法，对老年代主要使用 <a href="https://wangwei.one/posts/396cfa32.html">mark-sweep(标记-清理)</a> 算法。</p><p>CMS收集器的主要目的：减少老年代垃圾收集的停顿时间。主要通过两种手段来达成此目的：</p><ul><li>不对老年代进行整理，而是使用空闲列表(free-list)来管理内存空间的回收。</li><li>在mark-sweep阶段采用并发方式与用户线程一起执行。</li></ul><h2 id="运作过程"><a href="#运作过程" class="headerlink" title="运作过程"></a>运作过程</h2><p><img src="https://img.i7years.com/blog/CMS.png" alt="CMS"></p><p>CMS的主要分为5个阶段：初始标记（CMS initial mark）、并发标记（CMS concurrent mark）、重新标记（CMS remark）、并发清除（CMS concurrent sweep）、重置。</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li><strong>对CPU资源非常敏感</strong>。CMS默认启动的回收线程数是(CPU数量+3)/4。CMS在并发阶段会占用部分CPU，导致用户应用程序执行速度变慢，影响用户体验。</li><li><p><strong>无法处理浮动垃圾（Floating Garbage）</strong>。由于CMS并发清理阶段用户线程还在运行着，伴随程序运行自然就还会有新的垃圾不断产生，这一部分垃圾出现在标记过程之后，CMS无法在当次收集中处理掉它们，只好留待下一次GC时再清理掉。要是CMS运行期间预留的内存无法满足程序需要，就会出现一次“Concurrent Mode Failure”失败，这时虚拟机将启动后备预案：临时启用Serial Old收集器来重新进行老年代的垃圾收集，这样停顿时间就很长了。所以说参数<code>-XX:CMSInitiatingOccupancyFraction</code> 设置得太高很容易导致大量“Concurrent Mode Failure”失败，性能反而降低。</p></li><li><p><strong>会产生大量的内存碎片空间</strong>。可以通过 <code>-XX:UseCMSCompactAtFullCollection</code> 与<code>-XX:CMSFullGCsBeforeCompaction</code> 这个两个参数来解决问题。</p></li></ul><h2 id="控制参数"><a href="#控制参数" class="headerlink" title="控制参数"></a>控制参数</h2><ul><li><p><code>-XX:+UseConcMarkSweepGC</code>：新生代使用并行收集器，老年代使用 CMS+串行收集器。</p></li><li><p><code>-XX:+ParallelCMSThreads</code>：设定 CMS 的线程数量。</p></li><li><p><code>-XX:+CMSInitiatingOccupancyFraction</code>：设置 CMS 收集器在老年代空间被使用多少后触发，默认为 68%。</p></li><li><p><code>-XX:+UseFullGCsBeforeCompaction</code>：设定进行多少次 CMS 垃圾回收后，进行一次内存压缩。</p></li><li><p><code>-XX:+CMSParallelRemarkEndable</code>： 启用并行重标记。</p></li><li><p><code>-XX:+CMSClassUnloadingEnabled</code>：允许对类元数据进行回收。</p></li><li><p><code>-XX:CMSInitatingPermOccupancyFraction</code>：当永久区占用率达到这一百分比后，启动 CMS 回收 。</p><blockquote><p>前提条件： <code>-XX:+CMSClassUnloadingEnabled</code></p></blockquote></li><li><p><code>-XX:UseCMSInitatingOccupancyOnly</code>：表示只在到达阈值的时候，才进行 CMS 回收。</p></li><li><p><code>-XX:+CMSIncrementalMode</code>：使用增量模式，比较适合单 CPU。</p></li><li><p><code>-XX:+UseCMSCompactAtFullCollection</code>：（默认就是开启的），用于在CMS收集器顶不住要进行FullGC时开启内存碎片的合并整理过程，内存整理的过程是无法并发的，空间碎片问题没有了，但停顿时间不得不变长。</p></li></ul><h2 id="GC日志分析"><a href="#GC日志分析" class="headerlink" title="GC日志分析"></a>GC日志分析</h2><h5 id="VM-参数"><a href="#VM-参数" class="headerlink" title="VM 参数"></a>VM 参数</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-server</span><br><span class="line">-XX:+PrintGCDetails</span><br><span class="line">-XX:+PrintGCTimeStamps</span><br><span class="line">-XX:+PrintGCDateStamps</span><br><span class="line">-XX:+UseConcMarkSweepGC</span><br></pre></td></tr></table></figure><h5 id="Minor-GC"><a href="#Minor-GC" class="headerlink" title="Minor GC"></a>Minor GC</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">18</span>T11:<span class="number">20</span>:<span class="number">33.960</span>-<span class="number">0800</span>: <span class="number">4.118</span>: [GC2016-<span class="number">06</span>-<span class="number">18</span>T11:<span class="number">20</span>:<span class="number">33.961</span>-<span class="number">0800</span>: <span class="number">4.119</span>: [ParNew: <span class="number">52480</span>K-&gt;<span class="number">6528</span>K(<span class="number">59008</span>K), <span class="number">0.0115760</span> secs] <span class="number">52480</span>K-&gt;<span class="number">6679</span>K(<span class="number">255616</span>K), <span class="number">0.0120110</span> secs] [Times: user=<span class="number">0.03</span> sys=<span class="number">0.00</span>, real=<span class="number">0.01</span> secs]</span><br></pre></td></tr></table></figure><blockquote><p>日志分析和 <a href="https://wangwei.one/posts/4cec9f4f.html">前面</a> 差不多，这里不细说</p></blockquote><h5 id="Full-GC"><a href="#Full-GC" class="headerlink" title="Full GC"></a>Full GC</h5><p>此前我们介绍的GC日志格式都差不多，而CMS Full GC的格式则完全不同，如下是CMS对老年代进行垃圾收集各阶段的日志输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">18</span>T11:<span class="number">20</span>:<span class="number">41.197</span>-<span class="number">0800</span>: <span class="number">11.355</span>: [GC [<span class="number">1</span> CMS-initial-mark: <span class="number">98970</span>K(<span class="number">196608</span>K)] <span class="number">106560</span>K(<span class="number">255616</span>K), <span class="number">0.0020160</span> secs] [Times: user=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.00</span> secs]</span><br><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">18</span>T11:<span class="number">20</span>:<span class="number">41.199</span>-<span class="number">0800</span>: <span class="number">11.357</span>: [CMS-concurrent-mark-start]</span><br><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">18</span>T11:<span class="number">20</span>:<span class="number">41.263</span>-<span class="number">0800</span>: <span class="number">11.421</span>: [CMS-concurrent-mark: <span class="number">0.063</span>/<span class="number">0.063</span> secs] [Times: user=<span class="number">0.10</span> sys=<span class="number">0.01</span>, real=<span class="number">0.07</span> secs]</span><br><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">18</span>T11:<span class="number">20</span>:<span class="number">41.263</span>-<span class="number">0800</span>: <span class="number">11.421</span>: [CMS-concurrent-preclean-start]</span><br><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">18</span>T11:<span class="number">20</span>:<span class="number">41.264</span>-<span class="number">0800</span>: <span class="number">11.422</span>: [CMS-concurrent-preclean: <span class="number">0.001</span>/<span class="number">0.001</span> secs] [Times: user=<span class="number">0.01</span> sys=<span class="number">0.00</span>, real=<span class="number">0.00</span> secs]</span><br><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">18</span>T11:<span class="number">20</span>:<span class="number">41.264</span>-<span class="number">0800</span>: <span class="number">11.422</span>: [CMS-concurrent-abortable-preclean-start]</span><br><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">18</span>T11:<span class="number">20</span>:<span class="number">41.365</span>-<span class="number">0800</span>: <span class="number">11.523</span>: [GC2016-<span class="number">06</span>-<span class="number">18</span>T11:<span class="number">20</span>:<span class="number">41.365</span>-<span class="number">0800</span>: <span class="number">11.523</span>: [ParNew2016-<span class="number">06</span>-<span class="number">18</span>T11:<span class="number">20</span>:<span class="number">41.372</span>-<span class="number">0800</span>: <span class="number">11.530</span>: [CMS-concurrent-abortable-preclean: <span class="number">0.007</span>/<span class="number">0.108</span> secs] [Times: user=<span class="number">0.08</span> sys=<span class="number">0.02</span>, real=<span class="number">0.11</span> secs]</span><br><span class="line">: <span class="number">59008</span>K-&gt;<span class="number">6528</span>K(<span class="number">59008</span>K), <span class="number">0.0084290</span> secs] <span class="number">157978</span>K-&gt;<span class="number">108370</span>K(<span class="number">255616</span>K), <span class="number">0.0085350</span> secs] [Times: user=<span class="number">0.01</span> sys=<span class="number">0.00</span>, real=<span class="number">0.01</span> secs]</span><br><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">18</span>T11:<span class="number">20</span>:<span class="number">41.374</span>-<span class="number">0800</span>: <span class="number">11.532</span>: [GC[YG occupancy: <span class="number">7578</span> K (<span class="number">59008</span> K)]<span class="number">2016</span>-<span class="number">06</span>-<span class="number">18</span>T11:<span class="number">20</span>:<span class="number">41.374</span>-<span class="number">0800</span>: <span class="number">11.532</span>: [Rescan (parallel) , <span class="number">0.0027870</span> secs]<span class="number">2016</span>-<span class="number">06</span>-<span class="number">18</span>T11:<span class="number">20</span>:<span class="number">41.377</span>-<span class="number">0800</span>: <span class="number">11.535</span>: [weak refs processing, <span class="number">0.0027290</span> secs]<span class="number">2016</span>-<span class="number">06</span>-<span class="number">18</span>T11:<span class="number">20</span>:<span class="number">41.380</span>-<span class="number">0800</span>: <span class="number">11.538</span>: [scrub string table, <span class="number">0.0007810</span> secs] [<span class="number">1</span> CMS-remark: <span class="number">101842</span>K(<span class="number">196608</span>K)] <span class="number">109420</span>K(<span class="number">255616</span>K), <span class="number">0.0066720</span> secs] [Times: user=<span class="number">0.01</span> sys=<span class="number">0.00</span>, real=<span class="number">0.01</span> secs]</span><br><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">18</span>T11:<span class="number">20</span>:<span class="number">41.382</span>-<span class="number">0800</span>: <span class="number">11.540</span>: [CMS-concurrent-sweep-start]</span><br><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">18</span>T11:<span class="number">20</span>:<span class="number">41.412</span>-<span class="number">0800</span>: <span class="number">11.570</span>: [CMS-concurrent-sweep: <span class="number">0.031</span>/<span class="number">0.031</span> secs] [Times: user=<span class="number">0.05</span> sys=<span class="number">0.01</span>, real=<span class="number">0.03</span> secs]</span><br><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">18</span>T11:<span class="number">20</span>:<span class="number">41.413</span>-<span class="number">0800</span>: <span class="number">11.571</span>: [CMS-concurrent-reset-start]</span><br><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">18</span>T11:<span class="number">20</span>:<span class="number">41.413</span>-<span class="number">0800</span>: <span class="number">11.571</span>: [CMS-concurrent-reset: <span class="number">0.000</span>/<span class="number">0.000</span> secs] [Times: user=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.00</span> secs]</span><br></pre></td></tr></table></figure><p><strong>阶段 1: Initial Mark(初始标记 )</strong>。这是第一次STW事件。此阶段的目标是标记老年代中所有存活的对象，包括 GC Roots 的直接引用，以及由年轻代中存活对象所引用的对象。</p><p><img src="https://img.i7years.com/blog/04_06_g1-06.png" alt="04_06_g1-06"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">18</span>T11:<span class="number">20</span>:<span class="number">41.197</span>-<span class="number">0800</span>: <span class="number">11.355</span>: [GC [<span class="number">1</span> CMS-initial-mark: <span class="number">98970</span>K(<span class="number">196608</span>K)] <span class="number">106560</span>K(<span class="number">255616</span>K), <span class="number">0.0020160</span> secs] [Times: user=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.00</span> secs]</span><br></pre></td></tr></table></figure><blockquote><p><code>CMS-initial-mark</code>：表示CMS垃圾收集第一个阶段——初始标记。</p><p><code>98970K(196608K)</code>：表示老年代当前的使用总量为 98970K，老年代总的内存数量为：196608K</p><p><code>106560K(255616K)</code>：表示当前堆的使用总量为 106560K，堆内存总量为：255616K</p></blockquote><p><strong>阶段 2: Concurrent Mark(并发标记 )</strong>。在此阶段，垃圾收集器遍历老年代，标记所有的存活对象，从前一阶段 “Initial Mark” 找到的 root 根开始算起。 顾名思义，“并发标记”阶段，就是与应用程序同时运行，不用暂停的阶段。 请注意，并非所有老年代中存活的对象都在此阶段被标记，因为在标记过程中对象的引用关系还在发生变化。</p><p><img src="https://img.i7years.com/blog/04_07_g1-07.png" alt="04_07_g1-07"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">18</span>T11:<span class="number">20</span>:<span class="number">41.199</span>-<span class="number">0800</span>: <span class="number">11.357</span>: [CMS-concurrent-mark-start]</span><br><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">18</span>T11:<span class="number">20</span>:<span class="number">41.263</span>-<span class="number">0800</span>: <span class="number">11.421</span>: [CMS-concurrent-mark: <span class="number">0.063</span>/<span class="number">0.063</span> secs] [Times: user=<span class="number">0.10</span> sys=<span class="number">0.01</span>, real=<span class="number">0.07</span> secs]</span><br></pre></td></tr></table></figure><blockquote><p><code>CMS-concurrent-mark-start</code>：并发标记开始</p><p><code>CMS-concurrent-mark</code>：CMS垃圾回收的并发标记阶段。</p><p><code>0.063/0.063 secs</code>：此阶段的持续时间，分别是运行时间和相应的实际时间。</p></blockquote><p><strong>阶段 3: Concurrent Preclean(并发预清理)</strong>。此阶段同样是与应用线程并行执行的，不需要停止应用线程。 因为前一阶段是与程序并发进行的，可能有一些引用已经改变。如果在并发标记过程中发生了引用关系变化，JVM会(通过“Card”)将发生了改变的区域标记为“脏”区(这就是所谓的 <a href="http://psy-lob-saw.blogspot.com/2014/10/the-jvm-write-barrier-card-marking.html" target="_blank" rel="noopener">卡片标记Card Marking</a> )。</p><p><img src="https://img.i7years.com/blog/04_08_g1-08.png" alt="04_08_g1-08"></p><p>在预清理阶段，这些脏对象会被统计出来，从他们可达的对象也被标记下来。此阶段完成后, 用以标记的 card 也就被清空了。</p><p><img src="https://img.i7years.com/blog/04_09_g1-09.png" alt="04_09_g1-09"></p><p>此外，本阶段也会执行一些必要的细节处理，并为 Final Remark 阶段做一些准备工作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">18</span>T11:<span class="number">20</span>:<span class="number">41.263</span>-<span class="number">0800</span>: <span class="number">11.421</span>: [CMS-concurrent-preclean-start]</span><br><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">18</span>T11:<span class="number">20</span>:<span class="number">41.264</span>-<span class="number">0800</span>: <span class="number">11.422</span>: [CMS-concurrent-preclean: <span class="number">0.001</span>/<span class="number">0.001</span> secs] [Times: user=<span class="number">0.01</span> sys=<span class="number">0.00</span>, real=<span class="number">0.00</span> secs]</span><br></pre></td></tr></table></figure><blockquote><p><code>CMS-concurrent-preclean</code>：并发预清理阶段，统计此前的标记阶段中发生了改变的对象。</p><p><code>0.001/0.001 secs</code>：此阶段的持续时间，分别是运行时间和对应的实际时间。</p></blockquote><p><strong>阶段 4: Concurrent Abortable Preclean(并发可取消的预清理)</strong>。 此阶段也不停止应用线程。本阶段尝试在 STW的 Final Remark 之前尽可能地多做一些工作。本阶段的具体时间取决于多种因素，因为它循环做同样的事情，直到满足某个退出条件( 如迭代次数、有用工作量、消耗的系统时间等等)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">18</span>T11:<span class="number">20</span>:<span class="number">41.264</span>-<span class="number">0800</span>: <span class="number">11.422</span>: [CMS-concurrent-abortable-preclean-start]</span><br><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">18</span>T11:<span class="number">20</span>:<span class="number">41.365</span>-<span class="number">0800</span>: <span class="number">11.523</span>: [GC2016-<span class="number">06</span>-<span class="number">18</span>T11:<span class="number">20</span>:<span class="number">41.365</span>-<span class="number">0800</span>: <span class="number">11.523</span>: [ParNew2016-<span class="number">06</span>-<span class="number">18</span>T11:<span class="number">20</span>:<span class="number">41.372</span>-<span class="number">0800</span>: <span class="number">11.530</span>: [CMS-concurrent-abortable-preclean: <span class="number">0.007</span>/<span class="number">0.108</span> secs] [Times: user=<span class="number">0.08</span> sys=<span class="number">0.02</span>, real=<span class="number">0.11</span> secs]</span><br><span class="line">: <span class="number">59008</span>K-&gt;<span class="number">6528</span>K(<span class="number">59008</span>K), <span class="number">0.0084290</span> secs] <span class="number">157978</span>K-&gt;<span class="number">108370</span>K(<span class="number">255616</span>K), <span class="number">0.0085350</span> secs] [Times: user=<span class="number">0.01</span> sys=<span class="number">0.00</span>, real=<span class="number">0.01</span> secs]</span><br></pre></td></tr></table></figure><blockquote><p><code>CMS-concurrent-abortable-preclean</code>：并发可取消的预清理。</p></blockquote><p><strong>阶段 5: Final Remark(最终标记)</strong>。这是此次GC事件中第二次(也是最后一次)STW阶段。本阶段的目标是完成老年代中所有存活对象的标记。因为之前的 preclean 阶段是并发的，有可能无法跟上应用程序的变化速度。所以需要 STW暂停来处理复杂情况。</p><p>通常CMS会尝试在年轻代尽可能空的情况运行 final remark 阶段，以免接连多次发生 STW 事件。</p><p><strong>Java7的日志如下</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">18</span>T11:<span class="number">20</span>:<span class="number">41.374</span>-<span class="number">0800</span>: <span class="number">11.532</span>: [GC[YG occupancy: <span class="number">7578</span> K (<span class="number">59008</span> K)]<span class="number">2016</span>-<span class="number">06</span>-<span class="number">18</span>T11:<span class="number">20</span>:<span class="number">41.374</span>-<span class="number">0800</span>: <span class="number">11.532</span>: [Rescan (parallel) , <span class="number">0.0027870</span> secs]<span class="number">2016</span>-<span class="number">06</span>-<span class="number">18</span>T11:<span class="number">20</span>:<span class="number">41.377</span>-<span class="number">0800</span>: <span class="number">11.535</span>: [weak refs processing, <span class="number">0.0027290</span> secs]<span class="number">2016</span>-<span class="number">06</span>-<span class="number">18</span>T11:<span class="number">20</span>:<span class="number">41.380</span>-<span class="number">0800</span>: <span class="number">11.538</span>: [scrub string table, <span class="number">0.0007810</span> secs] [<span class="number">1</span> CMS-remark: <span class="number">101842</span>K(<span class="number">196608</span>K)] <span class="number">109420</span>K(<span class="number">255616</span>K), <span class="number">0.0066720</span> secs] [Times: user=<span class="number">0.01</span> sys=<span class="number">0.00</span>, real=<span class="number">0.01</span> secs]</span><br></pre></td></tr></table></figure><p><strong>Java8的日志如下</strong>：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2016-06-18T16:10:41.353-0800: 11.046: [GC (CMS Final Remark) [YG occupancy: 7576 K (59008 K)]11.046: [Rescan (parallel) , 0.0048835 secs]11.051: [weak refs processing, 0.0007074 secs]11.052: [class unloading, 0.0145890 secs]11.067: [scrub symbol table, 0.0027903 secs]11.069: [scrub string table, 0.0023910 secs][1 CMS-remark: 104562K(196608K)] 112139K(255616K), 0.0303861 secs] [Times: user=0.05 sys=0.01, real=0.03 secs]</span><br></pre></td></tr></table></figure><blockquote><p><code>[YG occupancy: 7578 K (59008 K)]</code>：年轻代使用量7578K，总量为 59008 K。</p><p><code>[Rescan (parallel) , 0.0027870 secs]</code>：应用程序暂定，重新扫描，完成所有存活对象的标记。耗时：0.0027870秒</p><p><code>[weak refs processing, 0.0027290 secs]</code>：第一个子阶段，处理弱引用的</p><p><code>[class unloading, 0.0145890 secs]</code>：第二个子阶段，卸载不使用的类。（Java8多出了的一步）</p><p><code>[scrub string table, 0.0007810 secs]</code>：第三个子阶段，清洗内部化字符串对应的 string tables</p><p><code>101842K(196608K)</code>：此阶段完成后老年代的使用量和总量</p><p><code>109420K(255616K)</code>：此阶段完成后整个堆内存的使用量和总量</p></blockquote><p><strong>阶段 6: Concurrent Sweep(并发清除 )</strong> 。此阶段与应用程序并发执行， 不需要STW停顿。目的是删除未使用的对象，并收回他们占用的空间。</p><p><img src="https://img.i7years.com/blog/04_10_g1-10.png" alt="04_10_g1-10"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">18</span>T11:<span class="number">20</span>:<span class="number">41.382</span>-<span class="number">0800</span>: <span class="number">11.540</span>: [CMS-concurrent-sweep-start]</span><br><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">18</span>T11:<span class="number">20</span>:<span class="number">41.412</span>-<span class="number">0800</span>: <span class="number">11.570</span>: [CMS-concurrent-sweep: <span class="number">0.031</span>/<span class="number">0.031</span> secs] [Times: user=<span class="number">0.05</span> sys=<span class="number">0.01</span>, real=<span class="number">0.03</span> secs]</span><br></pre></td></tr></table></figure><blockquote><p><code>CMS-concurrent-sweep: 0.031/0.031 secs</code> ：并发清理阶段，清理掉不再使用的垃圾对象。</p></blockquote><p><strong>阶段 7: Concurrent Reset(并发重置)</strong> 。此阶段与应用程序并发执行，重置CMS算法相关的内部数据，为下一次GC循环做准备。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">18</span>T11:<span class="number">20</span>:<span class="number">41.413</span>-<span class="number">0800</span>: <span class="number">11.571</span>: [CMS-concurrent-reset-start]</span><br><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">18</span>T11:<span class="number">20</span>:<span class="number">41.413</span>-<span class="number">0800</span>: <span class="number">11.571</span>: [CMS-concurrent-reset: <span class="number">0.000</span>/<span class="number">0.000</span> secs] [Times: user=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.00</span> secs]</span><br></pre></td></tr></table></figure><blockquote><p><code>CMS-concurrent-reset: 0.000/0.000 secs</code>：并发重置阶段，以及使用时间。</p></blockquote><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://book.douban.com/subject/24722612/" target="_blank" rel="noopener">《JVM高级特性与最佳实践[第2版]》第3章节「垃圾收集器与内存分配策略」</a></li><li><a href="https://github.com/cncounter/gc-handbook" target="_blank" rel="noopener">https://github.com/cncounter/gc-handbook</a></li><li><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/cms.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/cms.html</a></li><li><a href="https://plumbr.io/handbook/garbage-collection-algorithms-implementations/concurrent-mark-and-sweep" target="_blank" rel="noopener">https://plumbr.io/handbook/garbage-collection-algorithms-implementations/concurrent-mark-and-sweep</a></li><li><a href="http://www.oracle.com/technetwork/tutorials/tutorials-1876574.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/tutorials/tutorials-1876574.html</a></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> GC </tag>
            
            <tag> JVM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Serial GC 与 Parallel GC]]></title>
      <url>/posts/jvm-gc-serial-and-parallel.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/pexels-photo-1451567.jpeg?imageslim" alt="pexels-photo-1451567"></p><p><a href="https://wangwei.one/posts/396cfa32.html">前面</a> 我们学习了JVM中几种常用的GC算法，今天我们来学习一下JVM中实现这些算法的垃圾收集器。大多数JVM都需要使用两种不同的GC算法 —— 一种用来清理年轻代，另一种用来清理老年代。</p><a id="more"></a><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>我们可以从以下几个不同的角度来对GC收集器进行分类：</p><ol><li>按线程数分，可以分为串行垃圾回收器和并行垃圾回收器。<ul><li>串行垃圾回收器一次只使用一个线程进行垃圾回收；</li><li>并行垃圾回收器一次将开启多个线程同时进行垃圾回收。在并行能力较强的 CPU 上，使用并行垃圾回收器可以缩短 GC 的停顿时间。</li></ul></li><li>按照工作模式分，可以分为并发式垃圾回收器和独占式垃圾回收器。<ul><li>并发式垃圾回收器与应用程序线程交替工作，以尽可能减少应用程序的停顿时间；</li><li>独占式垃圾回收器 (Stop the world) 一旦运行，就停止应用程序中的其他所有线程，直到垃圾回收过程完全结束。</li></ul></li><li>按碎片处理方式可分为压缩式垃圾回收器和非压缩式垃圾回收器。<ul><li>压缩式垃圾回收器会在回收完成后，对存活对象进行压缩整理，消除回收后的碎片；</li><li>非压缩式的垃圾回收器不进行这步操作。</li></ul></li><li>按工作的内存区间，又可分为新生代垃圾回收器和老年代垃圾回收器。</li></ol><h2 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h2><p>由于新生代与老年代各自可以使用不同的垃圾收集器，因此两两在搭配使用时，会有许多种不同的组合。</p><table><thead><tr><th>VM参数</th><th>组合结果</th></tr></thead><tbody><tr><td><strong>-XX:+UseSerialGC</strong></td><td>young <strong>Copy</strong> and old <strong>MarkSweepCompact</strong></td></tr><tr><td><strong>-XX:+UseG1GC</strong></td><td>young <strong>G1 Young</strong> and old <strong>G1 Mixed</strong></td></tr><tr><td><strong>-XX:+UseParallelGC -XX:+UseParallelOldGC -XX:+UseAdaptiveSizePolicy</strong></td><td>young <strong>PS Scavenge</strong> old <strong>PS MarkSweep</strong> （自适应调整）</td></tr><tr><td><strong>-XX:+UseParallelGC -XX:+UseParallelOldGC -XX:-UseAdaptiveSizePolicy</strong></td><td>young <strong>PS Scavenge</strong> old <strong>PS MarkSweep</strong>, （非自适应调整）</td></tr><tr><td><strong>-XX:+UseParNewGC (Java8中禁用，Java9已移除)</strong></td><td>young <strong>ParNew</strong> old <strong>MarkSweepCompact</strong></td></tr><tr><td><strong>-XX:+UseParNewGC -XX:+UseConcMarkSweepGC</strong></td><td>young <strong>ParNew</strong> old <strong>ConcurrentMarkSweep</strong></td></tr><tr><td><strong>-XX:-UseParNewGC -XX:+UseConcMarkSweepGC (Java8中禁用，Java9已移除)</strong></td><td>young <strong>Copy</strong> old <strong>ConcurrentMarkSweep</strong></td></tr></tbody></table><p>其实，我们只需要重点关注以下4种组合，其他的在Java8之后的版本中已渐渐被抛弃……</p><ul><li>年轻代和老年代的串行GC(Serial GC)</li><li>年轻代和老年代的并行GC(Parallel GC)</li><li>年轻代的并行GC(Parallel New) + 老年代的CMS(Concurrent Mark and Sweep)</li><li>G1负责回收年轻代和老年代</li></ul><h2 id="Serial-Serial-Old（串行GC）"><a href="#Serial-Serial-Old（串行GC）" class="headerlink" title="Serial / Serial Old（串行GC）"></a>Serial / Serial Old（串行GC）</h2><p>Serial GC 对年轻代使用 <a href="https://wangwei.one/posts/396cfa32.html">mark­-copy(标记­复制)</a> 算法，对老年代使用 <a href="https://wangwei.one/posts/396cfa32.html">mark­-sweep­-compact(标记­清除­整理)</a> 算法。</p><p><img src="https://img.i7years.com/blog/Serial%20GC.png?2" alt="Serial GC"></p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>两者都是<strong>单线程</strong>的垃圾收集器，不能进行并行处理。两者都会触发<strong>全线暂停(STW)</strong>，停止所有的应用线程。</p><p>因此这种GC算法不能充分利用多核CPU。不管有多少CPU内核，JVM 在垃圾收集时都只能使用单个核心。</p><h4 id="适用场合"><a href="#适用场合" class="headerlink" title="适用场合"></a>适用场合</h4><p>该选项只适合几百MB堆内存的JVM，而且是单核CPU时比较有用。 对于服务器端来说，因为一般是多个CPU内核，并不推荐使用，除非确实需要限制JVM所使用的资源。大多数服务器端应用部署在多核平台上，选择 Serial GC 就表示人为的限制系统资源的使用。 导致的就是资源闲置，多的CPU资源也不能用来降低延迟，也不能用来增加吞吐量。</p><p>Serial收集器对于运行在Client模式下的虚拟机来说是一个很好的选择。</p><h4 id="控制参数"><a href="#控制参数" class="headerlink" title="控制参数"></a>控制参数</h4><ul><li><code>-XX:+UseSerialGC</code>：在新生代和老年代使用串行回收器。</li><li><code>-XX:+SurvivorRatio</code>：设置 eden 区大小和 survivor 区大小的比例。</li><li><code>-XX:+PretenureSizeThreshold</code>：设置大对象直接进入老年代的阈值。当对象的大小超过这个值时，将直接在老年代分配。</li><li><code>-XX:MaxTenuringThreshold</code>：设置对象进入老年代的年龄的最大值。每一次 Minor GC 后，对象年龄就加 1。任何大于这个年龄的对象，一定会进入老年代。</li></ul><h4 id="GC日志分析"><a href="#GC日志分析" class="headerlink" title="GC日志分析"></a>GC日志分析</h4><h5 id="VM参数"><a href="#VM参数" class="headerlink" title="VM参数"></a>VM参数</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-client</span><br><span class="line">-XX:+PrintGCDetails</span><br><span class="line">-XX:+PrintGCTimeStamps</span><br><span class="line">-XX:+PrintGCDateStamps</span><br><span class="line">‐XX:+UseSerialGC</span><br></pre></td></tr></table></figure><h5 id="Minor-GC"><a href="#Minor-GC" class="headerlink" title="Minor GC"></a>Minor GC</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">15</span>T16:<span class="number">05</span>:<span class="number">03.173</span>-<span class="number">0800</span>: <span class="number">196.835</span>: [GC2016-<span class="number">06</span>-<span class="number">15</span>T16:<span class="number">05</span>:<span class="number">03.173</span>-<span class="number">0800</span>: <span class="number">196.836</span>: [DefNew: <span class="number">59007</span>K-&gt;<span class="number">435</span>K(<span class="number">59008</span>K), <span class="number">0.0103200</span> secs] <span class="number">114651</span>K-&gt;<span class="number">61875</span>K(<span class="number">124544</span>K), <span class="number">0.0118620</span> secs] [Times: user=<span class="number">0.01</span> sys=<span class="number">0.00</span>, real=<span class="number">0.01</span> secs]</span><br></pre></td></tr></table></figure><blockquote><p><code>2016-06-15T16:05:03.173-0800</code>：GC事件开始的时间. 其中 ‐0800 表示东8时区。</p><p><code>196.835</code>：GC事件开始时，相对于JVM启动时的间隔时间，单位是秒。</p><p><code>GC</code> ：用来区分 Minor GC 还是 Full GC 的标志。 GC 表明这是一次 GC(Minor GC)</p><p><code>DefNew</code>：垃圾收集器的名称。表示的是在年轻代中使用的: 单线程，标记­复制(mark­-copy)，全线暂停(STW) 垃圾收集器。</p><p><code>59007K-&gt;435K</code>：在垃圾收集之前和之后年轻代的使用量。</p><p><code>(59008K)</code>：年轻代总空间大小</p><p><code>114651K-&gt;61875K</code>：在垃圾收集之前和之后整个堆内存的使用情况。</p><p><code>(124544K)</code>：可用堆的总空间大小。</p><p><code>0.0118620 secs</code>：GC事件持续的时间,以秒为单位。</p><p><code>[Times: user=0.01 sys=0.00, real=0.01 secs]</code>：GC事件的持续时间, 通过三个部分来衡量:</p><ul><li>user – 在此次垃圾回收过程中, 所有GC线程所消耗的CPU时间之和。</li><li>sys – GC过程中操作系统调用和系统等待事件所消耗的时间。</li><li>real – 应用程序暂停的时间。因为串行垃圾收集器(Serial Garbage Collector)只使用单线程, 因此 real time 等 于 user 和 system 时间的总和。</li></ul></blockquote><p>从上面的日志我们可以了解到：</p><ul><li>GC之前，堆内存使用总量为<strong>114651K</strong>，年轻代使用总量为<strong>59007K</strong>，那么老年代使用量为：<strong>55644K</strong>。</li><li>GC之后，堆内存减少了<strong>52776K</strong>，年轻代减少了<strong>58572K</strong>，那么表示有 <strong>5796K</strong> 的对象提升到了老年代。</li></ul><h5 id="Full-GC"><a href="#Full-GC" class="headerlink" title="Full GC"></a>Full GC</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">15</span>T16:<span class="number">10</span>:<span class="number">31.467</span>-<span class="number">0800</span>: <span class="number">525.130</span>: [Full GC2016-<span class="number">06</span>-<span class="number">15</span>T16:<span class="number">10</span>:<span class="number">31.467</span>-<span class="number">0800</span>: <span class="number">525.130</span>: [Tenured: <span class="number">65536</span>K-&gt;<span class="number">65535</span>K(<span class="number">65536</span>K), <span class="number">0.2080570</span> secs] <span class="number">124544</span>K-&gt;<span class="number">111862</span>K(<span class="number">124544</span>K), [Perm : <span class="number">31291</span>K-&gt;<span class="number">31291</span>K(<span class="number">131072</span>K)], <span class="number">0.2081880</span> secs] [Times: user=<span class="number">0.20</span> sys=<span class="number">0.00</span>, real=<span class="number">0.21</span> secs]</span><br></pre></td></tr></table></figure><blockquote><p><code>Full GC</code>：表示这一次是对整个堆空间进行清理。</p><p><code>[Tenured: 65536K-&gt;65535K(65536K), 0.2080570 secs]</code>：老年代GC前为使用量为65536K，GC后使用量为65535K，总空间为65536K，使用0.2080570秒；</p><p><code>124544K-&gt;111862K(124544K)</code>：GC前后整个堆内存使用量从 124544K 减少为 111862K，总空间为124544K</p><p><code>[Perm : 31291K-&gt;31291K(131072K)], 0.2081880 secs]</code>：持久区GC前后使用内存空间都为31291K，没有变化。</p></blockquote><h2 id="Parallel-Scavenge-Parallel-Old-GC（并行GC）"><a href="#Parallel-Scavenge-Parallel-Old-GC（并行GC）" class="headerlink" title="Parallel Scavenge / Parallel Old GC（并行GC）"></a>Parallel Scavenge / Parallel Old GC（并行GC）</h2><p>Parallel GC 对年轻代使用 <a href="https://wangwei.one/posts/396cfa32.html">mark­-copy(标记­复制)</a> 算法，对老年代使用 <a href="https://wangwei.one/posts/396cfa32.html">mark­-sweep­-compact(标记­清除­整理)</a> 算法。</p><p><img src="https://img.i7years.com/blog/Parallel%20GC.png?1" alt="Parallel GC"></p><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><p>两者都是<strong>多线程</strong>的垃圾收集器，两者都会触发<strong>全线暂停(STW)</strong>，停止所有的应用线程。由于是多线程，所以相比于Serial GC，垃圾收集时间将大大减少。</p><p>Parallel Scavenge收集器的目标则是达到一个可控制的吞吐量（Throughput）。</p><blockquote><p>所谓吞吐量就是CPU用于运行用户代码的时间与CPU总消耗时间的比值，即吞吐量=运行用户代码时间/（运行用户代码时间+垃圾收集时间），虚拟机总共运行了100分钟，其中垃圾收集花掉1分钟，那吞吐量就是99%。</p></blockquote><h4 id="适用场合-1"><a href="#适用场合-1" class="headerlink" title="适用场合"></a>适用场合</h4><p>并行垃圾收集器适用于多核服务器，主要目标是增加吞吐量。因为对系统资源的有效使用,能达到更高的吞吐量:</p><ul><li>在GC期间，所有 CPU 内核都在并行清理垃圾，所以暂停时间更短</li><li>在两次GC周期的间隔期，没有GC线程在运行，不会消耗任何系统资源</li></ul><p>另一方面，因为此GC的所有阶段都不能中断，所以并行GC很容易出现长时间的卡顿。如果延迟是系统的主要目标，那么就应该选择其他垃圾收集器组合。</p><blockquote><p>长时间卡顿的意思是，此GC启动之后，属于一次性完成所有操作，于是单次 pause 的时间会较长。</p></blockquote><h4 id="控制参数-1"><a href="#控制参数-1" class="headerlink" title="控制参数"></a>控制参数</h4><ul><li><p><code>‐XX:ParallelGCThreads</code>：指定GC线程数，默认值为CPU内核数。</p></li><li><p><code>-XX:MaxGCPauseMillis</code>：最大垃圾收集停顿时间。不能设置过小，否则会降低系统吞吐量。</p></li><li><code>-XX:GCTimeRatio</code>：设置吞吐量大小。是一个大于0且小于100的整数。假如设置为99，则垃圾收集时间的比率为：1 / (1 + 99)。</li><li><code>-XX:+UseAdaptiveSizePolicy</code>：这是一个开关参数，当这个参数打开之后，就不需要手工指定新生代的大小(-Xmn)、Eden与Survivor区的比例(-XX:SurvivorRati)、晋升老年代对象年龄(-XX:PretenureSizeThreshold)等细节参数了，虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量，这种调节方式称为GC自适应的调节策略（ <a href="https://docs.oracle.com/javase/7/docs/technotes/guides/vm/gc-ergonomics.html" target="_blank" rel="noopener">GC Ergonomics</a> ）。</li></ul><h4 id="GC-日志分析"><a href="#GC-日志分析" class="headerlink" title="GC 日志分析"></a>GC 日志分析</h4><h5 id="VM参数-1"><a href="#VM参数-1" class="headerlink" title="VM参数"></a>VM参数</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-server</span><br><span class="line">-XX:+PrintGCDetails</span><br><span class="line">-XX:+PrintGCTimeStamps</span><br><span class="line">-XX:+PrintGCDateStamps</span><br><span class="line">-XX:+UseParallelGC -XX:+UseParallelOldGC</span><br></pre></td></tr></table></figure><blockquote><p>其中 <code>-XX:+UseParallelGC -XX:+UseParallelOldGC</code> 与使用 <code>-XX:+UseParallelGC</code> 或 <code>-XX:+UseParallelOldGC</code> 等价。</p></blockquote><h5 id="Minor-GC-1"><a href="#Minor-GC-1" class="headerlink" title="Minor GC"></a>Minor GC</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">15</span>T21:<span class="number">41</span>:<span class="number">01.947</span>-<span class="number">0800</span>: <span class="number">11.726</span>: [GC [PSYoungGen: <span class="number">51636</span>K-&gt;<span class="number">8281</span>K(<span class="number">54784</span>K)] <span class="number">112923</span>K-&gt;<span class="number">72238</span>K(<span class="number">120320</span>K), <span class="number">0.0062430</span> secs] [Times: user=<span class="number">0.01</span> sys=<span class="number">0.00</span>, real=<span class="number">0.01</span> secs]</span><br></pre></td></tr></table></figure><blockquote><p><code>GC</code>：小型GC。</p><p><code>PSYoungGen</code>：收集器名称，表示年轻代使用的是 Parallel Scavenge 收集器。</p><p><code>51636K-&gt;8281K(54784K)</code>：年轻代从 51636K 减少到了 8281K，年轻代空间总量为：54784K。</p><p><code>112923K-&gt; 72238K(120320K)</code>：整个堆空间从 112923K 减少到了 72238K，堆空间总量为：120320K。</p></blockquote><p>年轻代减少了 <strong>43355K</strong>，堆空间减少了<strong>40685K</strong>，表明有 <strong>2670K</strong> 的对象从年轻代提升到了老年代。</p><h5 id="Full-GC-1"><a href="#Full-GC-1" class="headerlink" title="Full GC"></a>Full GC</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">15</span>T21:<span class="number">41</span>:<span class="number">01.953</span>-<span class="number">0800</span>: <span class="number">11.732</span>: [Full GC [PSYoungGen: <span class="number">8281</span>K-&gt;<span class="number">0</span>K(<span class="number">54784</span>K)] [ParOldGen: <span class="number">63956</span>K-&gt;<span class="number">59231</span>K(<span class="number">65536</span>K)] <span class="number">72238</span>K-&gt;<span class="number">59231</span>K(<span class="number">120320</span>K) [PSPermGen: <span class="number">14462</span>K-&gt;<span class="number">14462</span>K(<span class="number">131072</span>K)], <span class="number">0.1389900</span> secs] [Times: user=<span class="number">0.44</span> sys=<span class="number">0.01</span>, real=<span class="number">0.14</span> secs]</span><br></pre></td></tr></table></figure><blockquote><p><code>Full GC</code>，表明这次清理了年轻代和老年代。</p><p><code>PSYoungGen: 8281K-&gt;0K(54784K)</code>：年轻代垃圾收集器为Parallel Scavenge，使用量从8281K变为了0K。年轻代空间总量为54784K。</p><p><code>ParOldGen: 63956K-&gt;59231K(65536K)</code>：老年代收集器为Parallel Old，使用量从63956K变为了59231K。老年代空间总量为：65536K。</p><p><code>72238K-&gt;59231K(120320K)</code>：整个堆空间从72238K变为了59231K。堆空间总量为：120320K。</p><p><code>PSPermGen: 14462K-&gt;14462K(131072K)</code>：持久去前后都为14462K，没有变化。持久去空间总量为：131072K。</p></blockquote><h2 id="ParNew收集器"><a href="#ParNew收集器" class="headerlink" title="ParNew收集器"></a>ParNew收集器</h2><p>ParNew收集器本质上就是 Serial 收集器的多线程版本，其余行为包括控制参数（例如：-XX：SurvivorRatio、-XX：PretenureSizeThreshold、-XX：HandlePromotionFailure等）、收集算法、Stop The World、对象分配规则、回收策略等都与Serial收集器完全一样。</p><p><img src="https://img.i7years.com/blog/ParNew%20GC.png?1" alt="ParNew"></p><h4 id="控制参数-2"><a href="#控制参数-2" class="headerlink" title="控制参数"></a>控制参数</h4><ul><li><code>‐XX:ParallelGCThreads</code>：指定GC线程数，默认值为CPU内核数。</li></ul><h4 id="GC-日志分析-1"><a href="#GC-日志分析-1" class="headerlink" title="GC 日志分析"></a>GC 日志分析</h4><h5 id="VM-参数"><a href="#VM-参数" class="headerlink" title="VM 参数"></a>VM 参数</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-server</span><br><span class="line">-XX:+PrintGCDetails</span><br><span class="line">-XX:+PrintGCTimeStamps</span><br><span class="line">-XX:+PrintGCDateStamps</span><br><span class="line">-XX:+UseParNewGC</span><br></pre></td></tr></table></figure><h5 id="Minor-GC-2"><a href="#Minor-GC-2" class="headerlink" title="Minor GC"></a>Minor GC</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">16</span>T10:<span class="number">52</span>:<span class="number">24.846</span>-<span class="number">0800</span>: <span class="number">1.690</span>: [GC2018-<span class="number">08</span>-<span class="number">21</span>T10:<span class="number">52</span>:<span class="number">24.846</span>-<span class="number">0800</span>: <span class="number">1.690</span>: [ParNew: <span class="number">52480</span>K-&gt;<span class="number">6527</span>K(<span class="number">59008</span>K), <span class="number">0.0143120</span> secs] <span class="number">52480</span>K-&gt;<span class="number">6683</span>K(<span class="number">124544</span>K), <span class="number">0.0144440</span> secs] [Times: user=<span class="number">0.03</span> sys=<span class="number">0.00</span>, real=<span class="number">0.02</span> secs]</span><br></pre></td></tr></table></figure><blockquote><p><code>ParNew</code>：表明年轻代使用的是 ParNew 收集器</p><p>其他数据分析，与前面的日志分析一样</p></blockquote><h5 id="Full-GC-2"><a href="#Full-GC-2" class="headerlink" title="Full GC"></a>Full GC</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">16</span>T10:<span class="number">52</span>:<span class="number">34.709</span>-<span class="number">0800</span>: <span class="number">11.552</span>: [Full GC2018-<span class="number">08</span>-<span class="number">21</span>T10:<span class="number">52</span>:<span class="number">34.709</span>-<span class="number">0800</span>: <span class="number">11.552</span>: [Tenured: <span class="number">65533</span>K-&gt;<span class="number">65535</span>K(<span class="number">65536</span>K), <span class="number">0.1024680</span> secs] <span class="number">124534</span>K-&gt;<span class="number">70147</span>K(<span class="number">124544</span>K), [Perm : <span class="number">14425</span>K-&gt;<span class="number">14425</span>K(<span class="number">21248</span>K)], <span class="number">0.1025780</span> secs] [Times: user=<span class="number">0.10</span> sys=<span class="number">0.00</span>, real=<span class="number">0.11</span> secs]</span><br></pre></td></tr></table></figure><blockquote><p>数据分析与前面的一样</p></blockquote><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>该种 <code>-XX:+UseParNewGC</code> 配置，在Java8中已不推荐使用，Java9中已经完全删除了。在此后的版本中，只能与 CMS 收集器搭配使用。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本篇文章我们讲了 Serial、Parallel、ParNew 的使用与配置，下篇文章我们将重点介绍 <a href="https://wangwei.one/posts/6489a27.html">CMS</a> 与 G1 收集器的使用。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://book.douban.com/subject/24722612/" target="_blank" rel="noopener">《JVM高级特性与最佳实践[第2版]》第3章节「垃圾收集器与内存分配策略」</a></li><li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-JVMGarbageCollection/index.html" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/java/j-lo-JVMGarbageCollection/index.html</a></li><li><a href="http://www.fasterj.com/articles/oraclecollectors1.shtml" target="_blank" rel="noopener">http://www.fasterj.com/articles/oraclecollectors1.shtml</a></li><li><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/index.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/index.html</a></li><li><a href="http://java-latte.blogspot.com/2013/08/garbage-collection-in-java.html" target="_blank" rel="noopener">http://java-latte.blogspot.com/2013/08/garbage-collection-in-java.html</a></li><li><a href="http://www.cnblogs.com/iceAeterNa/p/4877549.html" target="_blank" rel="noopener">http://www.cnblogs.com/iceAeterNa/p/4877549.html</a></li><li><a href="https://www.cnblogs.com/iceAeterNa/p/4877741.html" target="_blank" rel="noopener">https://www.cnblogs.com/iceAeterNa/p/4877741.html</a></li><li><a href="https://github.com/cncounter/gc-handbook" target="_blank" rel="noopener">https://github.com/cncounter/gc-handbook</a></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> GC </tag>
            
            <tag> JVM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GC算法介绍]]></title>
      <url>/posts/jvm-gc-arithmetic-intro.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/pexels-photo-1686293.jpeg?imageslim" alt="pexels-photo-1686293"></p><p>前面我们了解了 <a href="https://wangwei.one/posts/71c1df10.html">Java7</a> 与 <a href="https://wangwei.one/posts/fcc298ef.html">Java8</a> 的内存模型，接下里我们要学习JVM是如何回收对象所占用的内存的，本文先为你介绍三种常用的GC算法。</p><a id="more"></a><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>常用的GC算法主要有三种：<code>标记-清除算法</code>、<code>标记-整理算法</code>、<code>复制算法</code>。还有一种<code>分代收集算法</code>，这种算法无非就是对内存的不同区域使用前面三种不同的算法。</p><p>这三种GC算法总体而言，都专注于干两件事情：</p><ul><li>标记所有存活的对象。在垃圾收集中有一个叫做 <strong>标记(Marking)</strong> 的过程专门干这件事。</li><li>清除所有死对象。这三种算法的区别就在于清理死对象的实现方式上。</li></ul><h2 id="标记可达对象-Marking-Reachable-Objects"><a href="#标记可达对象-Marking-Reachable-Objects" class="headerlink" title="标记可达对象(Marking Reachable Objects)"></a>标记可达对象(Marking Reachable Objects)</h2><p>现代JVM中所有的GC算法，第一步都是找出所有存活的对象，如图所示：</p><p><img src="https://img.i7years.com/blog/03_01_Java-GC-mark-and-sweep.png" alt="Java-GC-mark-and-sweep"></p><h4 id="GC-Roots"><a href="#GC-Roots" class="headerlink" title="GC Roots"></a>GC Roots</h4><p><a href="https://wangwei.one/posts/95492bf7.html">前面</a> 讲了 GC中 <strong>根(GC Roots)</strong> 的概念：</p><blockquote><p>指的是指向对象指针的”起点”。</p></blockquote><p>可作为GC Roots的节点主要在全局性的引用（例如常量或类静态属性）与执行上下文（例如栈帧中的本地变量表）中，主要包括：</p><ul><li>当前正在执行的方法里的局部变量和输入参数</li><li>活动线程(Active threads)</li><li>内存中所有类的静态字段(static field)</li><li>JNI引用</li></ul><p>GC遍历(traverses)内存中整体的对象关系图(object graph)，从GC根元素开始扫描，到直接引用以及间接引用(通过对象的 <a href="https://wangwei.one/posts/95492bf7.html">属性域</a> )。所有GC访问到的对象都被 (marked)为 <a href="https://wangwei.one/posts/95492bf7.html">存活对象</a> （上图中的蓝色标记）。而从GC根无法直接或间接访问到的对象称为 <a href="https://wangwei.one/posts/95492bf7.html">不可达的对象</a> (unreachable object) (上图中的灰色标记)，GC会在接下来的阶段中清除掉这些不可达的对象。</p><p>在标记阶段，需要注意几点：</p><h4 id="Stop-The-World-STW"><a href="#Stop-The-World-STW" class="headerlink" title="Stop The World(STW)"></a>Stop The World(STW)</h4><p>在标记阶段，需要暂停所有应用线程，以遍历所有对象的引用关系。因为这项分析工作必须在一个能确保一致性的快照中进行——这里“一致性”的意思是指在整个分析期间整个执行系统看起来就像被冻结在某个时间点上，不可以出现分析过程中对象引用关系还在不断变化的情况，该点不满足的话分析结果准确性就无法得到保证。这种情景叫做 <strong>Stop The World pause</strong> (全线停顿)。</p><p>暂停的时间，与堆内存的大小，对象的总数没有直接关系，而是有存活对象（alive objects）的数量来决定。所以，增加堆内存的大小并不会直接影响标记阶段占用的时间。</p><h4 id="OopMap"><a href="#OopMap" class="headerlink" title="OopMap"></a>OopMap</h4><p>目前的主流Java虚拟机使用的都是准确式GC（Exact VM），所以当执行系统停顿下来后，并不需要一个不漏地检查完所有执行上下文和全局的引用位置，虚拟机应当是有办法直接得知哪些地方存放着对象引用。在HotSpot的实现中，是使用一组称为<strong>OopMap</strong>的数据结构来达到这个目的的，在类加载完成的时候，HotSpot就把对象内什么偏移量上是什么类型的数据计算出来，在JIT编译过程中，也会在特定的位置记录下栈和寄存器中哪些位置是引用。这样，GC在扫描时就可以直接得知这些信息了。</p><blockquote><p>OopMap 是一种用于记录位于Java栈上的对象引用的数据结构。 其主要目的是查找位于Java栈上的 GC Roots，当Heap中对象移动时，会去更新对应的对象引用信息。</p><p><a href="https://github.com/openjdk-mirror/jdk7u-hotspot/blob/master/src/share/vm/compiler/oopMap.cpp" target="_blank" rel="noopener">oopMap.cpp</a> 、 <a href="https://github.com/openjdk-mirror/jdk7u-hotspot/blob/master/src/share/vm/oops/generateOopMap.cpp" target="_blank" rel="noopener">generateOopMap.cpp</a> 、 <a href="https://github.com/openjdk-mirror/jdk7u-hotspot/blob/master/src/share/vm/interpreter/oopMapCache.cpp" target="_blank" rel="noopener">oopMapCache.hpp</a></p></blockquote><h4 id="Safe-Point"><a href="#Safe-Point" class="headerlink" title="Safe Point"></a>Safe Point</h4><p>程序并非在所有的地方都能停顿下来开始GC，只有达到<strong>安全点</strong>(Safe Point)才能暂定。如何在GC发生时，让所有线程都”跑”到安全点上再停顿下来，这里有两种方案：</p><h5 id="抢先式中断（Preemptive-Suspension）"><a href="#抢先式中断（Preemptive-Suspension）" class="headerlink" title="抢先式中断（Preemptive Suspension）"></a>抢先式中断（Preemptive Suspension）</h5><p>不需要线程的执行代码主动配合，在GC发生时，首先把所有线程全部中断，如果发现有线程中断的地方不在安全点上，就恢复线程，让它”跑”到安全点上。（这种方式几乎没有虚拟机使用了）</p><h5 id="主动式中断（Voluntary-Suspension）"><a href="#主动式中断（Voluntary-Suspension）" class="headerlink" title="主动式中断（Voluntary Suspension）"></a>主动式中断（Voluntary Suspension）</h5><p>当GC需要中断线程的时候，不直接对线程操作，仅仅简单地设置一个标志，各个线程执行时主动去轮询这个标志，发现中断标志为真时就自己中断挂起。</p><h4 id="Safe-Region"><a href="#Safe-Region" class="headerlink" title="Safe Region"></a>Safe Region</h4><p>当线程处理Sleep状态或者Blocked状态，这时线程无法响应JVM的中断请求，也就无法”跑”到安全的地方去中断挂起，JVM也不可能等到线程重新被分配CPU时间。这就需要安全区域来解决。</p><p><strong>安全区域（Safe Region）</strong>是指在一段代码片段之中，引用关系不会发生变化。在这个区域中的任意地方开始GC都是安全的。</p><p>在线程执行到Safe Region中的代码时，首先标识自己已经进入了Safe Region，那样，当在这段时间里JVM要发起GC时，就不用管标识自己为Safe Region状态的线程了。在线程要离开Safe Region时，它要检查系统是否已经完成了根节点枚举（或者是整个GC过程），如果完成了，那线程就继续执行，否则它就必须等待直到收到可以安全离开Safe Region的信号为止。</p><h2 id="删除不可达对象-Removing-Unused-Objects"><a href="#删除不可达对象-Removing-Unused-Objects" class="headerlink" title="删除不可达对象(Removing Unused Objects)"></a>删除不可达对象(Removing Unused Objects)</h2><p>各种GC算法在删除不可达对象时略有不同, 但总体可分为三类: 清除(sweeping)、整理(compacting)和复制 (copying)。</p><h3 id="Sweep-清除"><a href="#Sweep-清除" class="headerlink" title="Sweep(清除)"></a>Sweep(清除)</h3><p><strong>Mark-Sweep</strong>(标记-清除)算法是最基础的收集算法。在标记阶段完成之后，所有不可达的对象占用的空间都会被回收，用于下一次新对象的分配。</p><p><img src="https://img.i7years.com/blog/03_02_GC-sweep.png" alt="GC-sweep"></p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>算法简单，实现容易</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li><strong>碎片化（fragmentation）</strong>。在 GC 标记 - 清除算法的使用过程中会逐渐产生被细化的分块，不久后就会导致无数的 小分块散布在堆的各处。如果发生碎片化，那么即使堆中分块的总大小够用，也会因为一个个的分块都太小而不 能执行分配。</li><li>需要使用<strong>空闲链表</strong> (free­list)，来记录所有的空闲区域，以及每个区域的大小。维护空闲表增加了对象分配时的开销。</li><li><strong>分配速度低下</strong>。GC 标记 - 清除算法中分块不是连续的，因此每次分配都必须遍历空闲链表，找到足够大的分块。最糟的情况就是每次进行分配都得把空闲链表遍历到最后。</li></ul><h3 id="Copy-复制"><a href="#Copy-复制" class="headerlink" title="Copy(复制)"></a>Copy(复制)</h3><p>为了解决效率问题，一种称为“复制”（Copying）的收集算法出现了，它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。这样使得每次都是对整个半区进行内存回收，内存分配时也就不用考虑内存碎片等复杂情况，只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效。</p><p><img src="https://img.i7years.com/blog/03_04_GC-mark-and-copy-in-Java.png" alt="GC-mark-and-copy-in-Java"></p><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><h5 id="优秀的吞吐量"><a href="#优秀的吞吐量" class="headerlink" title="优秀的吞吐量"></a>优秀的吞吐量</h5><p>GC 标记 - 清除算法消耗的吞吐量是搜索活动对象（标记阶段）所花费的时间和搜索整体堆（清除阶段）所花费的时间之和。</p><p>而 GC 复制算法只搜索并复制活动对象，所以跟一般的 GC 标记 - 清除算 法相比，它能在较短时间内完成 GC。也就是说，其吞吐量优秀。</p><p>尤其是堆越大，差距越明显。GC 标记 - 清除算法在清除阶段所花费的时间会不断增加， 但 GC 复制算法就不会产生这种消耗。毕竟它消耗的时间是与活动对象的数量成比例的。</p><h5 id="可实现高速分配"><a href="#可实现高速分配" class="headerlink" title="可实现高速分配"></a>可实现高速分配</h5><p>GC 复制算法不使用空闲链表。这是因为分块是一个连续的内存空间。因此，只要这个分块大小不小于所申请的大小，那么移动 <code>$free</code> 指针就可以进行分配了。不像 GC 标记 - 清除算法那样每次分配内存空间时，都要遍历空闲链表，而且每次都要遍历到最后一个分块。</p><h5 id="不会发生碎片化"><a href="#不会发生碎片化" class="headerlink" title="不会发生碎片化"></a>不会发生碎片化</h5><p>GC 复制算法每次回收垃圾对象是，都是对整个一半的空间进行回收，不像 GC 标记 - 清除算法那样，会留下碎片化的内存空间。</p><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><h5 id="堆使用效率低下"><a href="#堆使用效率低下" class="headerlink" title="堆使用效率低下"></a>堆使用效率低下</h5><p>GC 复制算法把堆二等分，通常只能利用其中的一半来安排对象。也就是说，只有一半 堆能被使用。相比其他能使用整个堆的 GC 算法而言，可以说这是 GC 复制算法的一个重大 的缺陷。</p><h3 id="Compact-整理"><a href="#Compact-整理" class="headerlink" title="Compact(整理)"></a>Compact(整理)</h3><p>标记-清除-­整理算法 (Mark-­Sweep­-Compact)。标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。</p><p><img src="https://img.i7years.com/blog/03_03_GC-mark-sweep-compact.png" alt="03_03_GC-mark-sweep-compact"></p><h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><p>标记-清除-­整理算法 (Mark­Sweep­Compact)，将所有被标记的对象(存活对象)，迁移到内存空间的起始处, 消除了标记­清除算法的缺点。</p><h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><p>GC暂停时间会增加。因为需要将所有对象复制到另一个地方, 然后修改指向这些对象的引用。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://book.douban.com/subject/24722612/" target="_blank" rel="noopener">《JVM高级特性与最佳实践[第2版]》第3章节「垃圾收集器与内存分配策略」</a></li><li><a href="https://github.com/cncounter/gc-handbook" target="_blank" rel="noopener">https://github.com/cncounter/gc-handbook</a></li><li><a href="https://book.douban.com/subject/26821357/" target="_blank" rel="noopener">《垃圾回收的算法与实现》</a></li><li><a href="https://stackoverflow.com/questions/26029764/what-does-oop-maps-means-in-hotspot-vm-exactly" target="_blank" rel="noopener">what-does-oop-maps-means-in-hotspot-vm-exactly</a></li><li><a href="http://java-latte.blogspot.com/2013/08/garbage-collection-in-java.html" target="_blank" rel="noopener">http://java-latte.blogspot.com/2013/08/garbage-collection-in-java.html</a></li><li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-JVMGarbageCollection/index.html" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/java/j-lo-JVMGarbageCollection/index.html</a></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> GC </tag>
            
            <tag> JVM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GC基本概念]]></title>
      <url>/posts/jvm-gc-base-concept.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/pexels-photo-1269968.jpeg?imageslim" alt="pexels-photo-1269968"></p><p>在了解 <a href="https://wangwei.one/posts/396cfa32.html">GC算法</a> 之前，我们需要先来了解一些与算法有关的基本概念。</p><a id="more"></a><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>GC的定义</li><li>对象/头/域</li><li>指针</li><li>mutator</li><li>堆</li><li>活动对象/非活动对象</li><li>分配(allocation)</li><li>分块(chunk)</li><li>根(root)</li><li>吞吐量(throughput)</li><li>最大暂停时间</li><li>堆使用效率</li><li>访问局部性</li></ul><h2 id="GC的定义"><a href="#GC的定义" class="headerlink" title="GC的定义"></a>GC的定义</h2><p>GC 是 <code>Garbage Collection</code> 的简称，也就是垃圾收集</p><p><code>Garbage Collector</code>：垃圾收集器</p><p><code>Minor GC</code>：小型GC</p><p><code>Major GC</code>：大型GC</p><p><code>Full GC</code>：完全GC（为了清晰起见，一般直接译为 Full GC）</p><h2 id="对象-头-域"><a href="#对象-头-域" class="headerlink" title="对象/头/域"></a>对象/头/域</h2><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>在 GC 的世界中，对象表示的是“通过应用程序利用的<strong>数据的集合</strong>”。对象配置在内存空间里。GC 根据情况将配置好的对象进行移动或销毁操作。因此，对象是 GC 的基本单位。</p><p>对象由头（header）和域（field）构成。在对象内部，头之后存在 1 个及 1 个以上的域。如图1.1所示：</p><p><img src="https://img.i7years.com/blog/GC_Object.png" alt="GC_Object"></p><h4 id="头"><a href="#头" class="headerlink" title="头"></a>头</h4><p>用于保存对象本身信息，主要含有以下信息：</p><ul><li>对象的大小</li><li>对象的种类</li></ul><h4 id="域"><a href="#域" class="headerlink" title="域"></a>域</h4><p>对象使用者在对象中可访问的部分称为“域”。</p><p>域中的数据类型大致分为两种：</p><ul><li>指针：指针是指向内存空间中某块区域的值。</li><li>非指针：指的是在编程中直接使用值本身。例如：数值、字符以及真假值。</li></ul><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p>通过GC，对象会被销毁或保留，这时候起到关键作用的就是指针，因为GC是根据对象的指针指向去搜寻其他对象的，GC对于非指针不进行任何操作。</p><p>我们把图 1.2 中的 B 和 C 称为 A 的子对象。对某个对象的子对象进行某项处理是 GC 的基本操作。</p><p><img src="https://img.i7years.com/blog/GC_Pointer.png" alt="GC_Pointer"></p><h2 id="mutator"><a href="#mutator" class="headerlink" title="mutator"></a>mutator</h2><p>mutator，是“改变某物”的意思，那要改变什么呢？ 那就是GC对象间的引用关系，它的实体就是“应用程序”。<br>mutator进行的实际操作：</p><ul><li>生成对象</li><li>更新指针</li></ul><p>mutator在进行这些操作时，会同时为应用程序的用户进行一些处理，随着这些处理的增加，对象间的引用关系也会发生“改变”，随之，也会产生垃圾，负责回收这些垃圾的机制就是GC。</p><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p><a href="https://wangwei.one/posts/71c1df10.html">堆</a> 指的是用于动态（也就是执行程序时）存放对象的内存空间。当 mutator 申请存放对象时， 所需的内存空间就会从这个堆中被分配给 mutator。</p><p>GC 是管理堆中已分配对象的机制。在开始执行 mutator 前，GC 要分配用于堆的内存空间。 一旦开始执行 mutator，程序就会按照 mutator 的要求在堆中存放对象。等到堆被对象占满后， GC 就会启动，从而分配可用空间。如果不能分配足够的可用空间，一般情况下我们就要扩大堆。</p><p>我们把 <code>$heap_start</code> 定为指向堆首地址的指针，把 <code>$heap_end</code> 定为指向堆末尾下一个地址的指针。也就是说， <code>$heap_end</code> 等于 <code>$heap_start</code> + <code>HEAP_SIZE</code>。</p><p><img src="https://img.i7years.com/blog/GC_Heap.png" alt="GC_Heap"></p><h2 id="活动对象-非活动对象"><a href="#活动对象-非活动对象" class="headerlink" title="活动对象/非活动对象"></a>活动对象/非活动对象</h2><p>分配到内存空间中的对象中那些能通过 mutator 引用的对象称为“活动对象”。反之，那些不能通过程序引用的对象称为“非活动对象”。</p><p>GC 会保留活动对象，销毁非活动对象。当销毁非活动对象时，其原本占据的内 存空间会得到解放，供下一个要分配的新对象使用。</p><p><img src="https://img.i7years.com/blog/GC_Live_Dead.png" alt="GC_Live_Dead"></p><h2 id="分配-allocation"><a href="#分配-allocation" class="headerlink" title="分配(allocation)"></a>分配(allocation)</h2><p>分配（allocation）指的是在内存空间中分配对象。当 mutator 需要新对象时，就会向分配器（allocator）申请一个大小合适的空间。分配器则在堆的可用空间中找寻满足要求的空间， 返回给 mutator。</p><h2 id="分块-chunk"><a href="#分块-chunk" class="headerlink" title="分块(chunk)"></a>分块(chunk)</h2><p>初始状态下，堆被一个大的分块所占据。</p><p>然后，程序会根据 mutator 的要求把这个分块分割成合适的大小，作为（活动）对象使用。 活动对象不久后会转化为垃圾被回收。此时，这部分被回收的内存空间再次成为分块，为下次 被利用做准备。也就是说，内存里的各个区块都重复着分块→活动对象→垃圾（非活动对象）→ 分块→……这样的过程。</p><h2 id="根-root"><a href="#根-root" class="headerlink" title="根(root)"></a>根(root)</h2><p>在GC的世界里，指的是指向对象指针的”起点”。</p><p><img src="https://img.i7years.com/blog/GC_Root.png" alt="GC_Root"></p><h2 id="评价标准"><a href="#评价标准" class="headerlink" title="评价标准"></a>评价标准</h2><h3 id="吞吐量-throughput"><a href="#吞吐量-throughput" class="headerlink" title="吞吐量(throughput)"></a>吞吐量(throughput)</h3><p>吞吐量（throughput）指的是“在单位时间内的处理能力”。</p><p><img src="https://img.i7years.com/blog/GC_Throughput.png" alt="GC_Throughput"></p><p>在 mutator 整个执行过程中，GC 一共启动了 3 次，我们把花费的时间分别设为 A、B、C。 也就是说，GC 总共花费的时间为（A ＋ B ＋ C）。另一方面，我们前面提到过，以 GC 为对象 的堆大小是 HEAP_SIZE。 也就是说，在大小为 HEAP_SIZE 的堆进行内存管理，要花费的时长 为（A ＋ B ＋ C）。</p><p>因此，这种情况下 GC 的吞吐量为 <code>HEAP_SIZE /（A ＋ B ＋ C）</code>。</p><h3 id="最大暂停时间"><a href="#最大暂停时间" class="headerlink" title="最大暂停时间"></a>最大暂停时间</h3><p>最大暂停时间指的是“因执行 GC 而暂停执行 mutator 的最长时间”。图 1.7中最大暂停时间是 A～C 的最大值，也就是 B。</p><p>不管尝试哪种 GC 算法，我们都会发现较大 的吞吐量和较短的最大暂停时间不可兼得。所以应根据执行的应用所重视的指标的不同，来 分别采用不同的 GC 算法。</p><h3 id="堆使用效率"><a href="#堆使用效率" class="headerlink" title="堆使用效率"></a>堆使用效率</h3><p>左右堆使用效率的因素有两个：头的大小 和 堆的用法。</p><h4 id="头的大小"><a href="#头的大小" class="headerlink" title="头的大小"></a>头的大小</h4><p>在堆中堆放的信息越多，GC 的效率也就越高，吞吐量也就随之得到改善。 但毋庸置疑，头越小越好。因此为了执行 GC，需要把在头中堆放的信息控制在最小限度。</p><h4 id="堆的用法"><a href="#堆的用法" class="headerlink" title="堆的用法"></a>堆的用法</h4><p>根据堆的用法，堆使用效率也会出现巨大的差异。举个例子，GC 复制算法中将 堆二等分，每次只使用一半，交替进行，因此总是只能利用堆的一半。相对而言，GC 标记 -清除算法和引用计数法就能利用整个堆。</p><blockquote><p>堆使用效率和吞吐量，以及最大暂停时间不可兼得。</p><p>可用的堆越大，GC 运行越快；相反，越想有效地利用有限的堆，GC 花费的时间就越长。</p></blockquote><h3 id="访问局部性"><a href="#访问局部性" class="headerlink" title="访问局部性"></a>访问局部性</h3><p>PC 上有 4 种存储器，分别是寄存器、缓存、内存、辅助存储器。</p><p><img src="https://img.i7years.com/blog/GC_Storage.png" alt="GC_Storage"></p><p>一般我们会把所有的数据都放在内存里，当 CPU 访问数据时，仅把 要使用的数据从内存读取到缓存。与此同时，我们还将它附近的所有数据都读取到缓存中， 从而压缩读取数据所需要的时间。</p><p>具有引用关系的对象之间通常很可能存在连续访问的情况。这在多数程序中 都很常见，称为“访问的局部性”。考虑到访问的局部性，把具有引用关系的对象安排在堆 中较近的位置，就能提高在缓存中读取到想利用的数据的概率，令 mutator 高速运行。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://book.douban.com/subject/26821357/" target="_blank" rel="noopener">《垃圾回收的算法与实现》</a></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> GC </tag>
            
            <tag> JVM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java8 MetaSpace介绍]]></title>
      <url>/posts/java8-jvm-metaSpace.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/pexels-photo-1143758.jpeg" alt="pexels-photo-1143758"></p><p><a href="https://wangwei.one/posts/71c1df10.html">前面</a> 我们学习了Java7的内存模型，重点了解了它的Runtime Data Area，今天我们要来学习一下Java8 HotSpot(TM) VM内存模型，看看它与Java7 VM存在哪些差异。</p><a id="more"></a><p>与Java7相比较，Java8 VM的一个重大更新：<strong>完全移除永久代（PermGen），取而代之的为元空间（Metaspace）</strong>。</p><p><img src="https://img.i7years.com/blog/Java8 VM MetaSpace.png" alt="Java8 VM MetaSpace"></p><h2 id="为什么要移除PermGen"><a href="#为什么要移除PermGen" class="headerlink" title="为什么要移除PermGen"></a>为什么要移除PermGen</h2><blockquote><p>来源：<a href="http://openjdk.java.net/jeps/122" target="_blank" rel="noopener">http://openjdk.java.net/jeps/122</a></p></blockquote><p>Jon Masamitsu 对此的解释如下：</p><blockquote><p>A goal for removing perm gen was so that users do not have to think about correctly sizing it.</p><p>Set MetaspaceSize to a value larger than the default, if you know that your applications needs more space for class data. Setting it to a larger size will avoid some number of GC’s at startup. It is not necessary and I do not particularly recommend it unless you want to avoid as many GC’s as possible.</p><p>Set MaxMetaspaceSize if you want to limit the space for class data. You might want to do this if you suspect you are leaking classloaders and want the application to stop before it uses up too much native memory. Another case might be where you have multiple applications running on a server and you want to limit how much space each uses for class data.</p></blockquote><p>PermGen空间的大小在JVM启动时就已经分配好了，但是随着动态类加载的情况越来越多，如果设置的太小，则容易出现OOM的异常，设置的太大，则容易造成空间浪费。</p><p>而Metaspace空间的容量则会根据应用程序在运行时的需求动态调整大小，省得为PermGen的大小分配操碎了心。</p><h2 id="有哪些变化"><a href="#有哪些变化" class="headerlink" title="有哪些变化"></a>有哪些变化</h2><blockquote><p>来源：<a href="http://mail.openjdk.java.net/pipermail/hotspot-dev/2012-September/006679.html" target="_blank" rel="noopener">http://mail.openjdk.java.net/pipermail/hotspot-dev/2012-September/006679.html</a></p></blockquote><h5 id="PermGen-情况"><a href="#PermGen-情况" class="headerlink" title="PermGen 情况"></a>PermGen 情况</h5><ul><li>PermGen 被完全移除，对应的控制参数 <code>PermSize</code> 和 <code>MaxPermSize</code> 也变得无效。</li></ul><h5 id="Metaspace内存分配模型"><a href="#Metaspace内存分配模型" class="headerlink" title="Metaspace内存分配模型"></a>Metaspace内存分配模型</h5><ul><li><p>类的元数据信息（metadata）不再是存储在连续的堆空间上，而是移动到叫做“Metaspace”的本地内存（Native memory）中。PermGen中剩下的一些杂项数据已移至Java Heap中。</p></li><li><p>用于描述类元数据的类(klasses)已被删除（klassKlass及其派生类）。</p></li></ul><h5 id="Metaspace空间容量"><a href="#Metaspace空间容量" class="headerlink" title="Metaspace空间容量"></a>Metaspace空间容量</h5><ul><li>默认情况下，类元数据分配受到可用的本机内存总容量的限制（容量依然取决于你使用32位JVM还是64位操作系统的虚拟内存的可用性）。</li><li>可以使用一个新的参数 (<code>MaxMetaspaceSize</code>)来限制用于类元数据的本地内存。如果没有特别指定，元空间将会根据应用程序在运行时的需求动态调整大小。</li></ul><h5 id="Metaspace垃圾回收"><a href="#Metaspace垃圾回收" class="headerlink" title="Metaspace垃圾回收"></a>Metaspace垃圾回收</h5><ul><li>当class metadata的使用的内存达到<code>MetaspaceSize</code>(32位clientVM默认12Mbytes，32位ServerVM默认是16Mbytes)时就会对死亡的类加载器和类进行垃圾收集。 设置<code>MetaspaceSize</code>为一个较高的值可以推迟垃圾收集的发生。</li><li>为了限制垃圾回收的频率和延迟，适当的监控和调优元空间是非常有必要的。元空间过多的垃圾收集可能表示类加载器内存泄漏或对你的应用程序来说空间太小了。</li></ul><h5 id="Java-Heap影响"><a href="#Java-Heap影响" class="headerlink" title="Java Heap影响"></a>Java Heap影响</h5><ul><li>一些杂乱的数据从PermGen移到了Java Heap，这意味着升级到JDK8之后，Java Heap的大小会有明显的增加。</li></ul><h2 id="Metaspace的组成"><a href="#Metaspace的组成" class="headerlink" title="Metaspace的组成"></a>Metaspace的组成</h2><blockquote><p>来源：<a href="http://lovestblog.cn/blog/2016/10/29/metaspace/" target="_blank" rel="noopener">http://lovestblog.cn/blog/2016/10/29/metaspace/</a></p></blockquote><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><ul><li>Klass Metaspace</li><li>NoKlass Metaspace</li></ul><h3 id="组成说明"><a href="#组成说明" class="headerlink" title="组成说明"></a>组成说明</h3><ul><li>Klass Metaspace就是用来存klass的，klass是我们熟知的class文件在jvm里的运行时数据结构，不过有点要提的是我们看到的类似A.class其实是存在heap里的，是java.lang.Class的一个对象实例。这块内存是紧接着Heap的，和我们之前的perm一样，这块内存大小可通过<code>-XX:CompressedClassSpaceSize</code>参数来控制，这个参数默认是1G，但是这块内存也可以没有，假如没有开启压缩指针就不会有这块内存，这种情况下klass都会存在NoKlass Metaspace里，另外如果我们把-Xmx设置大于32G的话，其实也是没有这块内存的，因为会这么大内存会关闭压缩指针开关。还有就是这块内存最多只会存在一块。</li><li>NoKlass Metaspace专门来存klass相关的其他的内容，比如method，constantPool等，这块内存是由多块内存组合起来的，所以可以认为是不连续的内存块组成的。这块内存是必须的，虽然叫做NoKlass Metaspace，但是也其实可以存klass的内容，上面已经提到了对应场景。</li><li>Klass Metaspace和NoKlass Mestaspace都是所有classloader共享的，所以类加载器要分配内存，但是每个类加载器都有一个SpaceManager，来管理属于这个类加载的内存小块。如果Klass Metaspace用完了，那就会OOM了，不过一般情况下不会，NoKlass Mestaspace是由一块块内存慢慢组合起来的，在没有达到限制条件的情况下，会不断加长这条链，让它可以持续工作。</li></ul><h2 id="Metaspace的几个参数"><a href="#Metaspace的几个参数" class="headerlink" title="Metaspace的几个参数"></a>Metaspace的几个参数</h2><p>如果我们要改变metaspace的一些行为，我们一般会对其相关的一些参数做调整，因为metaspace的参数本身不是很多，所以我这里将涉及到的所有参数都做一个介绍，也许好些参数大家都是有误解的</p><ul><li>UseLargePagesInMetaspace</li><li>InitialBootClassLoaderMetaspaceSize</li><li>MetaspaceSize</li><li>MaxMetaspaceSize</li><li>CompressedClassSpaceSize</li><li>MinMetaspaceExpansion</li><li>MaxMetaspaceExpansion</li><li>MinMetaspaceFreeRatio</li><li>MaxMetaspaceFreeRatio</li></ul><p><strong>UseLargePagesInMetaspace</strong></p><p>默认false，这个参数是说是否在metaspace里使用LargePage，一般情况下我们使用4KB的page size，这个参数依赖于UseLargePages这个参数开启，不过这个参数我们一般不开。</p><p><strong>InitialBootClassLoaderMetaspaceSize</strong></p><p>64位下默认4M，32位下默认2200K，metasapce前面已经提到主要分了两大块，Klass Metaspace以及NoKlass Metaspace，而NoKlass Metaspace是由一块块内存组合起来的，这个参数决定了NoKlass Metaspace的第一个内存Block的大小，即2*InitialBootClassLoaderMetaspaceSize，同时为bootstrapClassLoader的第一块内存chunk分配了InitialBootClassLoaderMetaspaceSize的大小</p><p><strong>MetaspaceSize</strong></p><p>默认20.8M左右(x86下开启c2模式)，主要是控制metaspaceGC发生的初始阈值，也是最小阈值，但是触发metaspaceGC的阈值是不断变化的，与之对比的主要是指Klass Metaspace与NoKlass Metaspace两块committed的内存和。</p><p><strong>MaxMetaspaceSize</strong></p><p>默认基本是无穷大，但是我还是建议大家设置这个参数，因为很可能会因为没有限制而导致metaspace被无止境使用(一般是内存泄漏)而被OS Kill。这个参数会限制metaspace(包括了Klass Metaspace以及NoKlass Metaspace)被committed的内存大小，会保证committed的内存不会超过这个值，一旦超过就会触发GC，这里要注意和MaxPermSize的区别，MaxMetaspaceSize并不会在jvm启动的时候分配一块这么大的内存出来，而MaxPermSize是会分配一块这么大的内存的。</p><p><strong>CompressedClassSpaceSize</strong></p><p>默认1G，这个参数主要是设置Klass Metaspace的大小，不过这个参数设置了也不一定起作用，前提是能开启压缩指针，假如-Xmx超过了32G，压缩指针是开启不来的。如果有Klass Metaspace，那这块内存是和Heap连着的。</p><p><strong>MinMetaspaceExpansion</strong></p><p>MinMetaspaceExpansion和MaxMetaspaceExpansion这两个参数或许和大家认识的并不一样，也许很多人会认为这两个参数不就是内存不够的时候，然后扩容的最小大小吗？其实不然</p><p>这两个参数和扩容其实并没有直接的关系，也就是并不是为了增大committed的内存，而是为了增大触发metaspace GC的阈值</p><p>这两个参数主要是在比较特殊的场景下救急使用，比如gcLocker或者<code>should_concurrent_collect</code>的一些场景，因为这些场景下接下来会做一次GC，相信在接下来的GC中可能会释放一些metaspace的内存，于是先临时扩大下metaspace触发GC的阈值，而有些内存分配失败其实正好是因为这个阈值触顶导致的，于是可以通过增大阈值暂时绕过去</p><p>默认332.8K，增大触发metaspace GC阈值的最小要求。假如我们要救急分配的内存很小，没有达到MinMetaspaceExpansion，但是我们会将这次触发metaspace GC的阈值提升MinMetaspaceExpansion，之所以要大于这次要分配的内存大小主要是为了防止别的线程也有类似的请求而频繁触发相关的操作，不过如果要分配的内存超过了MaxMetaspaceExpansion，那MinMetaspaceExpansion将会是要分配的内存大小基础上的一个增量</p><p><strong>MaxMetaspaceExpansion</strong></p><p>默认5.2M，增大触发metaspace GC阈值的最大要求。假如说我们要分配的内存超过了MinMetaspaceExpansion但是低于MaxMetaspaceExpansion，那增量是MaxMetaspaceExpansion，如果超过了MaxMetaspaceExpansion，那增量是MinMetaspaceExpansion加上要分配的内存大小</p><p>注：每次分配只会给对应的线程一次扩展触发metaspace GC阈值的机会，如果扩展了，但是还不能分配，那就只能等着做GC了</p><p><strong>MinMetaspaceFreeRatio</strong></p><p>MinMetaspaceFreeRatio和下面的MaxMetaspaceFreeRatio，主要是影响触发metaspaceGC的阈值</p><p>默认40，表示每次GC完之后，假设我们允许接下来metaspace可以继续被commit的内存占到了被commit之后总共committed的内存量的MinMetaspaceFreeRatio%，如果这个总共被committed的量比当前触发metaspaceGC的阈值要大，那么将尝试做扩容，也就是增大触发metaspaceGC的阈值，不过这个增量至少是MinMetaspaceExpansion才会做，不然不会增加这个阈值</p><p>这个参数主要是为了避免触发metaspaceGC的阈值和gc之后committed的内存的量比较接近，于是将这个阈值进行扩大</p><p>一般情况下在gc完之后，如果被committed的量还是比较大的时候，换个说法就是离触发metaspaceGC的阈值比较接近的时候，这个调整会比较明显</p><p>注：这里不用gc之后used的量来算，主要是担心可能出现committed的量超过了触发metaspaceGC的阈值，这种情况一旦发生会很危险，会不断做gc，这应该是jdk8在某个版本之后才修复的bug</p><p><strong>MaxMetaspaceFreeRatio</strong></p><p>默认70，这个参数和上面的参数基本是相反的，是为了避免触发metaspaceGC的阈值过大，而想对这个值进行缩小。这个参数在gc之后committed的内存比较小的时候并且离触发metaspaceGC的阈值比较远的时候，调整会比较明显</p><h2 id="MetaSpace-与-PermGen-运行时比较"><a href="#MetaSpace-与-PermGen-运行时比较" class="headerlink" title="MetaSpace 与 PermGen 运行时比较"></a>MetaSpace 与 PermGen 运行时比较</h2><p>前面提到过，MetaSpace与PermGen最主要的区别就在于，内存空间的是否能够自动扩容上，下面我们来分别演示一下MetaSpace与PermGen的GC的表现形式之间的区别。示例代码 <a href="https://attach.i7years.com/code/Java8_Metaspace.zip" target="_blank" rel="noopener">下载</a></p><h4 id="JDK-1-7-64-bit-–-PermGen-depletion"><a href="#JDK-1-7-64-bit-–-PermGen-depletion" class="headerlink" title="JDK 1.7 @64-bit – PermGen depletion"></a>JDK 1.7 @64-bit – PermGen depletion</h4><blockquote><p>演示异常：ERROR: java.lang.OutOfMemoryError: PermGen space</p></blockquote><p>VM 参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-verbose:gc -Xms1024M -Xmx1024M -XX:MaxPermSize=<span class="number">128</span>m -XX:PermSize=<span class="number">128</span>m -XX:+PrintGCDetails -Xloggc:~/Desktop/gc.log</span><br></pre></td></tr></table></figure><p>JVisualVM监控显示：</p><p><img src="https://img.i7years.com/blog/JVisualVM_1.png" alt="Java8_MetaSpace_1"></p><p>GC日志：</p><p><img src="https://img.i7years.com/blog/gc_1.png" alt="gc_1"></p><h4 id="JDK-1-8-64-bit-–-Metaspace-dynamic-re-size"><a href="#JDK-1-8-64-bit-–-Metaspace-dynamic-re-size" class="headerlink" title="JDK 1.8 @64-bit – Metaspace dynamic re-size"></a>JDK 1.8 @64-bit – Metaspace dynamic re-size</h4><blockquote><p>演示 metaspace 空间不断动态调整的过程</p></blockquote><p>VM 参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-verbose:gc -Xms1024M -Xmx1024M -XX:+PrintGCDetails -Xloggc:~/Desktop/gc.log</span><br></pre></td></tr></table></figure><p>JVisualVM监控显示：</p><p><img src="https://img.i7years.com/blog/JVisualVM_2.png" alt="JVisualVM_2"></p><p>GC日志：</p><p><img src="https://img.i7years.com/blog/gc_2.png" alt="gc_2"></p><h4 id="JDK-1-8-64-bit-–-Metaspace-depletion"><a href="#JDK-1-8-64-bit-–-Metaspace-depletion" class="headerlink" title="JDK 1.8 @64-bit – Metaspace depletion"></a>JDK 1.8 @64-bit – Metaspace depletion</h4><blockquote><p>演示异常：ERROR: java.lang.OutOfMemoryError: Metadata space</p></blockquote><p>VM 参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-verbose:gc -Xms1024M -Xmx1024M -XX:MaxMetaspaceSize=<span class="number">128</span>m -XX:+PrintGCDetails -Xloggc:~/Desktop/gc.log</span><br></pre></td></tr></table></figure><p>JVisualVM监控显示：</p><p><img src="https://img.i7years.com/blog/JVisualVM_3.png" alt="JVisualVM_3"></p><p>GC日志：</p><p><img src="https://img.i7years.com/blog/gc_3.png" alt="gc_3"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><p><a href="http://openjdk.java.net/jeps/122" target="_blank" rel="noopener">http://openjdk.java.net/jeps/122</a></p></li><li><p><a href="https://www.infoq.com/news/2013/03/java-8-permgen-metaspace" target="_blank" rel="noopener">https://www.infoq.com/news/2013/03/java-8-permgen-metaspace</a></p></li><li><a href="http://javaeesupportpatterns.blogspot.com/2013/02/java-8-from-permgen-to-metaspace.html" target="_blank" rel="noopener">http://javaeesupportpatterns.blogspot.com/2013/02/java-8-from-permgen-to-metaspace.html</a></li><li><a href="https://dzone.com/articles/java-8-permgen-metaspace" target="_blank" rel="noopener">https://dzone.com/articles/java-8-permgen-metaspace</a></li><li><a href="http://www.infoq.com/cn/articles/Java-PERMGEN-Removed" target="_blank" rel="noopener">http://www.infoq.com/cn/articles/Java-PERMGEN-Removed</a></li><li><a href="http://java-latte.blogspot.com/2014/03/metaspace-in-java-8.html" target="_blank" rel="noopener">http://java-latte.blogspot.com/2014/03/metaspace-in-java-8.html</a></li><li><a href="http://m.www.cnblogs.com/duanxz/p/3520829.html" target="_blank" rel="noopener">http://m.www.cnblogs.com/duanxz/p/3520829.html</a></li><li><a href="https://stackoverflow.com/questions/27131165/what-is-the-difference-between-permgen-and-metaspace" target="_blank" rel="noopener">https://stackoverflow.com/questions/27131165/what-is-the-difference-between-permgen-and-metaspace</a></li><li><a href="http://lovestblog.cn/blog/2016/10/29/metaspace/" target="_blank" rel="noopener">http://lovestblog.cn/blog/2016/10/29/metaspace/</a></li><li><a href="https://juejin.im/entry/5b74fcbf6fb9a0097f0c2a95" target="_blank" rel="noopener">https://juejin.im/entry/5b74fcbf6fb9a0097f0c2a95</a></li><li><a href="https://dzone.com/articles/understanding-the-java-memory-model-and-the-garbag" target="_blank" rel="noopener">https://dzone.com/articles/understanding-the-java-memory-model-and-the-garbag</a></li><li><a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html</a></li><li><a href="http://www.importnew.com/14933.html" target="_blank" rel="noopener">http://www.importnew.com/14933.html</a></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JVM </tag>
            
            <tag> Java8 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java7 HotSpot(TM) VM内存模型]]></title>
      <url>/posts/java7-jvm-memory-model.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/pexels-photo-1532704.jpeg" alt="pexels-photo-1532704"></p><p>本文我们来学习一下 Java7 HotSpot(TM) VM 内存模型。</p><a id="more"></a><h2 id="JVM-Architecture"><a href="#JVM-Architecture" class="headerlink" title="JVM Architecture"></a>JVM Architecture</h2><p><img src="https://img.i7years.com/blog/JVM%20Architecture.png" alt="JVM Architecture"></p><p>我们先来了解一下JVM的整体架构体系，JVM主要分三大子系统：Class Loader SubSystem、Runtime Data Area、Execution Engine 。</p><h4 id="Class-Loader-SubSystem"><a href="#Class-Loader-SubSystem" class="headerlink" title="Class Loader SubSystem"></a>Class Loader SubSystem</h4><p>Java的动态类加载功能由类加载器子系统处理。 它在<strong>运行时</strong>第一次引用类时加载，链接和初始化类，而不是在编译时引用。 它执行三个主要功能，如加载，链接和初始化。</p><h4 id="Execution-Engine"><a href="#Execution-Engine" class="headerlink" title="Execution Engine"></a>Execution Engine</h4><p>被分配给运行时数据区域中的字节码将被执行引擎来执行。 执行引擎读取字节代码并挨个挨个执行。</p><p>本篇将重点介绍 Rumtime Date Area，至于Class Loader SubSystem和Execution Engine将放在后期的文章中去讲解。</p><h2 id="Runtime-Data-Area"><a href="#Runtime-Data-Area" class="headerlink" title="Runtime Data Area"></a>Runtime Data Area</h2><p>Java虚拟机定义了在程序执行期间使用的各种运行时数据区域。 其中一些数据区域是随着Java虚拟机启动而创建，随着Java虚拟机退出而销毁。其他数据区域则是依附于每个单独的线程，它们随着线程创建而创建，随着线程 的退出而销毁。</p><p>运行时数据区，是JVM内存管理的主要区域。Java虚拟机在程序执行的过程中，会把它所管理的内存划分为若干个不同的数据区域。主要分为：</p><ul><li>Program Counter Register：程序计数器</li><li>Java Virtual Machine Stacks：Java虚拟机栈</li><li>Native Method Stack：本地方法栈</li><li>Java Heap：Java堆</li><li>Method Area：方法区</li></ul><p><img src="https://img.i7years.com/blog/JVM_Internal_Architecture.png" alt="Runtime Data Area"></p><h3 id="控制参数"><a href="#控制参数" class="headerlink" title="控制参数"></a>控制参数</h3><p>每个区域的内存大小可以通过以下参数进行分配</p><p><img src="https://img.i7years.com/blog/Runtime%20Date%20Area%20Allocation.png" alt="Runtime data area allocation"></p><p>控制参数：</p><ul><li><code>-Xms</code> 设置堆的最小空间大小。</li><li><code>-Xmx</code> 设置堆的最大空间大小。</li><li><code>-XX:NewSize</code> 设置新生代最小空间大小。</li><li><code>-XX:MaxNewSize</code> 设置新生代最大空间大小。</li><li><code>-XX:PermSize</code> 设置永久代最小空间大小。</li><li><code>-XX:MaxPermSize</code> 设置永久代最大空间大小。</li><li><code>-Xss</code> 设置每个线程的堆栈大小。</li></ul><h3 id="内存分配查询"><a href="#内存分配查询" class="headerlink" title="内存分配查询"></a>内存分配查询</h3><p>另外，我们可以使用如下命令查询各个操作系统默认分配的内存大小：</p><p><strong>Ubuntu &amp; RedHat</strong>：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ java -XX:+PrintFlagsFinal -version | grep -iE <span class="string">'HeapSize|PermSize|ThreadStackSize'</span></span><br></pre></td></tr></table></figure><p><strong>Windows</strong>：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; java -XX:+PrintFlagsFinal -version | findstr /i <span class="string">"HeapSize PermSize ThreadStackSize"</span></span><br></pre></td></tr></table></figure><p><strong>MacOS</strong>：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ java -XX:+PrintFlagsFinal -version | grep -iE <span class="string">'heapsize|permsize|threadstacksize'</span></span><br></pre></td></tr></table></figure><p>例如，我的Mac返回结果如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    uintx AdaptivePermSizeWeight                    = <span class="number">20</span>              &#123;product&#125;</span><br><span class="line">     intx CompilerThreadStackSize                   = <span class="number">0</span>               &#123;pd product&#125;</span><br><span class="line">    uintx ErgoHeapSizeLimit                         = <span class="number">0</span>               &#123;product&#125;</span><br><span class="line">    uintx HeapSizePerGCThread                       = <span class="number">87241520</span>        &#123;product&#125;</span><br><span class="line">    uintx InitialHeapSize                          := <span class="number">134217728</span>       &#123;product&#125;</span><br><span class="line">    uintx LargePageHeapSizeThreshold                = <span class="number">134217728</span>       &#123;product&#125;</span><br><span class="line">    uintx MaxHeapSize                              := <span class="number">2147483648</span>      &#123;product&#125;</span><br><span class="line">    uintx MaxPermSize                               = <span class="number">85983232</span>        &#123;pd product&#125;</span><br><span class="line">    uintx PermSize                                  = <span class="number">21757952</span>        &#123;pd product&#125;</span><br><span class="line">     intx ThreadStackSize                           = <span class="number">1024</span>            &#123;pd product&#125;</span><br><span class="line">     intx VMThreadStackSize                         = <span class="number">1024</span>            &#123;pd product&#125;</span><br><span class="line">java version <span class="string">"1.7.0_72"</span></span><br><span class="line">Java(TM) SE Runtime Environment (build <span class="number">1.7</span>.<span class="number">0</span>_72-b14)</span><br><span class="line">Java HotSpot(TM) <span class="number">64</span>-Bit Server VM (build <span class="number">24.72</span>-b04, mixed mode)</span><br></pre></td></tr></table></figure><h2 id="Program-Counter-Register"><a href="#Program-Counter-Register" class="headerlink" title="Program Counter Register"></a>Program Counter Register</h2><ul><li>当前线程所执行的字节码的行号解释器。字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。</li><li>此为线程的私有内存区域。任何一个确定的时刻，一个处理器或者内核，都只会执行一条线程中的指令，为了确保线程切换后还能回到正确的执行位置，每一个线程都有一个独立的程序计数器，各个线程之间计数器互不影响，独立存储。</li><li>此内存区域是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。</li></ul><h2 id="Java-Virtual-Machine-Stack"><a href="#Java-Virtual-Machine-Stack" class="headerlink" title="Java Virtual Machine Stack"></a>Java Virtual Machine Stack</h2><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ul><li>线程私有，生命周期与线程的一致。</li><li>虚拟机栈描述的是Java方法执行的内存模型：每个方法在执行的同时都会创建一个<strong>栈帧（Stack Frame）</strong>用于存储<strong>局部变量表</strong>、<strong>操作数栈</strong>、<strong>动态链接</strong>、<strong>方法出口</strong>等信息。每一个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。</li><li><strong>局部变量表</strong>存放了编译期可知的各种基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference类型，它不等同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）和returnAddress类型（指向了一条字节码指令的地址）。</li><li>局部变量表所需的内存空间在<strong>编译期间完成分配</strong>，当进入一个方法时，这个方法需要在帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。</li></ul><h4 id="大小设置"><a href="#大小设置" class="headerlink" title="大小设置"></a>大小设置</h4><p>Java虚拟机栈的默认大小与运行的操作系统有关：</p><table><thead><tr><th>Platform</th><th>Default</th></tr></thead><tbody><tr><td>Windows IA32</td><td>64 KB</td></tr><tr><td>Linux IA32</td><td>128 KB</td></tr><tr><td>Windows x86_64</td><td>128 KB</td></tr><tr><td>Linux x86_64</td><td>256 KB</td></tr><tr><td>Windows IA64</td><td>320 KB</td></tr><tr><td>Linux IA64</td><td>1024 KB (1 MB)</td></tr><tr><td>Solaris Sparc</td><td>512 KB</td></tr></tbody></table><p>我们可以通过 <code>-Xss&lt;size&gt;</code> 来设置Java虚拟机栈大小，例如：-Xss128k，则大小为128k。</p><h4 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h4><h5 id="StackOverflowError"><a href="#StackOverflowError" class="headerlink" title="StackOverflowError"></a>StackOverflowError</h5><p>如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常。</p><p>如下例子，通过限制虚拟机栈的大小，并产生大量的局部变量，以此来增加此方法帧中的本地变量表长度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thinkingjava;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * VM args: -Xss:200k</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaVMStackSOF</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> stackLength = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stackLeak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stackLength++;</span><br><span class="line">        stackLeak();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JavaVMStackSOF oom = <span class="keyword">new</span> JavaVMStackSOF();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            oom.stackLeak();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"stack length:"</span> + oom.stackLength);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 内容输出：</span></span><br><span class="line">Exception in thread <span class="string">"main"</span> java.lang.StackOverflowError</span><br><span class="line">stack length:<span class="number">1239</span></span><br><span class="line">	at com.thinkingjava.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:<span class="number">11</span>)</span><br><span class="line">	at com.thinkingjava.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>在单线程的情况下，无论是栈容量太大，还是虚拟机内存太小，当内存无法分配时，都会抛出StackOverflowError异常。</p><h5 id="OutOfMemoryError"><a href="#OutOfMemoryError" class="headerlink" title="OutOfMemoryError"></a>OutOfMemoryError</h5><p>如果虚拟机栈可以动态扩展（当前大部分的Java虚拟机都可动态扩展，只不过Java虚拟机规范中也允许固定长度的虚拟机栈），如果扩展时无法申请到足够的内存，就会抛出OutOfMemoryError异常。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">栈内存大小 = 进程的内存大小 - 堆内存大小(-Xmx) - 方法区内存大小(-XX:MaxPermSize)</span><br></pre></td></tr></table></figure><p>由于操作系统给每一个进程的内存是有限制，除去Java堆内存大小（Xmx）和方法区的内存大小（MaxPermSize），剩余的内容就归Java虚拟机栈和本地方法栈分配了，每个线程可分配的栈容量越大，那么所能够产生的线程数则越少。建立线程越多，则越容易把内存消耗掉。</p><p>如果是建立过多线程导致的内存溢出，在不能减少线程数或者更换64位虚拟机的情况下，就只能通过减少最大堆和减少栈容量来换取更多的线程。</p><p>如下例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thinkingjava;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaVMStackOOM</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(++count);</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">10000000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="number">2032</span></span><br><span class="line">    </span><br><span class="line">Exception in thread <span class="string">"main"</span> java.lang.OutOfMemoryError: unable to create <span class="keyword">new</span> <span class="keyword">native</span> thread</span><br><span class="line">	at java.lang.Thread.start0(Native Method)</span><br><span class="line">	at java.lang.Thread.start(Thread.java:<span class="number">714</span>)</span><br><span class="line">	at com.thinkingjava.JavaVMStackOOM.main(JavaVMStackOOM.java:<span class="number">12</span>)</span><br></pre></td></tr></table></figure><h2 id="Native-Method-Stack"><a href="#Native-Method-Stack" class="headerlink" title="Native Method Stack"></a>Native Method Stack</h2><ul><li>本地方法栈与Java虚拟机栈类似，区别在于 Java虚拟机栈为Java方法服务，而本地方法栈为Native方法服务。</li><li>与虚拟机栈一样，本地方法栈区域也会抛出StackOverflowError和OutOfMemoryError异常。</li></ul><h2 id="Java-Heap"><a href="#Java-Heap" class="headerlink" title="Java Heap"></a>Java Heap</h2><p>Java堆（Java Heap）主要用于所有<strong>对象实例与数组</strong>的分配，是Java虚拟机所管理的内存当中最大的一块。</p><blockquote><p>随着JIT编译器的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化发生，所有的对象都分配在堆上也渐渐变得不是那么“绝对”了。</p></blockquote><p>Java堆是垃圾收集器管理的主要区域，因此很多时候也被称做“GC堆”（Garbage Collected Heap）。</p><p>Java堆空间可以分为如下几个部分：</p><ul><li><strong>Young Generation</strong>（新生代）：是所有新对象分配和老化的地方<ul><li><strong>Eden Space</strong>（伊甸区）：最初为大多数对象分配内存的地方</li><li><strong>Survivor Space</strong>（幸存者区）：Eden Space进行Minor GC后幸存下来的对象存放的地方</li></ul></li><li><strong>Tenured/Old Generation</strong>（老年代）：Survivor Space进行Major GC后幸存下来的对象存放的地方</li></ul><p><img src="https://img.i7years.com/blog/Java_Heap.png" alt="Java_Heap"></p><h3 id="异常-1"><a href="#异常-1" class="headerlink" title="异常"></a>异常</h3><p>如果在堆中没有内存完成实例分配时，并且堆再也无法扩展时，将会抛出 OOM 异常。</p><blockquote><p>将堆的最小值-Xms参数与最大值-Xmx参数设置为一样即可避免堆自动扩展</p></blockquote><p>如下例子，不断地创造对象，最终导致Java堆内存溢出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thinkingjava;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * VM Args：-Xms20m -Xmx20m -XX:+HeapDumpOnOutOfMemoryError</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapOOM</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapObject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;HeapObject&gt; heapObjectList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            heapObjectList.add(<span class="keyword">new</span> HeapObject());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 日志输出：</span></span><br><span class="line">java.lang.OutOfMemoryError: Java heap space</span><br><span class="line">Dumping heap to java_pid22301.hprof ...</span><br><span class="line">Heap dump file created [<span class="number">27600189</span> bytes in <span class="number">0.203</span> secs]</span><br><span class="line">Exception in thread <span class="string">"main"</span> java.lang.OutOfMemoryError: Java heap space</span><br><span class="line">	at java.util.Arrays.copyOf(Arrays.java:<span class="number">2245</span>)</span><br><span class="line">	at java.util.Arrays.copyOf(Arrays.java:<span class="number">2219</span>)</span><br><span class="line">	at java.util.ArrayList.grow(ArrayList.java:<span class="number">242</span>)</span><br><span class="line">	at java.util.ArrayList.ensureExplicitCapacity(ArrayList.java:<span class="number">216</span>)</span><br><span class="line">	at java.util.ArrayList.ensureCapacityInternal(ArrayList.java:<span class="number">208</span>)</span><br><span class="line">	at java.util.ArrayList.add(ArrayList.java:<span class="number">440</span>)</span><br><span class="line">	at com.thinkingjava.HeapOOM.main(HeapOOM.java:<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="Method-Area-Non-Heap"><a href="#Method-Area-Non-Heap" class="headerlink" title="Method Area(Non-Heap)"></a>Method Area(Non-Heap)</h2><p>由于该区域使用的是永久代GC收集方法来实现，所以也称为”永久代”（Permanent Generation），用于存储已被虚拟机加载的<strong>类信息</strong>、<strong>常量</strong>、<strong>静态变量</strong>、<strong>即时编译器编译后的代码</strong>等数据。</p><p>垃圾回收在这个区域较少出现，但这个区域的数据并非永久存在，这个区域的内存回收主要目标是针对常量池的回收和对类型的卸载。</p><h3 id="异常-2"><a href="#异常-2" class="headerlink" title="异常"></a>异常</h3><p>当方法区无法满足内存分配的需求时，将会抛出OutOfMemoryError异常。下面例子，运用cblib动态代理技术，产生大量的类型，导致OOM异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaMethodOOM</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OOMObject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">            enhancer.setSuperclass(OOMObject.class);</span><br><span class="line">            enhancer.setUseCache(<span class="keyword">false</span>);</span><br><span class="line">            enhancer.setCallback(<span class="keyword">new</span> MethodInterceptor() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> methodProxy.invoke(o, objects);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            enhancer.create();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异常输出：</span></span><br><span class="line">Exception in thread <span class="string">"main"</span> </span><br><span class="line">Exception: java.lang.OutOfMemoryError thrown from the UncaughtExceptionHandler in thread <span class="string">"main"</span></span><br></pre></td></tr></table></figure><h2 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h2><p>运行时常量池（Runtime Constant Pool）是方法区的一部分。Class文件除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池（Constant Pool Table），用于存放编译期生成的各种<strong>字面量</strong>和<strong>符号引用</strong>，这部分内容将在类加载进方法区后进入常量池存放。</p><p>运行时常量池相对于Class文件常量池的另一个重要特征，是具备动态性。Java语言并不要求常量一定只有编译期才能产生，也就是并非预置入Class文件中常量池的内容才能进入方法区运行时常量池，运行期间也可能将新的常量放入池中，这种特性被开发人员利用得比较多的便是String类的intern（）方法。</p><h5 id="字符串常量池"><a href="#字符串常量池" class="headerlink" title="字符串常量池"></a>字符串常量池</h5><p>字符串常量池 在JDK 1.7的HotSpot中已经从运行时常量池转移到Heap中。<a href="http://www.oracle.com/technetwork/java/javase/jdk7-relnotes-418459.html#jdk7changes" target="_blank" rel="noopener">参见</a></p><blockquote><p><strong>Area</strong>: HotSpot</p><p><strong>Synopsis</strong>: In JDK 7, interned strings are no longer allocated in the permanent generation of the Java heap, but <strong>are instead allocated in the main part of the Java heap</strong> (known as the young and old generations), along with the other objects created by the application. This change will result in more data residing in the main Java heap, and less data in the permanent generation, and thus may require heap sizes to be adjusted. Most applications will see only relatively small differences in heap usage due to this change, but larger applications that load many classes or make heavy use of the String.intern() method will see more significant differences. RFE: 6962931</p></blockquote><h3 id="异常-3"><a href="#异常-3" class="headerlink" title="异常"></a>异常</h3><p>既然运行时常量池是方法区的一部分，自然受到方法区内存的限制，当常量池无法再申请到内存时会抛出OutOfMemoryError异常。</p><p>String.intern()是一个Native方法，它的作用是：如果字符串常量池中已经包含一个等于此String对象的字符串，则返回代表池中这个字符串的String对象；否则，将此String对象包含的字符串添加到常量池中，并且返回此String对象的引用。在JDK 1.6及之前的版本中，由于常量池分配在永久代内，我们可以通过-XX:PermSize和-XX:MaxPermSize限制方法区大小，从而间接限制其中常量池的容量。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JVM VM: -XX:PermSize=10M -XX:MaxPermSize=10M</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstantPoolOOM</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; stringList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            stringList.add(String.valueOf(i).intern());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">Exception in thread <span class="string">"main"</span> java.lang.OutOfMemoryError: PermGen space</span><br><span class="line">	at java.lang.String.intern(Native Method)</span><br><span class="line">	at one.wangwei.java.App.main(App.java:<span class="number">15</span>)</span><br></pre></td></tr></table></figure><h2 id="Direct-Memory"><a href="#Direct-Memory" class="headerlink" title="Direct Memory"></a>Direct Memory</h2><p>直接内存（Direct Memory）并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域。</p><p>在JDK 1.4中新加入了NIO（New Input/Output）类，引入了一种基于通道（Channel）与缓冲区（Buffer）的I/O方式，它可以使用Native函数库直接分配堆外内存，然后通过一个存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在Java堆和Native堆中来回复制数据。</p><h3 id="异常-4"><a href="#异常-4" class="headerlink" title="异常"></a>异常</h3><p>本机直接内存的分配不会受到Java堆大小的限制，但是，既然是内存，肯定还是会受到本机总内存（包括RAM以及SWAP区或者分页文件）大小以及处理器寻址空间的限制。服务器管理员在配置虚拟机参数时，会根据实际内存设置-Xmx等参数信息，但经常忽略直接内存，使得各个内存区域总和大于物理内存限制（包括物理的和操作系统级的限制），从而导致动态扩展时出现OutOfMemoryError异常。</p><p>DirectMemory容量可通过 <code>-XX:MaxDirectMemorySize</code> 指定，下面的代码越过了DirectByteBuffer类，直接通过反射获取Unsafe实例进行内存分配（Unsafe类的getUnsafe()方法限制了只有引导类加载器才会返回实例，也就是设计者希望只有rt.jar中的类才能使用Unsafe的功能）。因为，虽然使用DirectByteBuffer分配内存也会抛出内存溢出异常，但它抛出异常时并没有真正向操作系统申请分配内存，而是通过计算得知内存无法分配，于是手动抛出异常，真正申请分配内存的方法是unsafe.allocateMemory()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.misc.Unsafe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * VM Args：-Xmx20M -XX:MaxDirectMemorySize=10M</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectMemory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ALLOCATE_MEMORY = <span class="number">10</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field unsafeField = Unsafe.class.getDeclaredFields()[<span class="number">0</span>];</span><br><span class="line">            unsafeField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            Unsafe unsafe = (Unsafe) unsafeField.get(<span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                unsafe.allocateMemory(ALLOCATE_MEMORY);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"></span><br><span class="line">java(<span class="number">45961</span>,<span class="number">0x70000a70c000</span>) malloc: *** mach_vm_map(size=<span class="number">10485760</span>) failed (error code=<span class="number">3</span>)</span><br><span class="line">*** error: can<span class="string">'t allocate region</span></span><br><span class="line"><span class="string">*** set a breakpoint in malloc_error_break to debug</span></span><br><span class="line"><span class="string">Exception in thread "main" java.lang.OutOfMemoryError</span></span><br><span class="line"><span class="string">	at sun.misc.Unsafe.allocateMemory(Native Method)</span></span><br><span class="line"><span class="string">	at one.wangwei.java.DirectMemory.main(DirectMemory.java:20)</span></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://book.douban.com/subject/24722612/" target="_blank" rel="noopener">《JVM高级特性与最佳实践[第2版]》第2章节「Java内存区域与内存溢出异常」</a></li><li><a href="https://docs.oracle.com/javase/specs/jvms/se7/html/index.html" target="_blank" rel="noopener">The Java® Virtual Machine Specification Java SE 7 Edition</a></li><li><a href="http://www.javainterviewpoint.com/java-virtual-machine-architecture-in-java/" target="_blank" rel="noopener">http://www.javainterviewpoint.com/java-virtual-machine-architecture-in-java/</a></li><li><a href="http://blog.jamesdbloom.com/JVMInternals.html" target="_blank" rel="noopener">http://blog.jamesdbloom.com/JVMInternals.html</a></li><li><a href="https://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html</a></li></ul><blockquote><p><a href="https://press.one/file/v?s=6f3d70c29a9ccc4fd57898e95ca6b76ff82541dffa7198d4e05a6cf172f09627e9cd2261f63d7a9ccd73e1e829e03ed53363f67b313ae4b340728ad060650dd91&amp;h=4b82cb88322a4072133c5388a10f69a6a10b5b85faf4dcd993b62d4549a94463&amp;a=23fe9bfd7ceef4b44c2ce44dcac8e4a49caf8026&amp;f=P1&amp;v=2" target="_blank" rel="noopener">https://press.one/file/v?s=6f3d70c29a9ccc4fd57898e95ca6b76ff82541dffa7198d4e05a6cf172f09627e9cd2261f63d7a9ccd73e1e829e03ed53363f67b313ae4b340728ad060650dd91&amp;h=4b82cb88322a4072133c5388a10f69a6a10b5b85faf4dcd993b62d4549a94463&amp;a=23fe9bfd7ceef4b44c2ce44dcac8e4a49caf8026&amp;f=P1&amp;v=2</a></p></blockquote>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式 | 模板方法(Template Method)]]></title>
      <url>/posts/design-patterns-template-method.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="What"><a href="#What" class="headerlink" title="What"></a>What</h1><ul><li>父类定义处理流程的框架，子类实现流程中各个功能的具体细节。</li><li>设计原则：Do not call me, I will call you.</li></ul><a id="more"></a><h1 id="How"><a href="#How" class="headerlink" title="How"></a>How</h1><h4 id="UML图"><a href="#UML图" class="headerlink" title="UML图"></a>UML图</h4><p><img src="https://img.i7years.com/blog/Template_Method-2x.png" alt="Template_Method"></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><blockquote><p>以我们日常工作的日程安排为例</p></blockquote><ol><li><p>定义父类 <strong>Worker</strong>，里面定义了框架流程方法 <strong><em>dailyRountine</em></strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.designpatterns.templatemethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每日日程安排</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dailyRountine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String name = getName();</span><br><span class="line">        getUp(name);</span><br><span class="line">        eatBreakfast(name);</span><br><span class="line">        goToWork(name);</span><br><span class="line">        work(name);</span><br><span class="line">        goBackHome(name);</span><br><span class="line">        relax(name);</span><br><span class="line">        sleep(name);</span><br><span class="line">        System.out.println(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取姓名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 起床</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUp</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"&#123;&#125; 起床了"</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 吃早餐</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eatBreakfast</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"&#123;&#125; 吃早餐"</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 去上班</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">goToWork</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"&#123;&#125; 要去上班了"</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 工作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下班回家</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">goBackHome</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"&#123;&#125; 忙完工作，下班回家了"</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 放松休息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">relax</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"&#123;&#125; 看美剧，放松一下"</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 入睡</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"&#123;&#125; 开始睡觉了"</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义子类 <strong>ProductManager</strong>，实现抽象方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.designpatterns.templatemethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 产品经理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/05/08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductManager</span> <span class="keyword">extends</span> <span class="title">Worker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取姓名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"小伟"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 工作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"&#123;&#125; 是位产品经理，主要的工作就是画产品原型"</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义子类 <strong>Programmer</strong>，实现抽象方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.designpatterns.templatemethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 程序员</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/05/08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Programmer</span> <span class="keyword">extends</span> <span class="title">Worker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取姓名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"小明"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 工作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"&#123;&#125; 是名程序猿，主要的工作是编写程序"</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 放松休息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">relax</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"&#123;&#125; 喜欢跑步来放松心情"</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义子类 <strong>UIDesigner</strong>，实现抽象方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.designpatterns.templatemethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UI 设计师</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/05/08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UIDesigner</span> <span class="keyword">extends</span> <span class="title">Worker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取姓名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"小美"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 工作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"&#123;&#125; 是位UI设计师，每天的工作主要是设计UI界面"</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 放松休息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">relax</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"&#123;&#125; 喜欢看韩剧来放松心情"</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义调用类 WorkerHelper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.designpatterns.templatemethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkerHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Worker worker;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WorkerHelper</span><span class="params">(Worker worker)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.worker = worker;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeWorker</span><span class="params">(Worker worker)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.worker = worker;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dailyRountine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.worker.dailyRountine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.designpatterns.templatemethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        WorkerHelper workerHelper = <span class="keyword">new</span> WorkerHelper(<span class="keyword">new</span> ProductManager());</span><br><span class="line">        workerHelper.dailyRountine();</span><br><span class="line"></span><br><span class="line">        workerHelper.changeWorker(<span class="keyword">new</span> Programmer());</span><br><span class="line">        workerHelper.dailyRountine();</span><br><span class="line"></span><br><span class="line">        workerHelper.changeWorker(<span class="keyword">new</span> UIDesigner());</span><br><span class="line">        workerHelper.dailyRountine();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出如下信息：</span></span><br><span class="line"></span><br><span class="line"><span class="number">14</span>:<span class="number">58</span>:<span class="number">27.835</span> [main] INFO one.wangwei.designpatterns.templatemethod.Worker - 小伟 起床了</span><br><span class="line"><span class="number">14</span>:<span class="number">58</span>:<span class="number">27.842</span> [main] INFO one.wangwei.designpatterns.templatemethod.Worker - 小伟 吃早餐</span><br><span class="line"><span class="number">14</span>:<span class="number">58</span>:<span class="number">27.842</span> [main] INFO one.wangwei.designpatterns.templatemethod.Worker - 小伟 要去上班了</span><br><span class="line"><span class="number">14</span>:<span class="number">58</span>:<span class="number">27.842</span> [main] INFO one.wangwei.designpatterns.templatemethod.ProductManager - 小伟 是位产品经理，主要的工作就是画产品原型</span><br><span class="line"><span class="number">14</span>:<span class="number">58</span>:<span class="number">27.842</span> [main] INFO one.wangwei.designpatterns.templatemethod.Worker - 小伟 忙完工作，下班回家了</span><br><span class="line"><span class="number">14</span>:<span class="number">58</span>:<span class="number">27.842</span> [main] INFO one.wangwei.designpatterns.templatemethod.Worker - 小伟 看美剧，放松一下</span><br><span class="line"><span class="number">14</span>:<span class="number">58</span>:<span class="number">27.842</span> [main] INFO one.wangwei.designpatterns.templatemethod.Worker - 小伟 开始睡觉了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">14</span>:<span class="number">58</span>:<span class="number">27.842</span> [main] INFO one.wangwei.designpatterns.templatemethod.Worker - 小明 起床了</span><br><span class="line"><span class="number">14</span>:<span class="number">58</span>:<span class="number">27.843</span> [main] INFO one.wangwei.designpatterns.templatemethod.Worker - 小明 吃早餐</span><br><span class="line"><span class="number">14</span>:<span class="number">58</span>:<span class="number">27.843</span> [main] INFO one.wangwei.designpatterns.templatemethod.Worker - 小明 要去上班了</span><br><span class="line"><span class="number">14</span>:<span class="number">58</span>:<span class="number">27.843</span> [main] INFO one.wangwei.designpatterns.templatemethod.Programmer - 小明 是名程序猿，主要的工作是编写程序</span><br><span class="line"><span class="number">14</span>:<span class="number">58</span>:<span class="number">27.843</span> [main] INFO one.wangwei.designpatterns.templatemethod.Worker - 小明 忙完工作，下班回家了</span><br><span class="line"><span class="number">14</span>:<span class="number">58</span>:<span class="number">27.843</span> [main] INFO one.wangwei.designpatterns.templatemethod.Programmer - 小明 喜欢跑步来放松心情</span><br><span class="line"><span class="number">14</span>:<span class="number">58</span>:<span class="number">27.843</span> [main] INFO one.wangwei.designpatterns.templatemethod.Worker - 小明 开始睡觉了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">14</span>:<span class="number">58</span>:<span class="number">27.843</span> [main] INFO one.wangwei.designpatterns.templatemethod.Worker - 小美 起床了</span><br><span class="line"><span class="number">14</span>:<span class="number">58</span>:<span class="number">27.843</span> [main] INFO one.wangwei.designpatterns.templatemethod.Worker - 小美 吃早餐</span><br><span class="line"><span class="number">14</span>:<span class="number">58</span>:<span class="number">27.843</span> [main] INFO one.wangwei.designpatterns.templatemethod.Worker - 小美 要去上班了</span><br><span class="line"><span class="number">14</span>:<span class="number">58</span>:<span class="number">27.843</span> [main] INFO one.wangwei.designpatterns.templatemethod.UIDesigner - 小美 是位UI设计师，每天的工作主要是设计UI界面</span><br><span class="line"><span class="number">14</span>:<span class="number">58</span>:<span class="number">27.843</span> [main] INFO one.wangwei.designpatterns.templatemethod.Worker - 小美 忙完工作，下班回家了</span><br><span class="line"><span class="number">14</span>:<span class="number">58</span>:<span class="number">27.843</span> [main] INFO one.wangwei.designpatterns.templatemethod.UIDesigner - 小美 喜欢看韩剧来放松心情</span><br><span class="line"><span class="number">14</span>:<span class="number">58</span>:<span class="number">27.843</span> [main] INFO one.wangwei.designpatterns.templatemethod.Worker - 小美 开始睡觉了</span><br></pre></td></tr></table></figure></li></ol><h1 id="JDK中的运用"><a href="#JDK中的运用" class="headerlink" title="JDK中的运用"></a>JDK中的运用</h1><ul><li><a href="https://docs.oracle.com/javase/8/docs/api/java/io/InputStream.html" target="_blank" rel="noopener">java.io.InputStream</a> , <a href="https://docs.oracle.com/javase/8/docs/api/java/io/OutputStream.html" target="_blank" rel="noopener">java.io.OutputStream</a> , <a href="https://docs.oracle.com/javase/8/docs/api/java/io/Reader.html" target="_blank" rel="noopener">java.io.Reader</a> 以及 <a href="https://docs.oracle.com/javase/8/docs/api/java/io/Writer.html" target="_blank" rel="noopener">java.io.Writer</a> 中所有非抽象方法；</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/AbstractList.html" target="_blank" rel="noopener">java.util.AbstractList</a> , <a href="https://docs.oracle.com/javase/8/docs/api/java/util/AbstractSet.html" target="_blank" rel="noopener">java.util.AbstractSet</a> 以及 <a href="https://docs.oracle.com/javase/8/docs/api/java/util/AbstractMap.html" target="_blank" rel="noopener">java.util.AbstractMap</a> 中所有非抽象方法；</li><li><a href="http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html" target="_blank" rel="noopener">javax.servlet.http.HttpServlet</a> 中 默认发送 Http 405 “Method Not Allowed” 错误响应信息的 doXXX() 的方法；</li></ul><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://github.com/wangweiX/design-patterns/blob/master/src/main/java/one/wangwei/designpatterns/templatemethod" target="_blank" rel="noopener">源码</a></li><li><a href="https://sourcemaking.com/design_patterns/template_method" target="_blank" rel="noopener">https://sourcemaking.com/design_patterns/template_method</a></li><li><a href="https://refactoring.guru/design-patterns/template-method/java/example" target="_blank" rel="noopener">https://refactoring.guru/design-patterns/template-method/java/example</a></li><li><p><a href="http://ifeve.com/template-method-design-pattern" target="_blank" rel="noopener">http://ifeve.com/template-method-design-pattern</a></p></li><li><p>《图解设计模式》</p></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Design Patterns </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式 | 抽象工厂(Abstract Factory)]]></title>
      <url>/posts/design-patterns-abstract-factory.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/abstract-factory-mini-2x.png" alt=""></p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p><strong>抽象工厂</strong>是一种创造性设计模式，可让您生成相关对象的家族，而无需指定具体的类。</p><a id="more"></a><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>想象一下，你正在创建一个家具店的模拟器。 你的代码包括：</p><ol><li>家庭相关的产品：<code>Chair</code> + <code>Sofa</code> + <code>CoffeeTable</code>.</li><li>这些家具在风格上会存在一些变化，比如：IKEA(宜家)，VictorianStyle(维多利亚风格)，ArtDeco(艺术装饰)等等。</li></ol><p>您需要一种方法来创建各个家具对象，以便它们与同一系列的其他家具对象在风格上相匹配。否则， 客户在收到不匹配的家具时会感到非常沮丧。</p><p>此外，在向程序添加新产品或产品系列时，您不希望更改现有的代码。 家具供应商经常更新他们的产品目录，我们并不想每次都去更改核心代码。</p><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p><em>抽象工厂</em> 模式建议要做的第一件事情就是浏览一下所有的不同种类的产品，并且强制统一它们的变种，以便让它们实现相同的接口。例如，所有不同种类的的 Chair 都要实现 <code>Chair</code> 接口；所有的 coffee table 必须实现 <code>CoffeeTable</code> 接口，等等。</p><p>第二步就是创建 <code>AbstractFactory</code>，这是一个基础接口，它声明创建构成产品系列的所有产品的方法。（例如：<code>createChair</code>, <code>createSofa</code> and <code>createCoffeeTable</code>）。这里重要的是保证这些方法返回先前提取的接口所表示的抽象产品类型：<code>Chair</code> 、 <code>Sofa</code> 、 <code>CoffeeTable</code>。</p><p>第三步要做的事情就是去实现具体的工厂。这些工厂类要返回具体的产品类型。例如，<code>IKEAFactory</code>只能返回<code>IKEAChair</code>，<code>IKEASofa</code>以及<code>IKEACoffeeTable</code>对象。所有的工厂必须遵循 <code>AbstractFactory</code> 接口，同时创建相同的各种产品。</p><p>客户端代码只能通过抽象接口与工厂和产品协同工作。 通过这种方式，您可以通过传递不同的工厂对象来更改客户端代码中使用的产品类型。</p><p>因此，当客户端的代码要求工厂生产椅子时，它们一定不能知道具体的工厂实现类。也不能够知道椅子的具体实现类。无论它们将是 IKEA 还是 Victorian 风格的椅子，必须保证用抽象类<code>Chair</code> ，并且以相同的方式来与所有的椅子一起正常运行。客户端代码将会知道这个结果，椅子实现了在接口中声明的 <code>sit</code> 方法。它也知道无论返回哪种类型的椅子，它将与同一工厂生产的沙发和咖啡桌的类型相匹配。</p><p>好了，那谁来创建具体的工厂对象呢？通常来讲，程序在初始化阶段创建一个具体的工厂对象，并根据配置或环境选择工厂类型。</p><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><p><img src="https://img.i7years.com/blog/abstract-factory-structure-indexed-2x.png" alt=""></p><h2 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h2><p>我们用 MacOS 与 Windows 上的 <code>Button</code> 和 <code>Checkbox</code> 为示例：</p><p>产品 <code>Button</code> 抽象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.designpatterns.abstractfactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The type Button.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Button</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Paint.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类 <code>WindowsButton</code> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.designpatterns.abstractfactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowsButton</span> <span class="keyword">extends</span> <span class="title">Button</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"This is a window button. "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类 <code>MacOSButton</code> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.designpatterns.abstractfactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MacOSButton</span> <span class="keyword">extends</span> <span class="title">Button</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"This is a mac os button. "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>产品 <code>Checkbox</code> 抽象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.designpatterns.abstractfactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The type Checkbox.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Checkbox</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Paint.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现 <code>WindowsCheckbox</code> 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.designpatterns.abstractfactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowsCheckbox</span> <span class="keyword">extends</span> <span class="title">Checkbox</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"You had created windows checkbox. "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>产品子类 <code>MacOSCheckbox</code> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.designpatterns.abstractfactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MacOSCheckbox</span> <span class="keyword">extends</span> <span class="title">Checkbox</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"You had created mac os checkbox"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义抽象工厂 <code>GUIFactory</code> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.designpatterns.abstractfactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The interface Gui factory.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GUIFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create button button.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the button</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Button <span class="title">createButton</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create checkbox checkbox.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the checkbox</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Checkbox <span class="title">createCheckbox</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例工厂 <code>MacOSGUIFactory</code> 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.designpatterns.abstractfactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The type Mac osgui factory.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MacOSGUIFactory</span> <span class="keyword">implements</span> <span class="title">GUIFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Button <span class="title">createButton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MacOSButton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Checkbox <span class="title">createCheckbox</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MacOSCheckbox();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例工厂 <code>WindowsGUIFactory</code> 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.designpatterns.abstractfactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The type Windows gui factory.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowsGUIFactory</span> <span class="keyword">implements</span> <span class="title">GUIFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Button <span class="title">createButton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WindowsButton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Checkbox <span class="title">createCheckbox</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WindowsCheckbox();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.designpatterns.abstractfactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The type Application.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Button button;</span><br><span class="line">    <span class="keyword">private</span> Checkbox checkbox;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Instantiates a new Application.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> factory the factory</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Client</span><span class="params">(GUIFactory factory)</span> </span>&#123;</span><br><span class="line">        button = factory.createButton();</span><br><span class="line">        checkbox = factory.createCheckbox();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Paint.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        button.paint();</span><br><span class="line">        checkbox.paint();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应用程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.designpatterns.abstractfactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Client application;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        configure();</span><br><span class="line">        application.paint();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String osName = System.getProperty(<span class="string">"os.name"</span>);</span><br><span class="line">        <span class="keyword">if</span> (!osName.equalsIgnoreCase(<span class="string">"Mac OS X"</span>)) &#123;</span><br><span class="line">            application = <span class="keyword">new</span> Client(<span class="keyword">new</span> MacOSGUIFactory());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            application = <span class="keyword">new</span> Client(<span class="keyword">new</span> WindowsGUIFactory());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ul><li><p><strong>问题</strong>：当业务逻辑必须与来自某个产品系列的不同产品变体一起运行时，但你不希望它依赖某个具体的产品类别（或者说如果它们事先未知）。</p><p><strong>方案</strong>：抽象工厂能够对客户端代码隐藏它创建具体产品细节。客户端代码可以与任何工厂所生产的任何产品一起正常运行，只要保证它们使用的抽象接口。</p></li><li><p><strong>问题</strong>：当一个类有多个Factory Method 时，导致它自身的主要职责模糊不清</p><p><strong>方案</strong>：在设计良好的代码里面，每一个对象必须保证单一职责原则。当一个类处理多个不同同类的产品类型时，可能需要用独立的抽象工厂替换多个工厂方法。</p></li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ul><li>绘制不同产品的矩阵与同一产品的变体。</li><li>为所有不同类型的产品创建抽象接口，并使所有具体产品都遵循这些接口。</li><li>声明抽象工厂接口。 该接口应列出所有不同类型产品的创建方法。</li><li>针对产品系列的每个变体实施单独的工厂类别。</li><li>在客户端代码中创建一个工厂初始化代码。 应根据配置或当前环境选择类型并创建一个具体的工厂。</li><li>在客户端代码中，将所有产品构造函数调用替换为对工厂对象中的创建方法的调用。</li></ul><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h4 id="Pros"><a href="#Pros" class="headerlink" title="Pros"></a>Pros</h4><ul><li>遵循开闭原则</li><li>允许构建产品对象系列并保证其兼容性</li><li>避免了具体产品的代码与使用它们的代码相互混淆</li><li>将多个类对象间的职责划分开来</li></ul><h4 id="Cons"><a href="#Cons" class="headerlink" title="Cons"></a>Cons</h4><ul><li>通过创建多个附加类来增加整体代码的复杂性。</li></ul><h2 id="JDK-中的运用"><a href="#JDK-中的运用" class="headerlink" title="JDK 中的运用"></a>JDK 中的运用</h2><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/javax/xml/parsers/DocumentBuilderFactory.html#newInstance--" target="_blank" rel="noopener"><code>javax.xml.parsers.DocumentBuilderFactory#newInstance()</code></a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/javax/xml/transform/TransformerFactory.html#newInstance--" target="_blank" rel="noopener"><code>javax.xml.transform.TransformerFactory#newInstance()</code></a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/javax/xml/xpath/XPathFactory.html#newInstance--" target="_blank" rel="noopener"><code>javax.xml.xpath.XPathFactory#newInstance()</code></a></li></ul><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://github.com/wangweiX/design-patterns/tree/master/src/main/java/one/wangwei/designpatterns/abstractfactory" target="_blank" rel="noopener">源码</a></li><li><a href="https://refactoring.guru/design-patterns/abstract-factory" target="_blank" rel="noopener">https://refactoring.guru/design-patterns/abstract-factory</a></li><li><a href="https://sourcemaking.com/design_patterns/abstract_factory" target="_blank" rel="noopener">https://sourcemaking.com/design_patterns/abstract_factory</a></li><li>《图解设计模式》</li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Design Patterns </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式 | 工厂方法(Factory Method)]]></title>
      <url>/posts/design-patterns-factory-method.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/factory-method-mini-2x.png" alt=""></p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><strong>工厂方法</strong>是一种创建式设计模式，它提供了用于在超类中创建对象的接口，但允许子类改变将要创建的对象的类型。</p><a id="more"></a><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>想象一下，你正在创建一个物流管理应用程序。 您的应用程序的第一个版本只能处理卡车运输，因此大部分代码都在Truck类中。</p><p>过了一段时间，您的应用程序变得非常流行，以至于您会收到大量包含海运的请求。</p><p><img src="https://img.i7years.com/blog/factory-method-problem1-2x.png" alt=""></p><p>好消息，对吧？！ 但是代码如何？ 它看起来大部分代码都与Truck类相关联。 添加船只需要更改整个代码库。 此外，如果您决定为应用程序添加其他类型的交通工具，则可能需要再次进行所有这些更改。</p><p>你最终会遇到一些令人讨厌的代码，它们会根据传输对象的类别选择行为。</p><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>工厂方法设计模式建议使用一个叫”工厂”的方法来替代直接通过 new 来创建对象。构造函数调用应该在该方法内移动。 工厂方法返回的对象通常被称为“产品”。</p><p>咋一看上去，这一举动貌似毫无意义。但是你可以在子类中重写工厂方法，并且改变将要创建的类对象。让我们看看它是如何工作的：</p><p><img src="https://img.i7years.com/blog/factory-method-solution1-2x.png" alt=""></p><p>当然，有一些小小的限制：所有的产品都必须有一个通用的接口（比如Transport）。 基类中的Factory方法应该返回这个通用接口。</p><p><img src="https://img.i7years.com/blog/fatory-methond-solution2-en-2x.png" alt=""></p><p>只要这些产品具有共同的基类或接口（例如卡车和船舶实现传输接口），子类就可以返回不同的具体产品。</p><p><img src="https://img.i7years.com/blog/fatory-method-solution3-2x.png" alt=""></p><p>工厂方法的客户端并不关心它们接收到的具体产品类型，它们通过一个共同的产品接口来与所有的具体产品协同工作。</p><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><p><img src="https://img.i7years.com/blog/fatory-method-structure-2x.png" alt=""></p><h2 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h2><h4 id="创建产品接口及其实现类"><a href="#创建产品接口及其实现类" class="headerlink" title="创建产品接口及其实现类"></a>创建产品接口及其实现类</h4><p>运输接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.designpatterns.factorymethod;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 运输</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/05/10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Transport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送快递</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deliver</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>卡车运输子类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.designpatterns.factorymethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 卡车运输</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/05/10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Truck</span> <span class="keyword">implements</span> <span class="title">Transport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deliver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"Deliver by land in a box. "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>水路运输子类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.designpatterns.factorymethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 水路运输</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/05/10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ship</span> <span class="keyword">implements</span> <span class="title">Transport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deliver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"Deliver by sea in a container. "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建工厂及其子类"><a href="#创建工厂及其子类" class="headerlink" title="创建工厂及其子类"></a>创建工厂及其子类</h4><p>物流抽象类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.designpatterns.factorymethod;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 物流</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/05/10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseLogistics</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">planDelivery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Transport transport = createTransport();</span><br><span class="line">        transport.deliver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Transport <span class="title">createTransport</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>道路运输，采用卡车</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.designpatterns.factorymethod;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 道路物流</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/05/10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoadLogistics</span> <span class="keyword">extends</span> <span class="title">BaseLogistics</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Transport <span class="title">createTransport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Truck();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>海运，采用船</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.designpatterns.factorymethod;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 海运</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/05/10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeaLogistics</span> <span class="keyword">extends</span> <span class="title">BaseLogistics</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Transport <span class="title">createTransport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Ship();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.designpatterns.factorymethod;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/05/10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        BaseLogistics logistics = <span class="keyword">new</span> RoadLogistics();</span><br><span class="line">        logistics.planDelivery();</span><br><span class="line"></span><br><span class="line">        BaseLogistics logistics1 = <span class="keyword">new</span> SeaLogistics();</span><br><span class="line">        logistics1.planDelivery();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol><li><p><strong>问题</strong>：当你不知道对象的确切类型和依赖关系时，你的代码需要保证可以正常工作。</p><p>例如，从多个数据源去读和写入数据——文件系统、数据库和网络。这些资源都有不同的类型，依赖关系和初始化代码。</p><p><strong>方案</strong></p><p>工厂方法可以一个产品的具体实现细节。 为了支持新的产品类型，您只需要创建一个新的子类并覆盖其中的工厂方法即可。</p></li><li><p><strong>问题</strong>：当你想要为你的类库或框架的用户提供一种方式，好让他们能够扩展这些库或框架的内部组件。</p><p><strong>方案</strong></p><p>用户可以轻松地对某些特定组件进行子类化。 但是，框架将如何识别该子类并使用它而不是标准组件呢？ 用户必须重写每个创建标准组件实例的方法，并将其更改为创建自定义子类的对象。 这很尴尬，不是吗？</p><p>更好的解决方案不仅是给用户提供扩展特定类的手段，而且还将生产组件的代码减少到单个创建方法中。 换句话说，提供工厂方法。</p><p>让我们看一下它是如何工作的。想象一下，你正在使用一个开源的UI框架开发APP，你的APP需要一个圆型按钮，但是这个框架只提供的方形按钮。</p><p>你要做的第一件事情就是实现 <code>RoundButton</code> 类。但是现在你需要告诉 <code>UIFramework</code> 类去使用新创建的对象，而不是默认对象。</p><p>为了达到这个目的，你需要创建一个子类 <code>UIWithRoundButtons</code> 并且重写 <code>createButton</code> 方法. 这个方法仍然返回 <code>Button</code> 类，但是你的新子类将会提供 <code>RoundButton</code> 对象。现在，在你的App中，你需要使用 <code>UIWithRoundButtons</code> 而不是 <code>UIFramework</code> 来初始化这个框架。</p></li><li><p><strong>问题</strong>：当你想要保存系统资源并且重用已经存在的对象，而不是重新创建一个新的对象。</p><p>例如，当处理大的或者资源密集性的对象，例如数据库连接，等等。</p><p>方案：</p><p>想象一下，重复使用现有对象需要做多少工作：</p><ul><li>首先，您需要创建一个池来保留现有的对象。</li><li>当有人请求一个对象时，你会在该池内寻找一个空闲对象。</li><li>…并将其返回给客户端代码。</li><li>只有在没有空闲对象时，才会创建一个新对象（并将其添加到池中）。</li></ul><p>此代码必须放置在某处。 最方便的地方是一个构造函数。 这样，只要有人试图创建一个对象，所有这些检查都会被执行。 但是，唉，构造函数必须按照定义返回新对象，所以它们不能返回现有的实例。</p></li></ol><h2 id="如何做"><a href="#如何做" class="headerlink" title="如何做"></a>如何做</h2><ol><li><p>提取所有产品的通用接口。 这个接口应该声明对每个产品都有意义的方法。</p></li><li><p>在创建者类中添加一个空的工厂方法。 其方法签名应返回产品接口类型。</p></li><li><p>查看创建者的代码并查找对产品构造函数的所有引用。 一个接一个地将它们替换为对工厂方法的调用，但将产品创建代码提取到工厂方法。</p><p>您可能需要向工厂方法添加一个临时参数，该参数将用于控制将创建哪个产品。</p><p>在这一点上，工厂方法的代码可能看起来很丑陋。 它可能有一个大的开关操作员，可以选择要实例化的产品类别。 但别担心，我们会马上修复它。</p></li><li><p>现在，在子类中覆盖工厂方法，并在base方法中从switch操作符中移出相应的条件。</p></li><li><p>在基础创建者类中用到的控制参数也能够用到子类当中</p><p>例如，您可能拥有一个创建者的层次结构，其中包含基类 <code>Mail</code> 以及<code>Air</code>和<code>Ground</code>类以及产品类：<code>Plane</code>，<code>Truck</code>和<code>Train</code>。 <code>Air</code>与<code>Plane</code> 相匹配，同时<code>Ground</code>与<code>Truck</code>和<code>Train</code>同时匹配。 您可以创建一个新的子类来处理这两种情况，但还有另一种选择。 客户端代码可以将参数传递给Ground类的工厂方法，以控制它接收的产品。</p></li><li><p>如果基础工厂方法在完成代码的迁移后变成了空壳，则可以将其抽象化。</p></li></ol><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h4 id="Pros"><a href="#Pros" class="headerlink" title="Pros"></a>Pros</h4><ul><li>遵循了开闭原则。</li><li>避免了具体产品和使用它们的代码之间的紧密耦合。</li><li>由于将所有创建代码移动到一个地方，因此简化了代码。</li><li>向程序添加一个新的产品变得非常方便。</li></ul><h4 id="Cons"><a href="#Cons" class="headerlink" title="Cons"></a>Cons</h4><ul><li>需要额外的子类。</li></ul><h2 id="JDK中的运用"><a href="#JDK中的运用" class="headerlink" title="JDK中的运用"></a>JDK中的运用</h2><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/Calendar.html#getInstance--" target="_blank" rel="noopener"><code>java.util.Calendar#getInstance()</code></a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/ResourceBundle.html#getBundle-java.lang.String-" target="_blank" rel="noopener"><code>java.util.ResourceBundle#getBundle()</code></a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/text/NumberFormat.html#getInstance--" target="_blank" rel="noopener"><code>java.text.NumberFormat#getInstance()</code></a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/nio/charset/Charset.html#forName-java.lang.String-" target="_blank" rel="noopener"><code>java.nio.charset.Charset#forName()</code></a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/net/URLStreamHandlerFactory.html" target="_blank" rel="noopener"><code>java.net.URLStreamHandlerFactory#createURLStreamHandler(String)</code></a> (Returns different singleton objects, depending on a protocol)</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/EnumSet.html#of(E" target="_blank" rel="noopener"><code>java.util.EnumSet#of()</code></a>)</li><li><a href="https://docs.oracle.com/javase/8/docs/api/javax/xml/bind/JAXBContext.html#createMarshaller--" target="_blank" rel="noopener"><code>javax.xml.bind.JAXBContext#createMarshaller()</code></a> and other similar methods.</li></ul><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://github.com/wangweiX/design-patterns/blob/master/src/main/java/one/wangwei/designpatterns/factorymethod" target="_blank" rel="noopener">源码</a></li><li><a href="https://github.com/wangweiX/java-design-patterns/tree/master/factory-method" target="_blank" rel="noopener">https://github.com/wangweiX/java-design-patterns/tree/master/factory-method</a></li><li><a href="https://refactoring.guru/design-patterns/factory-method" target="_blank" rel="noopener">https://refactoring.guru/design-patterns/factory-method</a></li><li><a href="https://sourcemaking.com/design_patterns/factory_method" target="_blank" rel="noopener">https://sourcemaking.com/design_patterns/factory_method</a></li><li>《图解设计模式》</li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Design Patterns </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[线程IO模型介绍]]></title>
      <url>/posts/server-thread-io-model-reactor-proactor.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote><p>本文转载自：<a href="https://juejin.im/post/5b8f23b96fb9a019ec6a133d" target="_blank" rel="noopener">https://juejin.im/post/5b8f23b96fb9a019ec6a133d</a></p></blockquote><p>前面，我们了解到了服务器如何基于I/O模型管理连接，获取输入数据，下面介绍基于进程/线程模型，服务器如何处理请求。</p><a id="more"></a><p>值得说明的是，具体选择线程还是进程，更多是与平台及编程语言相关，例如C语言使用线程和进程都可以(例如Nginx使用进程，Memcached使用线程)，Java语言一般使用线程(例如Netty)，为了描述方便，下面都使用线程来进程描述。</p><h3 id="传统阻塞I-O服务模型"><a href="#传统阻塞I-O服务模型" class="headerlink" title="传统阻塞I/O服务模型"></a>传统阻塞I/O服务模型</h3><p><img src="https://img.i7years.com/blog/Blocking IO Server.png" alt="Blocking IO Server"></p><p><strong>特点</strong></p><ul><li>采用阻塞式I/O模型获取输入数据</li><li>每个连接都需要独立的线程完成数据输入，业务处理，数据返回的完整操作</li></ul><p><strong>存在问题</strong></p><ul><li>当并发数较大时，需要创建大量线程来处理连接，系统资源占用较大</li><li>连接建立后，如果当前线程暂时没有数据可读，则线程就阻塞在read操作上，造成线程资源浪费</li></ul><h3 id="Reactor模式"><a href="#Reactor模式" class="headerlink" title="Reactor模式"></a>Reactor模式</h3><p>针对传统阻塞I/O服务模型的2个缺点，比较常见的解决方案如下：</p><ul><li>基于I/O复用模型，多个连接共用一个阻塞对象，应用程序只需要在一个阻塞对象上等待，无需阻塞等待所有连接。当某条连接有新的数据可以处理时，操作系统通知应用程序，线程从阻塞状态返回，开始进行业务处理</li><li>基于线程池复用线程资源，不必再为每个连接创建线程，将连接完成后的业务处理任务分配给线程进行处理，一个线程可以处理多个连接的业务。</li></ul><p>I/O复用 + 线程池，这就是Reactor模式的基本设计思想</p><p><img src="https://img.i7years.com/blog/Reactor.png" alt="Reactor"></p><p><strong>Reactor模式</strong>：指通过一个或多个输入同时传递给服务处理器的服务请求的事件驱动处理模式。服务端程序处理传入多路请求，并将它们同步分派给请求对应的处理线程，Reactor模式也叫Dispatcher模式，即 I/O多路复用统一监听事件，收到事件后分发（Dispatch给某进程）。</p><p>Reactor模式中的2个关键组成：</p><ul><li><strong>Reactor</strong>。Reactor在一个单独的线程中运行，负责监听和分发事件，分发给适当的处理程序来对IO事件作出反应。它就像公司的电话接线员，它接听来自客户的电话并将线路转移到适当的联系人</li><li><strong>Handlers</strong>。处理程序执行I/O事件要完成的实际事件，类似于客户想要与之交谈的公司中实际负责人。Reactor通过适度适当的处理程序来响应I/O事件，处理程序执行非阻塞操作</li></ul><p>根据Reactor的数量和处理资源池线程数量的不同，有3种典型的实现：</p><ul><li>单 Reactor 单线程</li><li>单 Reactor 多线程</li><li>主从 Reactor 多线程</li></ul><h4 id="单Reactor单线程"><a href="#单Reactor单线程" class="headerlink" title="单Reactor单线程"></a>单Reactor单线程</h4><p><img src="https://img.i7years.com/blog/Single Reactor Thread.png" alt="Single Reactor Thread"></p><p>其中，select是前面<strong>I/O复用模型</strong>介绍的标准网络编程API，可以实现应用程序通过一个阻塞对象监听多路连接请求，其他方案示意图类似</p><p><strong>方案说明</strong></p><ul><li>Reactor对象通过select监控客户端请求事件，收到事件后通过dispatch进行分发</li><li>如果是建立连接请求事件，则由Acceptor通过accept处理连接请求，然后创建一个Handler对象处理连接完成后的后续业务处理</li><li>如果不是建立连接事件，则Reactor会分发调用连接对应的Handler来响应</li><li>Handler会完成read-&gt;业务处理-&gt;send的完整业务流程</li></ul><p><strong>优点</strong> 模型简单，没有多线程、进程通信、竞争的问题，全部都在一个线程中完成</p><p><strong>缺点</strong></p><ul><li>性能问题：只有一个线程，无法完全发挥多核CPU的性能 Handler在处理某个连接上的业务时，整个进程无法处理其他连接事件，很容易导致性能瓶颈</li><li>可靠性问题：线程意外跑飞，或者进入死循环，会导致整个系统通信模块不可用，不能接收和处理外部消息，造成节点故障</li></ul><p><strong>使用场景</strong> 客户端的数量有限，业务处理非常快速，比如Redis，业务处理的时间复杂度O(1)</p><h4 id="单Reactor多线程"><a href="#单Reactor多线程" class="headerlink" title="单Reactor多线程"></a>单Reactor多线程</h4><p><img src="https://img.i7years.com/blog/Single Reactor Mutil Thread.png" alt="Single Reactor Mutil Thread"></p><p><strong>方案说明</strong></p><ul><li>Reactor对象通过select监控客户端请求事件，收到事件后通过dispatch进行分发</li><li>如果是建立连接请求事件，则由Acceptor通过accept处理连接请求，然后创建一个Handler对象处理连接完成后的续各种事件</li><li>如果不是建立连接事件，则Reactor会分发调用连接对应的Handler来响应</li><li>Handler只负责响应事件，不做具体业务处理，通过read读取数据后，会分发给后面的Worker线程池进行业务处理</li><li>Worker线程池会分配独立的线程完成真正的业务处理，如何将响应结果发给Handler进行处理</li><li>Handler收到响应结果后通过send将响应结果返回给client</li></ul><p><strong>优点</strong> 可以充分利用多核CPU的处理能力</p><p><strong>缺点</strong></p><ul><li>多线程数据共享和访问比较复杂</li><li>Reactor承担所有事件的监听和响应，在单线程中运行，高并发场景下容易成为性能瓶颈</li></ul><h4 id="主从Reactor多线程"><a href="#主从Reactor多线程" class="headerlink" title="主从Reactor多线程"></a>主从Reactor多线程</h4><p>针对单Reactor多线程模型中，Reactor在单线程中运行，高并发场景下容易成为性能瓶颈，可以让Reactor在多线程中运行</p><p><img src="https://img.i7years.com/blog/Master-slave Reactor Mutil Thread.png" alt="Master-slave Reactor Mutil Thread"></p><p><strong>方案说明</strong></p><ul><li>Reactor主线程MainReactor对象通过select监控建立连接事件，收到事件后通过Acceptor接收，处理建立连接事件</li><li>Acceptor处理建立连接事件后，MainReactor将连接分配Reactor子线程给SubReactor进行处理</li><li>SubReactor将连接加入连接队列进行监听，并创建一个Handler用于处理各种连接事件</li><li>当有新的事件发生时，SubReactor会调用连接对应的Handler进行响应</li><li>Handler通过read读取数据后，会分发给后面的Worker线程池进行业务处理</li><li>Worker线程池会分配独立的线程完成真正的业务处理，如何将响应结果发给Handler进行处理</li><li>Handler收到响应结果后通过send将响应结果返回给client</li></ul><p><strong>优点</strong></p><ul><li>父线程与子线程的数据交互简单职责明确，父线程只需要接收新连接，子线程完成后续的业务处理</li><li>父线程与子线程的数据交互简单，Reactor主线程只需要把新连接传给子线程，子线程无需返回数据</li></ul><p>这种模型在许多项目中广泛使用，包括Nginx主从Reactor多进程模型，Memcached主从多线程，Netty主从多线程模型的支持。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>3种模式可以用个比喻来理解： 餐厅常常雇佣接待员负责迎接顾客，当顾客入坐后，侍应生专门为这张桌子服务</p><ul><li>单Reactor单线程：接待员和侍应生是同一个人，全程为顾客服务</li><li>单Reactor多线程：1个接待员，多个侍应生，接待员只负责接待</li><li>主从Reactor多线程：多个接待员，多个侍应生</li></ul><p>Reactor模式具有如下的优点：</p><ul><li>响应快，不必为单个同步时间所阻塞，虽然Reactor本身依然是同步的</li><li>编程相对简单，可以最大程度的避免复杂的多线程及同步问题，并且避免了多线程/进程的切换开销；</li><li>可扩展性，可以方便的通过增加Reactor实例个数来充分利用CPU资源</li><li>可复用性，Reactor模型本身与具体事件处理逻辑无关，具有很高的复用性</li></ul><h3 id="Proactor模型"><a href="#Proactor模型" class="headerlink" title="Proactor模型"></a>Proactor模型</h3><p>在Reactor模式中，Reactor等待某个事件或者可应用或个操作的状态发生（比如文件描述符可读写，或者是socket可读写），然后把这个事件传给事先注册的Handler（事件处理函数或者回调函数），由后者来做实际的读写操作，其中的读写操作都需要应用程序同步操作，所以Reactor是非阻塞同步网络模型。如果把I/O操作改为异步，即交给操作系统来完成就能进一步提升性能，这就是异步网络模型Proactor。</p><p><img src="https://img.i7years.com/blog/Proactor.png" alt="Proactor"></p><p>Proactor是和异步I/O相关的，<strong>详细方案</strong>如下：</p><ul><li>ProactorInitiator创建Proactor和Handler对象，并将Proactor和Handler都通过AsyOptProcessor（Asynchronous Operation Processor）注册到内核</li><li>AsyOptProcessor处理注册请求，并处理I/O操作</li><li>AsyOptProcessor完成I/O操作后通知Proactor</li><li>Proactor根据不同的事件类型回调不同的Handler进行业务处理</li><li>Handler完成业务处理</li></ul><p>可以看出Proactor和Reactor的区别：Reactor是在事件发生时就通知事先注册的事件（读写在应用程序线程中处理完成）；Proactor是在事件发生时基于异步I/O完成读写操作（由内核完成），待I/O操作完成后才回调应用程序的处理器来处理进行业务处理</p><p>理论上Proactor比Reactor效率更高，异步I/O更加充分发挥DMA(Direct Memory Access，直接内存存取)的优势，但是有如下缺点：</p><ul><li>编程复杂性 由于异步操作流程的事件的初始化和事件完成在时间和空间上都是相互分离的，因此开发异步应用程序更加复杂。应用程序还可能因为反向的流控而变得更加难以Debug</li><li>内存使用 缓冲区在读或写操作的时间段内必须保持住，可能造成持续的不确定性，并且每个并发操作都要求有独立的缓存，相比Reactor模式，在socket已经准备好读或写前，是不要求开辟缓存的</li><li>操作系统支持 Windows 下通过 IOCP 实现了真正的异步 I/O，而在 Linux 系统下，Linux2.6才引入，目前异步I/O还不完善</li></ul><p>因此在Linux下实现高并发网络编程都是以Reactor模型为主。</p>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NIO </tag>
            
            <tag> IO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据移民漂流记——带你看看外面的世界]]></title>
      <url>/posts/build-your-own-vpn-by-shadowsocks-or-rixcloud.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/pexels-photo-755385.jpeg?imageslim" alt="freedom"></p><p>带你去看看外面的世界……</p><a id="more"></a><h2 id="购买现成的服务"><a href="#购买现成的服务" class="headerlink" title="购买现成的服务"></a>购买现成的服务</h2><p>付费就是捡便宜，省去自己维护的成本。这里我强烈推荐 <strong><a href="https://portal.rixcloud.me/aff.php?aff=1491" target="_blank" rel="noopener">rixcloud</a></strong>，用了一年多了，没有出现过啥问题，每年的两会时期也照样稳定运行，rixcloud有以下几个优势：</p><ul><li><p>有多达57个全球分布的接入点可供选择，当一个接入点不稳定时，你可以自由切换到其他节点。</p><p><img src="https://img.i7years.com/blog/how-to-build-own-vpn-01.png" alt=""></p></li><li><p>解锁了一系列流媒体服务：<code>Netflix</code>、<code>Spotify</code>、<code>Hulu</code>、<code>HBO Now</code>、<code>TVB</code>、<code>Amazon Prime Video</code>，对于像我这样的Netflix爱好者来说，简直就是福音。</p></li><li><p>访问速度还算可以，偶尔会有所波动，不过大体上都还正常。</p><p><img src="https://img.i7years.com/blog/build-vpn-12.png" alt=""></p></li></ul><h3 id="获取rixcloud"><a href="#获取rixcloud" class="headerlink" title="获取rixcloud"></a>获取rixcloud</h3><ul><li><a href="https://portal.rixcloud.me/aff.php?aff=1491" target="_blank" rel="noopener">注册链接</a></li><li><a href="https://support.rixcloud.me/" target="_blank" rel="noopener">配置教程</a></li></ul><h2 id="自己搭建VPN"><a href="#自己搭建VPN" class="headerlink" title="自己搭建VPN"></a>自己搭建VPN</h2><p>使用 <code>shadowsocks</code> 搭建VPN。自建VPN不好的一点就是，节点单一，一旦被封，你得另买VPS重新搭建，之前的费用就相当于打水漂了，除非能够换机房（IP）。</p><h3 id="准备云服务器"><a href="#准备云服务器" class="headerlink" title="准备云服务器"></a>准备云服务器</h3><p>推荐：<a href="https://bwh88.net/" target="_blank" rel="noopener">搬瓦工</a> 或 <a href="https://my.vultr.com/" target="_blank" rel="noopener">Vultr</a> 。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li><p>登录服务器；</p></li><li><p>使用root权限执行以下命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cd /tmp</span></span><br><span class="line"><span class="comment"># wget --no-check-certificate -O shadowsocks-libev.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-libev.sh</span></span><br><span class="line"><span class="comment"># chmod +x shadowsocks-libev.sh</span></span><br><span class="line"><span class="comment"># ./shadowsocks-libev.sh 2&gt;&amp;1 | tee shadowsocks-libev.log</span></span><br></pre></td></tr></table></figure></li><li><p>安装过程中，按照提示设置密码、端口号以及加密方式；</p><blockquote><p>端口号、加密方式选择默认即可</p></blockquote></li><li><p>安装完成，提示信息如下：</p><p><img src="https://img.i7years.com/blog/shadowsocks_confg1.png" alt=""></p></li><li><p>修改配置文件<code>/etc/shadowsocks-libev/config.json</code></p><ul><li>设置<code>server</code>为<code>0.0.0.0</code>，不是服务器的公网IP；</li><li>设置<code>local_address</code>为虚拟服务器的内网IP，不要设置为<code>127.0.0.1</code>；</li></ul></li><li><p>重启</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CentOS <span class="number">7</span> 命令</span><br><span class="line"><span class="comment"># systemctl restart shadowsocks</span></span><br><span class="line"></span><br><span class="line">CentOS <span class="number">6</span> 命令</span><br><span class="line"><span class="comment"># service shadowsocks restart</span></span><br></pre></td></tr></table></figure></li><li><p>检查服务运行状态</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CentOS <span class="number">7</span> 命令</span><br><span class="line"><span class="comment"># systemctl status shadowsocks </span></span><br><span class="line"></span><br><span class="line">CentOS <span class="number">6</span> 命令</span><br><span class="line"><span class="comment"># service shadowsocks status</span></span><br></pre></td></tr></table></figure><p><img src="https://img.i7years.com/blog/shaw_install.png" alt="WX20171008-132153@2x"></p></li><li><p>检查端口运行状态</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># netstat -anp | grep 8379</span></span><br></pre></td></tr></table></figure><p><img src="https://img.i7years.com/netstat_shawsocks.png" alt="WX20171008-132153@2x"></p></li><li><p>检查防火墙是否开放了开放shadowsocks端口。</p></li></ol><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><p>如果要重新安装，卸载命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./shadowsocks-libev.sh uninstall</span></span><br></pre></td></tr></table></figure><h2 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h2><p>客户端下载：<a href="https://support.rixcloud.me/kb/client-application-download/" target="_blank" rel="noopener">https://support.rixcloud.me/kb/client-application-download/</a></p><p>连接配置参考：<a href="https://support.rixcloud.me/" target="_blank" rel="noopener">https://support.rixcloud.me/</a></p><p>有涉及到需要美区AppleID进行下载的，可以查看 <a href="https://wangwei.one/posts/How-to-register-and-use-the-US-Apple-ID.html">如何注册并使用美区AppleID</a> 。</p><p>我个人用的是 Surge 3 iOS与MacOS版，稍微贵了点，不过用起来体验很好。</p><p><img src="https://img.i7years.com/blog/build-vpn-01.png" alt="Surge 3 MacOS"></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>🚫不要使用aliyun部署，海外的也不行，否则会收到如下禁令：</p><p><img src="https://img.i7years.com/blog/WX20181229-154945.png" alt=""></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://github.com/shadowsocks" target="_blank" rel="noopener">https://github.com/shadowsocks</a></li><li><a href="https://github.com/teddysun/shadowsocks_install" target="_blank" rel="noopener">https://github.com/teddysun/shadowsocks_install</a></li><li><a href="https://teddysun.com/357.html" target="_blank" rel="noopener">https://teddysun.com/357.html</a></li></ul>]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> freedom </tag>
            
            <tag> vpn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Unix IO模型介绍]]></title>
      <url>/posts/5-unix-io-model-intro.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>随着互联网的发展，面对海量用户的高并发业务场景，传统的阻塞式的服务端架构模式已经无能为力，<a href="https://en.wikipedia.org/wiki/C10k_problem" target="_blank" rel="noopener">C10K</a> 问题越来越凸显，需要一种新型的IO模型来解决此类问题。本文我们先来一起学习一下几种常见的I/O模型。</p><a id="more"></a><blockquote><p>本文讨论的背景是Linux环境下的Network IO</p></blockquote><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="用户空间与内核空间"><a href="#用户空间与内核空间" class="headerlink" title="用户空间与内核空间"></a>用户空间与内核空间</h3><p>现在操作系统都是采用虚拟存储器，那么对32位操作系统而言，它的寻址空间（虚拟存储空间）为4G（2的32次方）。操作系统的核心是内核，独立于普通的应用程序，可以访问受保护的内存空间，也有访问底层硬件设备的所有权限。为了保证用户进程不能直接操作内核（kernel），保证内核的安全，操心系统将虚拟空间划分为两部分，一部分为内核空间，一部分为用户空间。针对linux操作系统而言，将最高的1G字节（从虚拟地址0xC0000000到0xFFFFFFFF），供内核使用，称为<strong>内核空间</strong>，而将较低的3G字节（从虚拟地址0x00000000到0xBFFFFFFF），供各个进程使用，称为<strong>用户空间</strong>。</p><h2 id="网络请求处理流程"><a href="#网络请求处理流程" class="headerlink" title="网络请求处理流程"></a>网络请求处理流程</h2><p>服务端处理网络请求的大致流程为：</p><p><img src="https://img.i7years.com/blog/Network process flow.png" alt="Network process flow"></p><p>主要处理步骤如下：</p><ul><li>获取请求数据。客户端与服务器建立连接发出网络请求，服务器接受请求（1-3）</li><li>构建响应。当服务器接收完请求，并在用户空间处理客户端的请求，直到构建响应完成（4）</li><li>返回数据。服务器将已构建好的响应再通过内核空间的网络I/O返还给客户端（5-7）</li></ul><p>设计服务端并发模型时，主要有如下两个关键点：</p><ul><li>服务器如何管理连接，获取输入数据</li><li>服务器如何处理请求</li></ul><p>以上两个关键点最终都与操作系统的I/O模型以及线程(进程)模型相关，下面详细介绍这两个模型</p><h2 id="Unix-IO模型"><a href="#Unix-IO模型" class="headerlink" title="Unix IO模型"></a>Unix IO模型</h2><p>Unix可用的I/O模型有5种，分别如下：</p><ul><li>阻塞式I/O</li><li>非阻塞式I/O</li><li>I/O复用（select、poll和epoll）</li><li>信号驱动式I/O（SIGIO）</li><li>异步I/O（POSIX的aio_系列函数）</li></ul><p>在介绍这5中I/O模型之前，我们先来理解一些的概念：</p><h3 id="概念理解"><a href="#概念理解" class="headerlink" title="概念理解"></a>概念理解</h3><h4 id="阻塞调用与非阻塞调用"><a href="#阻塞调用与非阻塞调用" class="headerlink" title="阻塞调用与非阻塞调用"></a>阻塞调用与非阻塞调用</h4><ol><li>阻塞调用是指调用结果返回之前，当前线程会被挂起。调用线程只有在得到结果之后才会返回。</li><li>非阻塞调用指在不能立刻得到结果之前，该调用不会阻塞当前线程。</li></ol><p>两者的最大区别在于被调用方在收到请求到返回结果之前的这段时间内，调用方是否一直在等待。阻塞是指调用方一直在等待而且别的事情什么都不做。非阻塞是指调用方在结果返回之前先去处理其他任务。</p><h4 id="同步处理与异步处理"><a href="#同步处理与异步处理" class="headerlink" title="同步处理与异步处理"></a>同步处理与异步处理</h4><ol><li><p>同步处理是指被调用方得到最终结果之后才返回给调用方。</p></li><li><p>异步处理是指被调用方先返回应答，然后再计算调用结果，计算完最终结果后再通知并返回给调用方</p></li></ol><blockquote><p><strong>阻塞、非阻塞的讨论对象是调用者</strong></p><p><strong>同步、异步的讨论对象是被调用者</strong></p></blockquote><h4 id="recvfrom函数"><a href="#recvfrom函数" class="headerlink" title="recvfrom函数"></a>recvfrom函数</h4><p>定义函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">recvfrom</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">void</span> *buf, <span class="keyword">int</span> len, <span class="keyword">unsigned</span> <span class="keyword">int</span> flags, struct sockaddr *from,<span class="keyword">int</span> *fromlen)</span></span>;</span><br></pre></td></tr></table></figure><p>函数说明：</p><blockquote><p>recv()用来接收远程主机经指定的socket 传来的数据, 并把数据存到由参数buf指向的内存空间，参数len 为可接收数据的最大长度。参数flags 一般设0，其他数值定义请参考recv()。参数from 用来指定欲传送的网络地址，结构sockaddr 请参考bind()。参数fromlen 为sockaddr 的结构长度。</p><p>返回值：成功则返回接收到的字符数，失败则返回-1，错误原因存于errno 中。</p></blockquote><p>介绍Unix IO模型，我们使用UDP而不是TCP作为例子的原因在于就UDP而言，数据准备好读取的概念比较简单：要么整个数据报已经收到，要么还没有。然而对于TCP来说，诸如套接字低水位标记（low-water mark）等额外变量开始起作用，导致这个概念变得复杂。</p><p>我们把recvfrom函数视作系统调用。</p><h3 id="5种I-O模型"><a href="#5种I-O模型" class="headerlink" title="5种I/O模型"></a>5种I/O模型</h3><p>前面提到过，对于一次IO访问（以read举例），数据会先被拷贝到操作系统内核的缓冲区中，然后才会从操作系统内核的缓冲区拷贝到应用程序的地址空间。所以说，当一个read操作发生时，它会经历两个阶段：</p><ol><li>等待数据准备 (Waiting for the data to be ready)</li><li>将数据从内核拷贝到进程中 (Copying the data from the kernel to the process)</li></ol><p>对于一个套接字上的输入操作，第一步通常涉及等待数据从网络中到达。当数据包到达时，它被复制到内核中的某个缓冲区。第二步就是把数据从内核缓冲区复制到应用进程缓冲区。</p><h4 id="阻塞式I-O模型"><a href="#阻塞式I-O模型" class="headerlink" title="阻塞式I/O模型"></a>阻塞式I/O模型</h4><p><img src="https://img.i7years.com/blog/Blocking I:O Model.png" alt="Blocking I:O Model"></p><p>当用户进程调用了recvfrom这个系统调用，kernel就开始了IO的第一个阶段：准备数据（对于网络IO来说，很多时候数据在一开始还没有到达。比如，还没有收到一个完整的UDP包。这个时候kernel就要等待足够的数据到来）。这个过程需要等待，也就是说数据被拷贝到操作系统内核的缓冲区中是需要一个过程的。而在用户进程这边，整个进程会被阻塞（当然，是进程自己选择的阻塞）。当kernel一直等到数据准备好了，它就会将数据从kernel中拷贝到用户内存，然后kernel返回结果，用户进程才解除block的状态，重新运行起来。</p><blockquote><p>所以，blocking IO的特点就是在IO执行的两个阶段都被block了。</p></blockquote><p><strong>优点</strong>：程序简单，在阻塞等待数据期间进程/线程挂起，基本不会占用CPU资源。</p><p><strong>缺点</strong>：每个连接需要独立的进程/线程单独处理，当并发请求量大时为了维护程序，内存、线程切换开销较大，这种模型在实际生产中很少使用。</p><h4 id="非阻塞式I-O模型"><a href="#非阻塞式I-O模型" class="headerlink" title="非阻塞式I/O模型"></a>非阻塞式I/O模型</h4><p>linux下，可以通过设置socket使其变为non-blocking。当对一个non-blocking socket执行读操作时，流程是这个样子：</p><p><img src="https://img.i7years.com/blog/Nonblocking I:O Model.png" alt="Nonblocking I:O Model"></p><p>当用户进程发出read操作时，如果kernel中的数据还没有准备好，那么它并不会block用户进程，而是立刻返回一个error。从用户进程角度讲 ，它发起一个read操作后，并不需要等待，而是马上就得到了一个结果。用户进程判断结果是一个error时，它就知道数据还没有准备好，于是它可以再次发送read操作。一旦kernel中的数据准备好了，并且又再次收到了用户进程的system call，那么它马上就将数据拷贝到了用户内存，然后返回。</p><blockquote><p>所以，nonblocking IO的特点是用户进程需要<strong>不断的主动询问</strong>kernel数据好了没有。</p></blockquote><p><strong>优点</strong>：不会阻塞在内核的等待数据过程，每次发起的I/O请求可以立即返回，不用阻塞等待，实时性较好。</p><p><strong>缺点</strong>：轮询将会不断地询问内核，这将占用大量的CPU时间，系统资源利用率较低，所以一般Web服务器不使用这种I/O模型。</p><h4 id="I-O复用"><a href="#I-O复用" class="headerlink" title="I/O复用"></a>I/O复用</h4><p>IO multiplexing就是我们说的select，poll，epoll，有些地方也称这种IO方式为event driven IO。select/epoll的好处就在于单个process就可以同时处理多个网络连接的IO。它的基本原理就是select，poll，epoll这个function会不断的轮询所负责的所有socket，当某个socket有数据到达了，就通知用户进程。</p><p><img src="https://img.i7years.com/blog/I:O Multiplexing Model.png" alt="I:O Multiplexing Model"></p><p>当用户进程调用了select，那么整个进程会被block，而同时，kernel会“监视”所有select负责的socket，当任何一个socket中的数据准备好了，select就会返回。这个时候用户进程再调用read操作，将数据从kernel拷贝到用户进程。</p><blockquote><p>所以，I/O 多路复用的特点是通过一种机制一个进程能同时等待多个文件描述符，而这些文件描述符（套接字描述符）其中的任意一个进入读就绪状态，select()函数就可以返回。</p></blockquote><p>这个图和blocking IO的图其实并没有太大的不同，事实上，还更差一些。因为这里需要使用两个system call (select 和 recvfrom)，而blocking IO只调用了一个system call (recvfrom)。但是，用select的优势在于它可以同时处理多个connection。</p><p>所以，如果处理的连接数不是很高的话，使用select/epoll的web server不一定比使用multi-threading + blocking IO的web server性能更好，可能延迟还更大。select/epoll的优势并不是对于单个连接能处理得更快，而是在于能处理更多的连接。</p><p>在IO multiplexing Model中，实际中，对于每一个socket，一般都设置成为non-blocking，但是，如上图所示，整个用户的process其实是一直被block的。只不过process是被select这个函数block，而不是被socket IO给block。</p><p><strong>优点</strong>：可以基于一个阻塞对象，同时在多个描述符上等待就绪，而不是使用多个线程(每个文件描述符一个线程)，这样可以大大节省系统资源</p><p><strong>缺点</strong>：当连接数较少时效率相比多线程+阻塞I/O模型效率较低，可能延迟更大，因为单个连接处理需要2次系统调用，占用时间会有增加</p><h4 id="信号驱动式I-O"><a href="#信号驱动式I-O" class="headerlink" title="信号驱动式I/O"></a>信号驱动式I/O</h4><p><img src="https://img.i7years.com/blog/Signal-Driven IO Model.png" alt="Signal-Driven IO Model"></p><p><strong>简介</strong>：在信号驱动式I/O模型中，应用程序使用套接口进行信号驱动I/O，并安装一个信号处理函数，进程继续运行并不阻塞。当数据准备好时，进程会收到一个SIGIO信号，可以在信号处理函数中调用I/O操作函数处理数据</p><p><strong>优点</strong>：线程并没有在等待数据时被阻塞，可以提高资源的利用率</p><p><strong>缺点</strong></p><ul><li>信号I/O在大量IO操作时可能会因为信号队列溢出导致没法通知</li><li>信号驱动I/O尽管对于处理UDP套接字来说有用，即这种信号通知意味着到达一个数据报，或者返回一个异步错误。但是，对于TCP而言，信号驱动的I/O方式近乎无用，因为导致这种通知的条件为数众多，每一个来进行判别会消耗很大资源，与前几种方式相比优势尽失</li></ul><h4 id="异步I-O"><a href="#异步I-O" class="headerlink" title="异步I/O"></a>异步I/O</h4><p><img src="https://img.i7years.com/blog/Asynchronous I:O Model.png" alt="Asynchronous I:O Model"></p><p>用户进程发起read操作之后，立刻就可以开始去做其它的事。而另一方面，从kernel的角度，当它受到一个asynchronous read之后，首先它会立刻返回，所以不会对用户进程产生任何block。然后，kernel会等待数据准备完成，然后将数据拷贝到用户内存，当这一切都完成之后，kernel会给用户进程发送一个signal，告诉它read操作完成了。</p><p><strong>优点</strong>：异步 I/O 能够充分利用 DMA 特性，让 I/O 操作与计算重叠</p><p><strong>缺点</strong>：要实现真正的异步 I/O，操作系统需要做大量的工作。目前 Windows 下通过 IOCP 实现了真正的异步 I/O，而在 Linux 系统下，Linux2.6才引入，目前 AIO 并不完善，因此在 Linux 下实现高并发网络编程时都是以 IO复用模型模式为主</p><h4 id="同步I-O和异步I-O对比"><a href="#同步I-O和异步I-O对比" class="headerlink" title="同步I/O和异步I/O对比"></a>同步I/O和异步I/O对比</h4><p><img src="https://img.i7years.com/blog/Comparison of the I:O Models.png" alt="Comparison of the I:O Models"></p><p>可以看出，前4种模型的主要区别在于第一阶段，因为它们的第二阶段是一样的：在数据从内核复制到调用者的缓冲区期间，进程阻塞于recvfrom调用。相反，异步I/O模型在这两个阶段都要处理，从而不同于其他4种模型。</p><p>POSIX把这两个术语定义如下：<br>同步I/O操作（synchronous I/O opetation）导致请求进程阻塞，直到I/O操作完成；<br>异步I/O操作（asynchronous I/O opetation）不导致请求进程阻塞。</p><p>根据上述定义，我们的前4种模型——阻塞式I/O模型、非阻塞式I/O模型、I/O复用模型和信号驱动式I/O模型都是同步I/O模型，因为其中真正的I/O操作（recvfrom）将阻塞进程。只有异步I/O模型与POSIX定义的异步I/O相匹配。</p><blockquote><p>recvfrom 才是真正的 I/O 操作，recvfrom是否阻塞是同步异步的区分标识</p></blockquote><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://book.douban.com/subject/4859464/" target="_blank" rel="noopener">《Unix网络编程》</a></li><li><a href="https://segmentfault.com/a/1190000003063859" target="_blank" rel="noopener">https://segmentfault.com/a/1190000003063859</a></li><li><a href="https://blog.csdn.net/historyasamirror/article/details/5778378" target="_blank" rel="noopener">https://blog.csdn.net/historyasamirror/article/details/5778378</a></li><li><a href="https://www.ibm.com/developerworks/cn/linux/l-async/" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/linux/l-async/</a></li><li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Socket.md" target="_blank" rel="noopener">https://github.com/CyC2018/CS-Notes/blob/master/notes/Socket.md</a></li><li><a href="https://tech.youzan.com/yi-bu-wang-luo-mo-xing/" target="_blank" rel="noopener">https://tech.youzan.com/yi-bu-wang-luo-mo-xing/</a></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NIO </tag>
            
            <tag> IO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java IO vs NIO]]></title>
      <url>/posts/java-io-vs-nio.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>前面我们介绍了一系列的NIO Channel的使用，发现它与标准的IO有很大的不同，本篇我们就来总结一下 NIO 与 IO 之间的差异。</p><a id="more"></a><h2 id="主要区别"><a href="#主要区别" class="headerlink" title="主要区别"></a>主要区别</h2><p>对比如下：</p><table><thead><tr><th>IO</th><th>NIO</th></tr></thead><tbody><tr><td>面向流(Stream)</td><td>面向缓冲(Buffer)</td></tr><tr><td>阻塞IO(Blocking IO)</td><td>非阻塞IO(Non Blocking IO)</td></tr><tr><td>\</td><td>选择器(Selectors)</td></tr></tbody></table><h3 id="流-vs-缓冲区"><a href="#流-vs-缓冲区" class="headerlink" title="流 vs 缓冲区"></a>流 vs 缓冲区</h3><p>Java NIO和IO之间的第一个重要区别是IO是面向流的，而NIO是面向缓冲区的。</p><p>IO 以面向流为主，意味着你可以从流中一次性读取一个或多个字节。如何操作读取到的字节取决于你自己。这些流中的字节没有做任何缓存。此外，你无法在流中的数据做前后移动操作。如果你想要对读取到数据做前后移动操作，则必须将其缓存到 Buffer 中。</p><p>Java NIO的面向缓冲区的方法略有不同。数据读入缓冲区，然后在处理该缓冲区。 你可以根据你的需要在缓冲区中做前后移动操作。这样可以提高处理数据时的灵活性。不过，在处理数据之前，还需要检查缓冲区是否包含了完整的数据，并且，要确保缓冲区在读入更多的数据时，不能覆盖掉尚未处理的数据。</p><h3 id="阻塞-vs-非阻塞"><a href="#阻塞-vs-非阻塞" class="headerlink" title="阻塞 vs 非阻塞"></a>阻塞 vs 非阻塞</h3><p>Java IO 中的各种流都是阻塞的。当一个线程调用 read() 或 write() 方法时，在数据被完整读取或写入之前，该线程一直处于阻塞状态，其间它不能处理任何其他的任务。</p><p><img src="https://img.i7years.com/blog/Selector-NIO.png" alt="Selector-NIO"></p><p>Java NIO 非阻塞模式能允许线程从通道中读取数据，通道中有多少数据就读多少数据，如果没有可读的数据，那就什么也不读取。在有数据可以读取之前，线程可以去干其他的事情，而不用一直阻塞等待。</p><p>Java NIO 写操作也是类似。个线程请求写入一些数据到某通道，但不需要等待它完全写入，这个线程同时可以去做别的事情。</p><p>线程通常将非阻塞IO的空闲时间用于在其它通道上执行IO操作，所以一个单独的线程现在可以管理多个输入和输出通道（channel）。</p><p><img src="https://img.i7years.com/blog/Socket-BIO.png" alt="Socket-BIO"></p><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><p>Java NIO 选择器允许一个线程去监控多个输入通道。你可以用一个选择器去注册多个通道，然后线程就可以”选择”出哪些通道已经准备好了读取或写入操作。这种选择器机制让单个线程同时管理多个通道变得更加容易。</p><h2 id="NIO-与-IO-影响应用程序设计"><a href="#NIO-与-IO-影响应用程序设计" class="headerlink" title="NIO 与 IO 影响应用程序设计"></a>NIO 与 IO 影响应用程序设计</h2><p>选择用NIO 还是 IO 作为你程序的IO工具包，将会影响应用程序的以下几个方面：</p><ul><li>NIO 或 IO 类的API调用</li><li>数据的处理方式</li><li>处理数据的线程数量</li></ul><h3 id="API调用"><a href="#API调用" class="headerlink" title="API调用"></a>API调用</h3><p>当然，使用NIO时的API调用看起来与使用IO时不同。 这并不奇怪。 而不是仅仅从例如字节读取数据字节。 在InputStream中，必须首先将数据读入缓冲区，然后从那里进行处理。</p><h3 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h3><p>使用纯NIO设计与IO设计时，数据处理也会受到影响。</p><p>在IO设计中，你从InputStream或Reader中一个字节一个字节地读取数据。 想象一下，你正在处理基于行的文本数据流。 例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Name: Anna</span><br><span class="line">Age: 25</span><br><span class="line">Email: anna@mailserver.com</span><br><span class="line">Phone: 1234567890</span><br></pre></td></tr></table></figure><p>逐行逐行地处理该数据，过程如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">InputStream input = ... ; <span class="comment">// get the InputStream from the client socket</span></span><br><span class="line"></span><br><span class="line">BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(input));</span><br><span class="line"></span><br><span class="line">String nameLine   = reader.readLine();</span><br><span class="line">String ageLine    = reader.readLine();</span><br><span class="line">String emailLine  = reader.readLine();</span><br><span class="line">String phoneLine  = reader.readLine();</span><br></pre></td></tr></table></figure><p>从代码中，我们可以注意到，程序当前的状态取决于程序已经运行到哪一行了。换句话说，当第一个 readLine() 方法返回时，我们就知道文本中的第一行完整的内容已经被读取出来了，因为在readLine()读取完一整行的内容之前，它一直处于Block状态。而且，你也知道第一行读取出来的内容就是名字，第二行则是年龄，第三、四行等等。</p><p>正如你所看到的，只有当有新数据要读取时，程序才会进行，并且对于每个步骤，你都知道该数据是什么。 一旦执行的线程已经超过读取代码中的某个数据片段，该线程就不会在数据中向后移动（通常不会）。 如图：</p><p><img src="https://img.i7years.com/blog/nio-vs-io-1.png" alt=""></p><p>NIO 的实现就完全不一样了，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ByteBuffer buffer = ByteBuffer.allocate(<span class="number">48</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> bytesRead = inChannel.read(buffer);</span><br></pre></td></tr></table></figure><p>注意第二行代码，从channel中读取字节保存到Buffer中。当你这个read()方法返回时，你无法知道你所需要的数据是否已经全部存储在了Buffer中，你仅仅只是知道Buffer中存储一些字节数据。这样就让数据处理变得稍微困难了点。</p><p>想象一下，在第一次调用 <code>read(buffer)</code> 之后 ，buffer中只读取到了一半的数据，例如：”Name: An”。你能处理这样不完整的数据吗？当然不能！因此，在处理任何数据之前，你需要等待至少一整行数据进入缓冲区。</p><p>那么，你怎么知道Buffer中包含了你想要处理的数据呢？很显然，不能。唯一的办法就是去检查Buffer中的数据。这样一来，在你知道所有数据是否存在之前，你可能需要多次检查缓冲区中的数据。这样就会导致程序变得低效，而且代码变得有点混乱。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ByteBuffer buffer = ByteBuffer.allocate(<span class="number">48</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> bytesRead = inChannel.read(buffer);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(! bufferFull(bytesRead) ) &#123;</span><br><span class="line">    bytesRead = inChannel.read(buffer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个 <code>bufferFull()</code> 方法必须去跟踪有多少字节已经读取到了Buffer中。当Buffer中的数据已经准备好了的时候，需要返回ture，否则返回false。</p><p><code>bufferFull()</code> 方法扫描缓冲区，但必须使缓冲区保持与调用 bufferFull() 方法之前相同的状态。否则，下一个将要读取到缓冲区的数据可能无法在正确的position(位置)上被读取。 这不是不可能的，但这是另一个需要注意的问题。</p><p>如果缓冲区已满，则可以对其进行处理。 如果它不满，你可以对缓冲区中的部分数据进行处理，但这样处理的前提是对你所意义。在许多情况下，一般是没有意义的。</p><p>请看缓冲区处理数据的示意图：</p><p><img src="https://img.i7years.com/blog/nio-vs-io-2.png" alt=""></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>NIO允许你仅使用一个（或几个）线程来管理多个通道（网络连接或文件），但成本是解析数据可能比从阻塞流中读取数据时要复杂一些。</p><p>如果你需要同时管理数以千计的活跃连接，每个只发送一些数据，例如聊天服务器，用NIO来实现服务器可能是明智的选择。 同样，如果你需要与其他计算机保持大量的开放连接，例如在P2P网络中，使用单个线程来管理所有出站连接可能是比较好的选择。 此图中说明了一个线程管理多个连接的设计：</p><p><img src="https://img.i7years.com/blog/nio-vs-io-3.png" alt=""></p><p>如果您拥有较少的且带宽高的连接，一次需要发送大量数据，那么经典的IO服务器实现可能是最合适的。此图说明了典型的IO服务器设计：</p><p><img src="https://img.i7years.com/blog/nio-vs-io-4.png" alt=""></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://tutorials.jenkov.com/java-nio/nio-vs-io.html" target="_blank" rel="noopener">http://tutorials.jenkov.com/java-nio/nio-vs-io.html</a></li><li><a href="http://www.studytrails.com/java-io/io-vs-nio/" target="_blank" rel="noopener">http://www.studytrails.com/java-io/io-vs-nio/</a></li><li><a href="https://web.archive.org/web/20140528182031/https://blogs.oracle.com/slc/entry/javanio_vs_javaio" target="_blank" rel="noopener">https://web.archive.org/web/20140528182031/https://blogs.oracle.com/slc/entry/javanio_vs_javaio</a></li><li><a href="http://www.importnew.com/1178.html" target="_blank" rel="noopener">http://www.importnew.com/1178.html</a></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NIO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java NIO2 Asynchronous Channel APIs]]></title>
      <url>/posts/java-nio2-asynchronous-channel.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><a href="https://wangwei.one/posts/319e2a29.html">前面</a> 我们介绍了NIO中一系列同步非阻塞API的用法。在Java 7中引入了NIO的改进版NIO 2，NIO 2 也就是我们常说的 AIO，它是<strong>异步非阻塞</strong>的IO方式。</p><p>AIO的核心概念就是发起非阻塞方式的I/O操作，立即响应，却不立即返回结果，当I/O操作完成时通知。</p><a id="more"></a><h2 id="Asynchronous-Channel-APIs-工作原理"><a href="#Asynchronous-Channel-APIs-工作原理" class="headerlink" title="Asynchronous Channel APIs 工作原理"></a>Asynchronous Channel APIs 工作原理</h2><p>从Java 7开始，java.nio.channel包中新增加4个异步Channel：</p><ul><li><em>AsynchronousFileChannel</em></li><li><em>AsynchronousSocketChannel</em></li><li><em>AsynchronousServerSocketChannel</em></li><li><em>AsynchronousDatagramChannel</em></li></ul><p>从名字上，你可以感受到它们与同步非阻塞Channel API在风格上有些类似。而且，同步非阻塞Channel API中的诸多用法在新的异步非阻塞Channel中依然适用，不同之处在于，<strong>新的异步Channel能够允许一些操作异步执行</strong>。</p><p>当操作启动时，异步通道API为我们提供了两种用于监视和控制挂起操作的备选方案。</p><ul><li>第一种通过返回一个 <strong>java.util.concurrent.Future对象</strong>来表示异步操作的结果</li><li>第二种是通过传递给操作一个新类的对象 <strong>java.nio.channels.CompletionHandler</strong>来完成，它会定义在操作完成后所执行的处理方法。</li></ul><h2 id="Future方式"><a href="#Future方式" class="headerlink" title="Future方式"></a>Future方式</h2><p><strong>Future</strong> 对象代表了异步操作执行的结果。假设我们想要创建一个服务来监听客服端的连接，我们调用 <em>AsynchronousServerSocketChannel</em> 的静态方法 open()，并绑到到一个端口上，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AsynchronousServerSocketChannel serverSocketChannel = AsynchronousServerSocketChannel</span><br><span class="line">                    .open()</span><br><span class="line">                    .bind(<span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>, <span class="number">8899</span>));</span><br></pre></td></tr></table></figure><p>然后，调用 accept() 方法，返回 SocketChannel：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Future&lt;AsynchronousSocketChannel&gt; future = serverSocketChannel.accept();</span><br></pre></td></tr></table></figure><p>在标准的NIO中，如果我们调用ServerSocketChannel中的 accept() 方法，在设置了block mode为true的情况下，它将会一直阻塞，直到有客户端的连接进来。但是 AsynchronousSocketChannel的accept()方法，则会立即返回一个 Future 对象。</p><p>Future对象的泛型类型是操作的返回类型。 在上面的例子中，它是AsynchronousSocketChannel，但它也可以是Integer或String，具体取决于操作的最终返回类型。</p><h5 id="检查是否完成"><a href="#检查是否完成" class="headerlink" title="检查是否完成"></a>检查是否完成</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">future.isDone();</span><br></pre></td></tr></table></figure><blockquote><p>如果底层的操作已经完成，则返回 true。 请注意，在这种情况下，完成可能意味着正常终止、异常或取消。</p></blockquote><h5 id="检查操作是否取消"><a href="#检查操作是否取消" class="headerlink" title="检查操作是否取消"></a>检查操作是否取消</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">future.isCancelled();</span><br></pre></td></tr></table></figure><blockquote><p>如果操作在正常完成之前被取消，则返回 true。</p></blockquote><h5 id="尝试取消操作"><a href="#尝试取消操作" class="headerlink" title="尝试取消操作"></a>尝试取消操作</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">future.cancel(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><p>如果任务已完成，已取消或由于某些其他原因无法取消，则此尝试将失败，返回false。 如果成功，并且在调用canel()接口时此任务尚未启动，则此任务永远不会运行。 如果任务已经开始，则由 <code>mayInterruptIfRunning</code> 参数确定是否应该在尝试停止任务时中断执行此任务的线程。</p><h5 id="获取操作结果"><a href="#获取操作结果" class="headerlink" title="获取操作结果"></a>获取操作结果</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AsynchronousSocketChannel client= future.get();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置10s的阻塞时间</span></span><br><span class="line">AsynchronousSocketChannel worker = future.get(<span class="number">10</span>, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure><p>如果我们在操作完成前调用此API，它将一直阻塞，直到操作完成并返回操作结果。</p><h2 id="CompletionHandler-方式"><a href="#CompletionHandler-方式" class="headerlink" title="CompletionHandler 方式"></a>CompletionHandler 方式</h2><p>使用Future来处理操作的替代方法是使用CompletionHandler类的回调机制。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">AsynchronousServerSocketChannel listener = AsynchronousServerSocketChannel.open().bind(<span class="keyword">null</span>);</span><br><span class="line"> </span><br><span class="line">listener.accept(</span><br><span class="line">  attachment, <span class="keyword">new</span> CompletionHandler&lt;AsynchronousSocketChannel, Object&gt;() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completed</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      AsynchronousSocketChannel client, Object attachment)</span> </span>&#123;</span><br><span class="line">          <span class="comment">// do whatever with client</span></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">failed</span><span class="params">(Throwable exc, Object attachment)</span> </span>&#123;</span><br><span class="line">          <span class="comment">// handle failure</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>当 I/O 操作完全成功时，<code>completed()</code> 接口将会被调用。如果操作失败，则调用 <code>failed()</code> 接口。</p><h2 id="AsynchronousFileChannel"><a href="#AsynchronousFileChannel" class="headerlink" title="AsynchronousFileChannel"></a>AsynchronousFileChannel</h2><p>理解了前面我们讲的 Asynchronous Channel API 的使用方法，接下来，我们来介绍AsynchronousFileChannel的使用。</p><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Path path = Paths.get(<span class="string">"/Users/wangwei/Desktop/test.txt"</span>);</span><br><span class="line">AsynchronousFileChannel fileChannel = AsynchronousFileChannel.open(path,</span><br><span class="line">       StandardOpenOption.READ,</span><br><span class="line">       StandardOpenOption.WRITE,</span><br><span class="line">       StandardOpenOption.CREATE);</span><br></pre></td></tr></table></figure><p>第一个参数指定文件的路径，第二参数指定文件打开之后的操作方式，<code>java.nio.file.StandardOpenOption</code> 枚举中定义了一些列的操作方式。</p><h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><h4 id="Future-方式"><a href="#Future-方式" class="headerlink" title="Future 方式"></a>Future 方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">AsynchronousFileChannel fileChannel =</span><br><span class="line">    AsynchronousFileChannel.open(path, StandardOpenOption.READ);</span><br><span class="line"></span><br><span class="line">ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">Future&lt;Integer&gt; operation = fileChannel.read(buffer, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//run other code as operation continues in background</span></span><br><span class="line"></span><br><span class="line">operation.get();</span><br><span class="line"></span><br><span class="line">String fileContent = <span class="keyword">new</span> String(buffer.array()).trim();</span><br><span class="line">buffer.clear();</span><br><span class="line">System.out.println(fileContent);</span><br></pre></td></tr></table></figure><p>fileChannel.read() 方法，第一个参数 byteBuffer 用于存储读取的文件内容，第二参数指定起始的读取位置。该方法将会立即返回，不管文件是否读取完毕。</p><p>接下来，代码将继续往下执行，而与此同时read()操作还依旧在后台运行。当我们执行完其它代码之后，我们可以调用 get() 接口，如果读取操作已经完成，则get() 接口会立即返回结果，否则会一直阻塞直到操作完成。</p><h4 id="CompletionHandler-方式-1"><a href="#CompletionHandler-方式-1" class="headerlink" title="CompletionHandler 方式"></a>CompletionHandler 方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Path path = Paths.get(<span class="string">"//Users/wangwei/VirtualBox VMs/Win10_1803_English_x64.iso"</span>);</span><br><span class="line">AsynchronousFileChannel fileChannel = AsynchronousFileChannel.open(path, StandardOpenOption.READ);</span><br><span class="line"></span><br><span class="line">ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">fileChannel.read(buffer, <span class="number">0</span>, buffer,</span><br><span class="line">      <span class="keyword">new</span> CompletionHandler&lt;Integer, ByteBuffer&gt;() &#123;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completed</span><span class="params">(Integer result, ByteBuffer attachment)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO</span></span><br><span class="line">        <span class="comment">// result is number of bytes read</span></span><br><span class="line">        <span class="comment">// attachment is the buffer containing content</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">failed</span><span class="params">(Throwable exc, ByteBuffer attachment)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO</span></span><br><span class="line">      &#125;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><p>上面的代码我们用到了另一个 read() 接口，使用了 <em>CompletionHandler</em> 类。它的第一个泛型参数表示操作的返回类型，在 AsynchronousFileChannel 这个例子则返回 Integer 类型，表示读取的字节数。</p><p>第二个泛型参数表示的是附加对象类型， 这里我们选择附加缓冲区，以便在读取完成时，我们可以在 <em>completed</em> 回调API中使用文件中的内容。</p><h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><p>同读取一样，我们也可以使用两种方式来写入文件内容，先来创建 AsynchronousFileChannel：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AsynchronousFileChannel fileChannel</span><br><span class="line">  = AsynchronousFileChannel.open(path, StandardOpenOption.WRITE);</span><br></pre></td></tr></table></figure><p>这里的操作类型设置为了 <code>StandardOpenOption.WRITE</code> 。</p><h4 id="Future-方式-1"><a href="#Future-方式-1" class="headerlink" title="Future 方式"></a>Future 方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">AsynchronousFileChannel fileChannel =</span><br><span class="line">    AsynchronousFileChannel.open(path, StandardOpenOption.READ);</span><br><span class="line"></span><br><span class="line">ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">buffer.put(<span class="string">"hello world"</span>.getBytes());</span><br><span class="line">buffer.flip();</span><br><span class="line"></span><br><span class="line">Future&lt;Integer&gt; operation = fileChannel.write(buffer, <span class="number">0</span>);</span><br><span class="line">buffer.clear();</span><br><span class="line"> </span><br><span class="line"><span class="comment">//run other code as operation continues in background</span></span><br><span class="line"></span><br><span class="line">operation.get();</span><br></pre></td></tr></table></figure><h4 id="CompletionHandler-方式-2"><a href="#CompletionHandler-方式-2" class="headerlink" title="CompletionHandler 方式"></a>CompletionHandler 方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">AsynchronousFileChannel fileChannel =</span><br><span class="line">    AsynchronousFileChannel.open(path, StandardOpenOption.READ);</span><br><span class="line"></span><br><span class="line">ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">buffer.put(<span class="string">"hello world"</span>.getBytes());</span><br><span class="line">buffer.flip();</span><br><span class="line"></span><br><span class="line">fileChannel.write(</span><br><span class="line">      buffer, <span class="number">0</span>, buffer, <span class="keyword">new</span> CompletionHandler&lt;Integer, ByteBuffer&gt;() &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completed</span><span class="params">(Integer result, ByteBuffer attachment)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// result is number of bytes written</span></span><br><span class="line">            <span class="comment">// attachment is the buffer</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">failed</span><span class="params">(Throwable exc, ByteBuffer attachment)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://tutorials.jenkov.com/java-nio/asynchronousfilechannel.html" target="_blank" rel="noopener">http://tutorials.jenkov.com/java-nio/asynchronousfilechannel.html</a></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NIO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java NIO Pipe]]></title>
      <url>/posts/java-nio-pipe.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>Java NIO Pipe是两个线程之间的单向数据连接。 Pipe(管道)具有 source channel(源通道) 和 sink channel(接收器通道) 。 你将数据写入接收器通道，然后可以从源通道读取该数据。</p><a id="more"></a><p>示意图如下：</p><p><img src="https://img.i7years.com/blog/pipe-internals.png" alt="pipe-internals"></p><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><h3 id="创建Pipe"><a href="#创建Pipe" class="headerlink" title="创建Pipe"></a>创建Pipe</h3><p>直接调用 <code>open()</code> 方法创建 Pipe. 如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pipe pipe = Pipe.open();</span><br></pre></td></tr></table></figure><h3 id="写入Pipe"><a href="#写入Pipe" class="headerlink" title="写入Pipe"></a>写入Pipe</h3><p>数据先要写入到sink channel，因此先要获取sink channel.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pipe.SinkChannel sinkChannel = pipe.sink();</span><br></pre></td></tr></table></figure><p>写入 sinkChannel()，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String newData = <span class="string">"New String to write to file..."</span> + System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">ByteBuffer buf = ByteBuffer.allocate(<span class="number">48</span>);</span><br><span class="line">buf.clear();</span><br><span class="line">buf.put(newData.getBytes());</span><br><span class="line"></span><br><span class="line">buf.flip();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(buf.hasRemaining()) &#123;</span><br><span class="line">    sinkChannel.write(buf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="读取Pipe"><a href="#读取Pipe" class="headerlink" title="读取Pipe"></a>读取Pipe</h3><p>从Pipe中读取数据，先要获取 soucechannel。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pipe.SourceChannel sourceChannel = pipe.source();</span><br></pre></td></tr></table></figure><p>调用 read() 方法从 sorce channel 中读取数据，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ByteBuffer buf = ByteBuffer.allocate(<span class="number">48</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> bytesRead = inChannel.read(buf);</span><br></pre></td></tr></table></figure><p>返回的 int 数据，表示已有多少bytes读到buffer中去了。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.java.nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.Pipe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PipeExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//The Pipe is created</span></span><br><span class="line">            Pipe pipe = Pipe.open();</span><br><span class="line">            <span class="comment">//For accessing the pipe sink channel</span></span><br><span class="line">            Pipe.SinkChannel skChannel = pipe.sink();</span><br><span class="line">            String td = <span class="string">"Data is successfully sent for checking the java NIO Channel Pipe."</span>;</span><br><span class="line">            ByteBuffer bb = ByteBuffer.allocate(<span class="number">512</span>);</span><br><span class="line">            bb.clear();</span><br><span class="line">            bb.put(td.getBytes());</span><br><span class="line">            bb.flip();</span><br><span class="line">            <span class="comment">//write the data into a sink channel.</span></span><br><span class="line">            <span class="keyword">while</span> (bb.hasRemaining()) &#123;</span><br><span class="line">                skChannel.write(bb);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//For accessing the pipe source channel</span></span><br><span class="line">            Pipe.SourceChannel sourceChannel = pipe.source();</span><br><span class="line">            bb = ByteBuffer.allocate(<span class="number">512</span>);</span><br><span class="line">            <span class="comment">//The data is write to the console</span></span><br><span class="line">            <span class="keyword">while</span> (sourceChannel.read(bb) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                bb.flip();</span><br><span class="line">                <span class="keyword">while</span> (bb.hasRemaining()) &#123;</span><br><span class="line">                    <span class="keyword">char</span> TestData = (<span class="keyword">char</span>) bb.get();</span><br><span class="line">                    System.out.print(TestData);</span><br><span class="line">                &#125;</span><br><span class="line">                bb.clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://tutorials.jenkov.com/java-nio/pipe.html" target="_blank" rel="noopener">http://tutorials.jenkov.com/java-nio/pipe.html</a></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NIO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java NIO ServerSocketChannel、SocketChannel、DatagramChannel]]></title>
      <url>/posts/java-nio-server-socket-datagram-channel.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><a href="https://wangwei.one/posts/d7aa1132.html">前面</a> 我们介绍了 FileChannel，本篇我们来一起学习 SocketChannel, ServerSocketChannel与DatagramChannel。</p><a id="more"></a><h2 id="ServerSocketChannel"><a href="#ServerSocketChannel" class="headerlink" title="ServerSocketChannel"></a>ServerSocketChannel</h2><p>Java NIO ServerSocketChannel 是用于监听TCP端口连接的通道，与 Java标准IO中的ServerSocket一样。ServerSocketChannel 位于 <code>java.nio.channels</code> 包下。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line">serverSocketChannel.socket().bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">9999</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">    SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//do something with socketChannel...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打开-ServerSocketChannel"><a href="#打开-ServerSocketChannel" class="headerlink" title="打开 ServerSocketChannel"></a>打开 ServerSocketChannel</h3><p>通过调用 <code>ServerSocketChannel.open()</code> 方法，即可打卡一个ServerSocketChannel：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br></pre></td></tr></table></figure><h3 id="关闭-ServerSocketChannel"><a href="#关闭-ServerSocketChannel" class="headerlink" title="关闭 ServerSocketChannel"></a>关闭 ServerSocketChannel</h3><p>调用 serverSocketChannel 中的 <code>close()</code> 方法，即可关闭：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">serverSocket.close();</span><br></pre></td></tr></table></figure><h3 id="监听传入连接"><a href="#监听传入连接" class="headerlink" title="监听传入连接"></a>监听传入连接</h3><p>通过调用 <code>ServerSocketChannel.accept()</code> 方法，我们可以来监听TCP端口上的连接。当 accept() 返回时，它将返回带有传入连接的SocketChannel。因此，accept() 方法会一直阻塞到有传入连接到达位置。</p><p>由于您通常不想只听一个连接，所以在while循环中调用accept()。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">    SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line">    <span class="comment">//do something with socketChannel...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Non-blocking-模式"><a href="#Non-blocking-模式" class="headerlink" title="Non-blocking 模式"></a>Non-blocking 模式</h3><p>ServerSocketChannel 可以设置为 non-blocking 模式，即使没有传入连接达到，accept() 方法也会立即返回。因此，你需要检查返回的SocketChannel是否为null。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line">serverSocketChannel.socket().bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">9999</span>));</span><br><span class="line">serverSocketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">    SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(socketChannel != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">//do something with socketChannel...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SocketChannel"><a href="#SocketChannel" class="headerlink" title="SocketChannel"></a>SocketChannel</h2><p>Java NIO SocketChannel 是用于连接TCP网络Socket的通道。有两种方式可以来创建 SocketChannel：</p><ol><li>打开一个SocketChannel，并连接到网络上的某个服务的TCP端口上。</li><li>在ServerSocketChannel中提到过，当有传入连接进来是，ServerSocketChannel的accpet()方法可以获得SocketChannel.</li></ol><h3 id="打开SocketChannel"><a href="#打开SocketChannel" class="headerlink" title="打开SocketChannel"></a>打开SocketChannel</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SocketChannel socketChannel = SocketChannel.open();</span><br><span class="line">socketChannel.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>, <span class="number">80</span>));</span><br></pre></td></tr></table></figure><h3 id="关闭SocketChannel"><a href="#关闭SocketChannel" class="headerlink" title="关闭SocketChannel"></a>关闭SocketChannel</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socketChannel.close();</span><br></pre></td></tr></table></figure><h3 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h3><p>从socketchannel中读取数据到byteBuffer中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ByteBuffer buf = ByteBuffer.allocate(<span class="number">48</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> bytesRead = socketChannel.read(buf);</span><br></pre></td></tr></table></figure><h3 id="写入数据"><a href="#写入数据" class="headerlink" title="写入数据"></a>写入数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String newData = <span class="string">"New String to write to file..."</span> + System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">ByteBuffer buf = ByteBuffer.allocate(<span class="number">48</span>);</span><br><span class="line">buf.clear();</span><br><span class="line">buf.put(newData.getBytes());</span><br><span class="line"></span><br><span class="line">buf.flip();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(buf.hasRemaining()) &#123;</span><br><span class="line">    channel.write(buf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Non-blocking模式"><a href="#Non-blocking模式" class="headerlink" title="Non-blocking模式"></a>Non-blocking模式</h3><p>我们可以设置 SocketChannel 为 非阻塞模式，这样的话， 你就可以用异步模式来调用 <code>connect()</code>, <code>read()</code> 和 <code>write()</code> 方法。</p><h4 id="connect"><a href="#connect" class="headerlink" title="connect()"></a>connect()</h4><p>如果 SocketChannel 处于 非阻塞模式，并且调用了 connect() 方法，这个方法会在连接建立之前返回。我们可以通过调用 finishConnect() 来判断连接是否建立。像这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">socketChannel.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>, <span class="number">80</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(! socketChannel.finishConnect() )&#123;</span><br><span class="line">    <span class="comment">//wait, or do something else...    </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="write"><a href="#write" class="headerlink" title="write()"></a>write()</h4><p>在非阻塞模式下，write() 方法可能在没有写入任何内容的情况下就返回了。 因此，您需要在循环中调用write()方法。</p><h4 id="read"><a href="#read" class="headerlink" title="read()"></a>read()</h4><p>在非阻塞模式下，<code>read()</code> 方法可能在没有读取任何数据的情况下就返回了。因此，您需要注意返回的int，它会告诉读取了多少字节。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>见 <a href="https://wangwei.one/posts/2477be9a.html">前面</a> 文章中的示例代码。</p><h2 id="DatagramChannel"><a href="#DatagramChannel" class="headerlink" title="DatagramChannel"></a>DatagramChannel</h2><p>DatagramChannle是一个可以用于发送和接收UDP数据包的通道。由于UDP是一种无连接的网络协议，因此我们不能像在其他通道中那样默认读取和写入DatagramChannel，而是发送和接收数据包。</p><h3 id="打开DatagramChannel"><a href="#打开DatagramChannel" class="headerlink" title="打开DatagramChannel"></a>打开DatagramChannel</h3><p>在UDP端口9999上接收数据包：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DatagramChannel channel = DatagramChannel.open();</span><br><span class="line">channel.socket().bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">9999</span>));</span><br></pre></td></tr></table></figure><h3 id="接收数据"><a href="#接收数据" class="headerlink" title="接收数据"></a>接收数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ByteBuffer buf = ByteBuffer.allocate(<span class="number">48</span>);</span><br><span class="line">buf.clear();</span><br><span class="line"></span><br><span class="line">channel.receive(buf);</span><br></pre></td></tr></table></figure><p><code>receive()</code> 方法将会把收到的数据包中的内容复制到Buffer中。如果接收到的数据比Buffer的容量还大，多余的数据会默认丢弃掉。</p><h3 id="发送数据"><a href="#发送数据" class="headerlink" title="发送数据"></a>发送数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String newData = <span class="string">"New String to write to file..."</span> + System.currentTimeMillis();</span><br><span class="line">    </span><br><span class="line">ByteBuffer buf = ByteBuffer.allocate(<span class="number">48</span>);</span><br><span class="line">buf.clear();</span><br><span class="line">buf.put(newData.getBytes());</span><br><span class="line">buf.flip();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> bytesSent = channel.send(buf, <span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>, <span class="number">80</span>));</span><br></pre></td></tr></table></figure><p>此示例将字符串发送到UDP端口80上的“127.0.0.1”服务器。但是没有任何内容正在侦听该端口，因此不会发生任何事情。 由于UDP不对数据传送做出任何保证，因此不会通知你是否收到了发送数据包。</p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><p>我们用 DatagramChannel 来实现一下 EchoServer。</p><h4 id="DatagramSocketEchoServer"><a href="#DatagramSocketEchoServer" class="headerlink" title="DatagramSocketEchoServer"></a>DatagramSocketEchoServer</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.java.nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.DatagramChannel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatagramSocketEchoServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DatagramChannel server = DatagramChannel.open();</span><br><span class="line">            InetSocketAddress sAddr = <span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>, <span class="number">8989</span>);</span><br><span class="line">            server.bind(sAddr);</span><br><span class="line">            ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"Waiting for a message from a remote host at "</span> + sAddr);</span><br><span class="line">                SocketAddress remoteAddr = server.receive(byteBuffer);</span><br><span class="line">                byteBuffer.flip();</span><br><span class="line">                <span class="keyword">int</span> limits = byteBuffer.limit();</span><br><span class="line">                <span class="keyword">byte</span>[] bytess = <span class="keyword">new</span> <span class="keyword">byte</span>[limits];</span><br><span class="line">                byteBuffer.get(bytess, <span class="number">0</span>, limits);</span><br><span class="line">                String msg = <span class="keyword">new</span> String(bytess);</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">"Client at "</span> + remoteAddr + <span class="string">" says: "</span> + msg);</span><br><span class="line">                byteBuffer.rewind();</span><br><span class="line">                server.send(byteBuffer, remoteAddr);</span><br><span class="line">                byteBuffer.clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="DatagramSocketEchoClient"><a href="#DatagramSocketEchoClient" class="headerlink" title="DatagramSocketEchoClient"></a>DatagramSocketEchoClient</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.java.nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.DatagramChannel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatagramSocketEchoClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DatagramChannel client = DatagramChannel.open();</span><br><span class="line">            client.bind(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">            String msg = <span class="string">"hello"</span>;</span><br><span class="line">            ByteBuffer buffer = ByteBuffer.wrap(msg.getBytes());</span><br><span class="line">            InetSocketAddress serverAddress = <span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>, <span class="number">8989</span>);</span><br><span class="line"></span><br><span class="line">            client.send(buffer, serverAddress);</span><br><span class="line">            buffer.clear();</span><br><span class="line">            client.receive(buffer);</span><br><span class="line">            buffer.flip();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> limits = buffer.limit();</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[limits];</span><br><span class="line">            buffer.get(bytes, <span class="number">0</span>, limits);</span><br><span class="line">            String response = <span class="keyword">new</span> String(bytes);</span><br><span class="line">            System.out.println(<span class="string">"Server response: "</span> + response);</span><br><span class="line">            client.close();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://tutorials.jenkov.com/java-nio/datagram-channel.html" target="_blank" rel="noopener">http://tutorials.jenkov.com/java-nio/datagram-channel.html</a></li><li><a href="http://tutorials.jenkov.com/java-nio/socketchannel.html" target="_blank" rel="noopener">http://tutorials.jenkov.com/java-nio/socketchannel.html</a></li><li><a href="http://tutorials.jenkov.com/java-nio/server-socket-channel.html" target="_blank" rel="noopener">http://tutorials.jenkov.com/java-nio/server-socket-channel.html</a></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NIO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java NIO Selector]]></title>
      <url>/posts/java-nio-selector.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>Selector(选择器)是一个Java NIO组件，它可以检查一个或多个NIO通道，并确定哪些通道已经准备好了相应的操作(例如，读写操作）。 这就是单个线程可以管理多个通道，从而管理多个连接的原因。</p><a id="more"></a><h2 id="为什么要用Selector"><a href="#为什么要用Selector" class="headerlink" title="为什么要用Selector"></a>为什么要用Selector</h2><p>单个线程能够处理多个通道的优势在于你只需要少数的线程就可以处理许多的通道。 实际上，你只需使用一个线程就可以处理所有通道。对于操作系统而言，在线程之间切换是非常消耗资源的，并且每个线程也占用操作系统中的一些资源（例如：内存）。 因此，使用的线程越少越好。</p><p>但是有一点要记住，现代操作系统和多核CPU在多任务处理方面表现的越来越好了，因此随着时间的推移，多线程的开销会变得越来越小。 实际上，如果CPU有多个内核，如果不使用任务处理机制，就会导致CPU资源的浪费。不管怎么说，有关程序设计的讨论属于另外的范畴了，但在我们这里可以确切地说，你可以通过Selector使用单个线程来处理多个Channels。示意图：</p><p><img src="https://img.i7years.com/blog/selectors.png" alt="selector"></p><p>要使用选择器，我们不需要任何特殊设置。 我们需要的所有类都是核心的java.nio包，我们只需要导入我们需要的类即可。</p><p>之后，我们可以使用Selector注册多个通道。 当任何通道上发生I / O活动时，选择器会通知我们。这就是我们从单个线程中读取大量数据源的方式。</p><p>我们向Selector注册的任何Channel必须是 <strong><em>SelectableChannel</em></strong> 的子类。 这些是一种特殊类型的通道，可以设置为非阻塞模式。</p><h2 id="创建Selector"><a href="#创建Selector" class="headerlink" title="创建Selector"></a>创建Selector</h2><p>直接调用 <code>open()</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Selector selector = Selector.open();</span><br></pre></td></tr></table></figure><h2 id="Selector注册Channel"><a href="#Selector注册Channel" class="headerlink" title="Selector注册Channel"></a>Selector注册Channel</h2><p>一个selector想要监控多个channel，我们必须将这些channels注册到selector上。调用 SelectableChannel 一类的 <code>register()</code> 方法就可以实行注册机制。</p><p>在注册channel之前，我们必须处理非阻塞（non-blocking）模式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">channel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">SelectionKey key = channel.register(selector, SelectionKey.OP_READ);</span><br></pre></td></tr></table></figure><p>这意味着我们不能将FileChannel与选择器一起使用，因为它们不能像我们使用套接字通道那样切换到非阻塞模式。</p><p>第一个参数是我们之前创建的Selector对象，第二个参数定义了一个”interest set”，这意味着我们感兴趣的Event(事件)是通过Selector(选择器)在被监视的Channel(通道)中监听的。</p><p>我们可以监听四种不同的Event，每种Event都由<em>SelectionKey</em>类中的常量表示：</p><ul><li><code>Connect</code> — 当一个客户端尝试去连接服务端时。常量定义： <em>SelectionKey.OP_CONNECT</em></li><li><code>Accept</code> — 当服务端接受来自客户端的连接请求时。常量定义：<em>SelectionKey.OP_ACCEPT</em></li><li><code>Read</code> — 当服务端准备读取channel中的数据时。常量定义：<em>SelectionKey.OP_READ</em></li><li><code>Write</code> — 当服务端准备写入数据到channel中时。常量定义：<em>SelectionKey.OP_WRITE</em></li></ul><p>如果对多个Event感兴趣时，对这些常量进行 OR 操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> interestSet = SelectionKey.OP_READ | SelectionKey.OP_WRITE;</span><br></pre></td></tr></table></figure><h2 id="SelectionKey’s"><a href="#SelectionKey’s" class="headerlink" title="SelectionKey’s"></a>SelectionKey’s</h2><p>当我们使用选择器注册一个通道时，我们会得到一个 <strong><em>SelectionKey</em></strong> 对象。 该对象中包含了Channel注册的相关数据。</p><p>它包含一些重要的属性，我们必须很好地理解它们才能在Channel上使用Selector。 我们将在以下小节中详解这些属性。</p><h3 id="The-Interest-Set"><a href="#The-Interest-Set" class="headerlink" title="The Interest Set"></a>The Interest Set</h3><p>Interset Set(兴趣集)定义了我们希望Selector在Channel上监听的事件集。它是一个整数值，我们可以通过以下方式获取此信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> interestSet = selectionKey.interestOps();</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> isInterestedInAccept  = interestSet &amp; SelectionKey.OP_ACCEPT;</span><br><span class="line"><span class="keyword">boolean</span> isInterestedInConnect = interestSet &amp; SelectionKey.OP_CONNECT;</span><br><span class="line"><span class="keyword">boolean</span> isInterestedInRead    = interestSet &amp; SelectionKey.OP_READ;</span><br><span class="line"><span class="keyword">boolean</span> isInterestedInWrite   = interestSet &amp; SelectionKey.OP_WRITE;</span><br></pre></td></tr></table></figure><p>你可以通过 <em>interestSet</em> 与 SelectionKey 中某个事件的常量进行 AND 操作，来判断某个Event是否处于Interset Set中。</p><h3 id="The-Ready-Set"><a href="#The-Ready-Set" class="headerlink" title="The Ready Set"></a>The Ready Set</h3><p>Ready Set定义了Channel准备好的一组操作。主要是在Selection后访问 Ready Set。Selection 将在后面解释。 你可以像这样访问ready set：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> readySet = selectionKey.readyOps();</span><br></pre></td></tr></table></figure><p>你可以使用与Interest Set相同的方式，来判断Channel准备好了哪些Events/Operations。但是，你也可以使用下面四种方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">selectionKey.isAcceptable();</span><br><span class="line">selectionKey.isConnectable();</span><br><span class="line">selectionKey.isReadable();</span><br><span class="line">selectionKey.isWritable();</span><br></pre></td></tr></table></figure><h3 id="The-Channel"><a href="#The-Channel" class="headerlink" title="The Channel"></a>The Channel</h3><p>从<em>SelectionKey</em> 获取被监视的Channel非常简单，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SelectableChannel channel = selectionKey.channel();</span><br></pre></td></tr></table></figure><h3 id="The-Selector"><a href="#The-Selector" class="headerlink" title="The Selector"></a>The Selector</h3><p>同Channel一样，获取Selector也非常简单，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Selector selector = selectionKey.selector();</span><br></pre></td></tr></table></figure><h3 id="Attaching-Objects"><a href="#Attaching-Objects" class="headerlink" title="Attaching Objects"></a>Attaching Objects</h3><p>我们可以附加一个对象到SelectionKey上去。有时候我们想要给Channel一个自定义ID或者附加我们想要追踪的任何类型的Java对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">key.attach(Object);</span><br><span class="line"></span><br><span class="line">Object object = key.attachment();</span><br></pre></td></tr></table></figure><p>或者，我们可以选择在Channle注册期间附加对象。 我们将它作为第三个参数添加到Channel的 <em>register()</em> 方法中，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SelectionKey key = channel.register(selector, SelectionKey.OP_ACCEPT, object);</span><br></pre></td></tr></table></figure><h2 id="Selecting-Channels-via-a-Selector"><a href="#Selecting-Channels-via-a-Selector" class="headerlink" title="Selecting Channels via a Selector"></a>Selecting Channels via a Selector</h2><p>使用Selector注册一个或多个Channel后，你可以调用 <em>Selector.select()</em> 方法，该方法会返回那些已经为监听你感兴趣的事件（connect、accept、read、write）做好准备的Channel的数量。换句话说，如果你对为reading事件做好准备的Channel感兴趣，你将会从 <em>select()</em> 方法中收到为reading事件做好准备的channel的数量。</p><p><em>select()</em> 相关的方法如下：</p><ul><li><p>int select()</p><blockquote><p>该方法会一直阻塞到至少一个通道准备好进行操作。 返回的整数表示其通道已准备好进行操作的键的数量。</p></blockquote></li><li><p>int select(long timeout)</p><blockquote><p>与select()类似，区别在于它设置了最大的阻塞时间。</p></blockquote></li><li><p>int selectNow()</p><blockquote><p>立即返回已经准备好的channel数量，没有则返回0。</p></blockquote></li></ul><p><em>select()</em> 返回的int值表示了准备好了的Channel数量。也就是说，自上次调用<em>select()</em> 以来已准备好多少个Channel。如果您调用 <em>select()</em> 并且返回1，表示一个Channel已准备就绪，并且再次调用 <em>select()</em>，并且另一个Channel 已准备好，它将再次返回1。如果你没有对第一个准备好的Channel做任何操作，那你现在有2个就绪的Channel，但在每次 <em>select()</em> 调用之间只有一个Channnel已准备就绪。</p><h3 id="selectedKeys"><a href="#selectedKeys" class="headerlink" title="selectedKeys()"></a>selectedKeys()</h3><p>一旦调用了其中一种 <code>select()</code> 方法，并且返回了int值，表示一个或多个Channel已准备就绪。你可以通过”selected key set”来访问到这些已经准备就绪的Channel。而”selected key set”可以通过调用 <code>selector.selectedKeys()</code> 方法获得。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;SelectionKey&gt; selectedKeys = selector.selectedKeys();</span><br></pre></td></tr></table></figure><p>你可以通过迭代的方式获取已经准备好的Channel，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;SelectionKey&gt; selectedKeys = selector.selectedKeys();</span><br><span class="line"></span><br><span class="line">Iterator&lt;SelectionKey&gt; keyIterator = selectedKeys.iterator();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(keyIterator.hasNext()) &#123;</span><br><span class="line">    </span><br><span class="line">    SelectionKey key = keyIterator.next();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(key.isAcceptable()) &#123;</span><br><span class="line">        <span class="comment">// a connection was accepted by a ServerSocketChannel.</span></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isConnectable()) &#123;</span><br><span class="line">        <span class="comment">// a connection was established with a remote server.</span></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">        <span class="comment">// a channel is ready for reading</span></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isWritable()) &#123;</span><br><span class="line">        <span class="comment">// a channel is ready for writing</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    keyIterator.remove();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到每次迭代后面的一个方法：<code>keyIterator.remove();</code>。Selector 并不会从 SelectionKey Set 中主动删除 SelectionKey 实例。当我们处理完Channel之后，我们必须手动将其删除。等到Channel再一次准备就绪时，Selector又会将其添加进 SelectionKey Set 中去。</p><p><code>SelectionKey.channel()</code> 方法返回的Channel对象需要进行强制转换为你需要的类型。例如：<strong><em>ServerSocketChannel</em></strong>、<strong><em>SocketChannel</em></strong>等等。</p><h3 id="Close"><a href="#Close" class="headerlink" title="Close()"></a>Close()</h3><p>当你用完selector之后，需要调用 <code>selector.close();</code> 将会该selector并让所有注册的SelectionKey变得无效。</p><p>不过，Channel并不会关闭。</p><h2 id="完整示例"><a href="#完整示例" class="headerlink" title="完整示例"></a>完整示例</h2><p>我们来实现一个Echo服务。</p><h3 id="EchoServer"><a href="#EchoServer" class="headerlink" title="EchoServer"></a>EchoServer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.java.nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SelectionKey;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.Selector;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.ServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        ServerSocketChannel serverSocket = ServerSocketChannel.open();</span><br><span class="line">        serverSocket.bind(<span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>, <span class="number">8900</span>));</span><br><span class="line">        serverSocket.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        Selector selector = Selector.open();</span><br><span class="line">        serverSocket.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">256</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            selector.select();</span><br><span class="line">            Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class="line">            Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                SelectionKey selectionKey = iterator.next();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (selectionKey.isAcceptable()) &#123;</span><br><span class="line">                    register(selector, serverSocket);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (selectionKey.isReadable()) &#123;</span><br><span class="line">                    answerWithEcho(byteBuffer, selectionKey);</span><br><span class="line">                &#125;</span><br><span class="line">                iterator.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Selector selector, ServerSocketChannel socketChannel)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        SocketChannel client = socketChannel.accept();</span><br><span class="line">        client.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        client.register(selector, SelectionKey.OP_READ);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">answerWithEcho</span><span class="params">(ByteBuffer buffer, SelectionKey key)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        SocketChannel client = (SocketChannel) key.channel();</span><br><span class="line">        client.read(buffer);</span><br><span class="line">        buffer.flip();</span><br><span class="line">        client.write(buffer);</span><br><span class="line">        buffer.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Process <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String javaHome = System.getProperty(<span class="string">"java.home"</span>);</span><br><span class="line">        String javaBin = javaHome + File.separator + <span class="string">"bin"</span> + File.separator + <span class="string">"java"</span>;</span><br><span class="line">        String classpath = System.getProperty(<span class="string">"java.class.path"</span>);</span><br><span class="line">        String className = EchoServer.class.getCanonicalName();</span><br><span class="line">        ProcessBuilder processBuilder = <span class="keyword">new</span> ProcessBuilder(javaBin, <span class="string">"-cp"</span>, classpath, className);</span><br><span class="line">        <span class="keyword">return</span> processBuilder.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="EchoClient"><a href="#EchoClient" class="headerlink" title="EchoClient"></a>EchoClient</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.wangwei.java.nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SocketChannel client;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ByteBuffer buffer;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> EchoClient instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">EchoClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            client = SocketChannel.open(<span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>, <span class="number">8900</span>));</span><br><span class="line">            buffer = ByteBuffer.allocate(<span class="number">256</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> EchoClient <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> EchoClient();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        buffer = <span class="keyword">null</span>;</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendMessage</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        buffer = ByteBuffer.wrap(msg.getBytes());</span><br><span class="line">        String response = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            client.write(buffer);</span><br><span class="line">            buffer.clear();</span><br><span class="line">            client.read(buffer);</span><br><span class="line">            response = <span class="keyword">new</span> String(buffer.array()).trim();</span><br><span class="line">            System.out.println(<span class="string">"response="</span> + response);</span><br><span class="line">            buffer.clear();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EchoClient client = EchoClient.start();</span><br><span class="line">        System.out.println(<span class="string">"Enter your message:"</span>);</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        client.sendMessage(scanner.nextLine());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://tutorials.jenkov.com/java-nio/selectors.html" target="_blank" rel="noopener">http://tutorials.jenkov.com/java-nio/selectors.html</a></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NIO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java NIO Buffer]]></title>
      <url>/posts/java-nio-buffer.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>Java NIO Buffer（缓冲区）通常与NIO Channels（通道）一起使用。如我们 <a href="https://wangwei.one/posts/d7aa1132.html">前面</a> 所提到的那样，数据从channel中读取到buffer中，也可以从buffer写入到channel 中。</p><p>Buffer 本质上是一个可以写入数据的内存块，并且之后你又可以从中再次读取数据。 此内存块包含在NIO Buffer对象中，该对象提供了一组方法，可以更轻松地使用内存块。</p><a id="more"></a><h2 id="Buffer基本用法"><a href="#Buffer基本用法" class="headerlink" title="Buffer基本用法"></a>Buffer基本用法</h2><p>使用Buffer去读取和写入数据时，通常要遵循以下4个步骤：</p><ol><li>写入数据到Buffer中</li><li>调用 <code>buffer.flip()</code></li><li>从Buffer中读取数据</li><li>调用 <code>buffer.clear()</code> 或 <code>buffer.compact()</code> 方法</li></ol><p>将数据写入缓冲区时，缓冲区会跟踪你写入的数据量。一旦你需要从中读取数据时，你需要调用 <code>flip()</code> 方法，将缓冲区从写入模式切换成读取模式。在读取模式下，你可以读取到所有写入到缓冲区的数据。</p><p>一旦你读取到了所有的数据，你需要对缓冲区做一次清理（clear），让其为下一次写入数据做好准备。你可以采用以下两种方式：一是调用 <code>clear()</code> 方法，二是调用 <code>compact()</code> 方法。<code>clear()</code> 方法是对整个缓冲区做清理。<code>compcat()</code> 方法只是清理掉你已经读取过的数据，任何未读取过的数据会被移动到缓冲区的起始位置，新写入进来的数据将会放到这些未读取的数据后面。</p><p>我们来看一个简单的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">RandomAccessFile fromFile = <span class="keyword">new</span> RandomAccessFile(<span class="string">"/Users/wangwei/Desktop/fromFile.txt"</span>, <span class="string">"rw"</span>);</span><br><span class="line">FileChannel fromChannel = fromFile.getChannel();</span><br><span class="line"></span><br><span class="line"><span class="comment">// create buffer with capacity of 48 bytes</span></span><br><span class="line">ByteBuffer buf = ByteBuffer.allocate(<span class="number">48</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// read data from channel into buffer</span></span><br><span class="line"><span class="keyword">int</span> bytesRead = fromChannel.read(buf);</span><br><span class="line"><span class="keyword">while</span> (bytesRead != -<span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// switch to read mode</span></span><br><span class="line">	buf.flip();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (buf.hasRemaining()) &#123;</span><br><span class="line">    	System.out.println((<span class="keyword">char</span>) buf.get());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// make buffer ready for writing</span></span><br><span class="line">	buf.clear();</span><br><span class="line">	bytesRead = fromChannel.read(buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fromChannel.close();</span><br><span class="line">fromFile.close();</span><br></pre></td></tr></table></figure><h2 id="Buffer容量、位置与限制"><a href="#Buffer容量、位置与限制" class="headerlink" title="Buffer容量、位置与限制"></a>Buffer容量、位置与限制</h2><p>Buffer 本质上是一个可以写入数据的内存块，并且之后你又可以从中再次读取数据。 此内存块包含在NIO Buffer对象中，该对象提供了一组方法，可以更轻松地使用内存块。</p><p>为了理解Buffer的工作原理，你需要去熟悉Buffer的三个属性：</p><ul><li>capacity（容量）</li><li>position（位置）</li><li>limit（限制）</li></ul><p>position与limit的具体含义取决于Buffer处于哪种模式，而capacity则与Buffer的模式无关。示意图如下：</p><p><img src="https://img.i7years.com/blog/JavaNIOBuffer.png" alt="JavaNIOBuffer"></p><h3 id="Capacity"><a href="#Capacity" class="headerlink" title="Capacity"></a>Capacity</h3><p>作为一个内存块，缓冲区具有一定的固定大小，也称为“容量”。 你最多只能写入容量大小的字节(bytes)、长整型(longs)、字符(chars)等数据。一旦缓冲区满了，你需要清空它，才能继续写入数据。</p><h3 id="Position"><a href="#Position" class="headerlink" title="Position"></a>Position</h3><p>当你写入数据时，你需要在某个position处才能执行此操作。初始位置为0，当一个字节、长整数等已写入缓冲区时，position被提前指向缓冲区中的下一个单元以备插入新的数据。 Position的最大值为 capacity - 1.</p><p>当你从缓冲区读取数据时，也需要从给定位置开始读取数据。当你将缓冲区从写入模式切换到读取模式时，position将重置为0。当你从缓冲区读取数据时，将从position所指定的位置开始读取数据，并将position提前设置到下一个要读取的位置。</p><h3 id="Limit"><a href="#Limit" class="headerlink" title="Limit"></a>Limit</h3><p>在写入模式下，Buffer的限制是你可以写入缓冲区的数据量的限制，limit就等于capacity。</p><p>将buffer切换为读取模式时，limit就变成了你可以从中读取到的最大数据量。 因此，当Buffer切换为读取模式时，limit被设置为写入模式的写入位置。 换句话说，就是你可以读取到的写入字节数。</p><h2 id="Buffer类型"><a href="#Buffer类型" class="headerlink" title="Buffer类型"></a>Buffer类型</h2><p>Java NIO有以下几种Buffer类型：</p><p><img src="https://img.i7years.com/blog/IO_NioBuffer.png" alt="IO_NioBuffer"></p><p>如你所见，这些Buffer类型分别代表了不同的数据类型。 换句话说，它们允许你使用char，short，int，long，float或double来处理缓冲区中的字节。</p><p>MappedByteBuffer有点特殊，以后单独介绍。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="Allocating-a-Buffer"><a href="#Allocating-a-Buffer" class="headerlink" title="Allocating a Buffer"></a>Allocating a Buffer</h3><p>直接调通 <code>Buffer.allocate()</code> 就可以获取一个Buffer对象，示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 48 bytes</span></span><br><span class="line">ByteBuffer buffer = ByteBuffer.allocate(<span class="number">48</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1024 characters</span></span><br><span class="line">CharBuffer charBuffer = CharBuffer.allocate(<span class="number">1024</span>);</span><br></pre></td></tr></table></figure><h3 id="写入数据"><a href="#写入数据" class="headerlink" title="写入数据"></a>写入数据</h3><p>Buffer有两种写入数据的方式：</p><ol><li><p>从Channel写入到Buffer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> bytesRead = inChannel.read(buf); <span class="comment">//read into buffer.</span></span><br></pre></td></tr></table></figure></li><li><p>直接调用 buffer.put() 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buf.put(<span class="number">127</span>);</span><br></pre></td></tr></table></figure><blockquote><p>有关put()的更多用法，具体参见JavaDoc文档.</p></blockquote></li></ol><h3 id="flip"><a href="#flip" class="headerlink" title="flip()"></a>flip()</h3><p>前面说过，flip()用于切换Buffer的运行模式，并相应地改变position与limit的值。</p><p><img src="https://img.i7years.com/blog/buffer_lifecycle.png" alt="buffer_lifecycle"></p><h3 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h3><p>Buffer有两种方式可以读取数据：</p><ol><li><p>从Buffer读取数据到Channel中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//read from buffer into channel.</span></span><br><span class="line"><span class="keyword">int</span> bytesWritten = inChannel.write(buf);</span><br></pre></td></tr></table></figure></li><li><p>直接调用get()方法获取数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span> aByte = buf.get();</span><br></pre></td></tr></table></figure><blockquote><p>有关get()的更多用法，具体参见JavaDoc文档.</p></blockquote></li></ol><h3 id="rewind"><a href="#rewind" class="headerlink" title="rewind()"></a>rewind()</h3><p>Buffer.rewind()方法会将 position 重置为0，这样就可以重新读取所有的数据。但limit的值不受影响，因此这就导致会读取出很多空的元素数据。</p><h3 id="clear-和-compcat"><a href="#clear-和-compcat" class="headerlink" title="clear() 和 compcat()"></a>clear() 和 compcat()</h3><p>完成从缓冲区读取数据后，必须使缓冲区准备好再次写入。 你可以通过调用<code>clear()</code>或调用<code>compact()</code>来完成此操作。</p><p>如果你调用 <code>clear()</code> 方法，position会设置为0，limit会设置为capacity ，但是Buffer中的数据并没被真正删除掉。只有标记告诉你可以将数据写入缓冲区的位置。</p><p>如果在调用 <code>clear()</code> 时缓冲区中有任何未读数据，数据将被“遗忘”，这意味着你不再有任何标记告诉读取了哪些数据，以及未读取的数据。</p><p>如果缓冲区中仍有未读数据，并且你想稍后读取它，但你需要先进行一些写入，请调用 <code>compact()</code> 而不是<code>clear()</code>。</p><p><code>compact()</code> 将所有未读数据复制到Buffer的开头。然后它将位置设置在最后一个未读元素之后。 limit属性仍设置为capacity，就像 <code>clear()</code> 一样。现在缓冲区已准备好写入，但你不会覆盖未读数据。</p><h3 id="mark-和-reset"><a href="#mark-和-reset" class="headerlink" title="mark() 和 reset()"></a>mark() 和 reset()</h3><p>你可以通过调用 <code>Buffer.mark()</code> 方法在Buffer中标记给定位置。 然后，你可以通过调用 <code>Buffer.reset()</code> 方法将位置重置回标记位置。 示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置 mark 值等于 position</span></span><br><span class="line">buffer.mark();</span><br><span class="line"></span><br><span class="line"><span class="comment">//call buffer.get() a couple of times, e.g. during parsing.</span></span><br><span class="line"><span class="comment">//set position back to mark.   </span></span><br><span class="line">buffer.reset();</span><br></pre></td></tr></table></figure><h3 id="equals-和-comareTo"><a href="#equals-和-comareTo" class="headerlink" title="equals() 和 comareTo()"></a>equals() 和 comareTo()</h3><p>可以使用 <code>equals()</code> 和 <code>compareTo()</code> 这两个方法来比较两个缓冲区。</p><h4 id="equals"><a href="#equals" class="headerlink" title="equals()"></a>equals()</h4><p>两个Buffer如果满足以下条件，则表示相等：</p><ul><li>类型一致</li><li>剩余的字节、字符等数量相同</li><li>剩余的字节、字符内容都相同</li></ul><p>如你所见，equals仅比较缓冲区的一部分，而不是它内部的每个元素。 实际上，它只是比较缓冲区中的剩余元素。</p><h4 id="compareTo"><a href="#compareTo" class="headerlink" title="compareTo()"></a>compareTo()</h4><p><code>compareTo()</code> 方法比较两个缓冲区的剩余元素（字节，字符等）的大小。 在下列情况下，缓冲区被视为“小于”另一个缓冲区：</p><ul><li>与另一个缓冲区中的对应元素相等的第一个元素小于另一个缓冲区中的元素。</li><li>所有元素都相等，但第一个缓冲区在第二个缓冲区之前耗尽了元素（它只有更少的元素）。</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://tutorials.jenkov.com/java-nio/buffers.html" target="_blank" rel="noopener">http://tutorials.jenkov.com/java-nio/buffers.html</a></li><li><a href="http://actimem.com/java/nio/buffer/" target="_blank" rel="noopener">http://actimem.com/java/nio/buffer/</a></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NIO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[开发环境搭建清单]]></title>
      <url>/posts/dev-env-config-list-guide.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>工欲善其事，必先利其器！</p><a id="more"></a><p>国外有位 <a href="https://github.com/sb2nov" target="_blank" rel="noopener">工程师</a> 在Github上整理了一份Mac上各种工具的安装指南，很是不错，强烈推荐：</p><blockquote><p><a href="https://github.com/sb2nov/mac-setup" target="_blank" rel="noopener">https://github.com/sb2nov/mac-setup</a></p></blockquote><p>我fork了一个自己仓库，添加了一些其它工具的安装指南：</p><blockquote><p><a href="https://github.com/wangweiX/mac-setup" target="_blank" rel="noopener">https://github.com/wangweiX/mac-setup</a></p></blockquote><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>macOS High Sierra</li><li>version 10.13.6</li></ul><h2 id="适用人群"><a href="#适用人群" class="headerlink" title="适用人群"></a>适用人群</h2><ul><li>程序员</li></ul><h2 id="VPN配置"><a href="#VPN配置" class="headerlink" title="VPN配置"></a>VPN配置</h2><blockquote><p>翻墙，是每一位有追求的程序员的必备技能</p></blockquote><p>指南：<a href="https://wangwei.one/posts/build-your-own-vpn-by-shadowsocks-or-rixcloud.html">https://wangwei.one/posts/build-your-own-vpn-by-shadowsocks-or-rixcloud.html</a></p><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><blockquote><p>指南：<a href="https://github.com/wangweiX/mac-setup/tree/master/Java" target="_blank" rel="noopener">https://github.com/wangweiX/mac-setup/tree/master/Java</a></p></blockquote><h3 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h3><blockquote><p>指南：<a href="https://github.com/wangweiX/mac-setup/tree/master/Scala" target="_blank" rel="noopener">https://github.com/wangweiX/mac-setup/tree/master/Scala</a></p></blockquote><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><blockquote><p>指南：<a href="https://github.com/wangweiX/mac-setup/tree/master/Python" target="_blank" rel="noopener">https://github.com/wangweiX/mac-setup/tree/master/Python</a></p></blockquote><h3 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h3><blockquote><p>指南：<a href="https://github.com/wangweiX/mac-setup/tree/master/Go" target="_blank" rel="noopener">https://github.com/wangweiX/mac-setup/tree/master/Go</a></p></blockquote><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><blockquote><p>指南：<a href="https://github.com/wangweiX/mac-setup/tree/master/Node.js" target="_blank" rel="noopener">https://github.com/wangweiX/mac-setup/tree/master/Node.js</a></p></blockquote><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><blockquote><ol><li>指南：<a href="https://github.com/wangweiX/mac-setup/tree/master/Git" target="_blank" rel="noopener">https://github.com/wangweiX/mac-setup/tree/master/Git</a></li><li>Git客户端下载：<a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener">https://www.sourcetreeapp.com/</a></li><li>Git命令学习<ul><li><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html</a></li><li><a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="noopener">http://rogerdudler.github.io/git-guide/index.zh.html</a></li></ul></li></ol></blockquote><h3 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h3><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install maven</span><br></pre></td></tr></table></figure><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><ul><li><p><code>settings.xml</code> 路劲：<code>/usr/local/Cellar/maven/3.5.4/libexec/conf</code></p></li><li><p>修改 <code>settings.xml</code> 配置</p><blockquote><ul><li>默认的配置下载jar包时，是从 <a href="http://search.maven.org/" target="_blank" rel="noopener">国外中央库</a>下载的，速度比较慢。</li><li>建议改为国内阿里云仓库，配置文件下载：<a href="http://attach.i7years.com/attach/settings.xml" target="_blank" rel="noopener">http://attach.i7years.com/attach/settings.xml</a></li></ul></blockquote></li></ul><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><h5 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install tomcat</span><br></pre></td></tr></table></figure><h5 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew services start|stop tomcat</span><br></pre></td></tr></table></figure><h2 id="IDE安装"><a href="#IDE安装" class="headerlink" title="IDE安装"></a>IDE安装</h2><blockquote><p>指南：<a href="https://github.com/wangweiX/mac-setup/tree/master/JetBrains%20IDEs" target="_blank" rel="noopener">https://github.com/wangweiX/mac-setup/tree/master/JetBrains%20IDEs</a></p></blockquote><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><ol><li><p>这里统一推荐 <a href="https://www.jetbrains.com/" target="_blank" rel="noopener">jetbrains</a> 系列的产品，支持各种编程语言的IDE以及数据库操作。</p></li><li><p>这里推荐使用 <a href="https://www.jetbrains.com/toolbox/download/#section=mac" target="_blank" rel="noopener">toolbox</a> 安装中IDE，便于安装、卸载以及版本管理。</p><p><img src="https://img.i7years.com/blog/WX20171120-233139@3x.png" alt=""></p></li><li><p>调整IDEA工具，打开view —&gt; 勾选 Toolbar，效果如下：</p><p><img src="https://img.i7years.com/blog/WX20171120-234109@3x.png" alt=""></p></li><li><p>学习并掌握IDEA的常用快捷键，提高编码效率。</p></li></ol><h3 id="IDE插件推荐"><a href="#IDE插件推荐" class="headerlink" title="IDE插件推荐"></a>IDE插件推荐</h3><ol><li><a href="https://plugins.jetbrains.com/plugin/6317-lombok-plugin" target="_blank" rel="noopener">Lombok</a></li><li><a href="https://plugins.jetbrains.com/plugin/7315-git-flow-integration" target="_blank" rel="noopener">Git Flow Intergration</a></li><li><a href="https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines" target="_blank" rel="noopener">Alibaba Java Coding Guidelines</a></li><li><a href="https://www.sonarlint.org/" target="_blank" rel="noopener">SonarLint</a></li></ol><h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><h3 id="iTerm"><a href="#iTerm" class="headerlink" title="iTerm"></a>iTerm</h3><blockquote><p>指南：<a href="https://github.com/wangweiX/mac-setup/tree/master/iTerm" target="_blank" rel="noopener">https://github.com/wangweiX/mac-setup/tree/master/iTerm</a></p></blockquote><h3 id="Zsh"><a href="#Zsh" class="headerlink" title="Zsh"></a>Zsh</h3><blockquote><p>指南：<a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">https://github.com/robbyrussell/oh-my-zsh</a></p></blockquote><h3 id="Postman"><a href="#Postman" class="headerlink" title="Postman"></a>Postman</h3><blockquote><p>非常不错的http请求调试神器，便于API接口调试</p></blockquote><p>地址：<a href="https://www.getpostman.com/" target="_blank" rel="noopener">https://www.getpostman.com/</a></p><h3 id="SwitchHosts"><a href="#SwitchHosts" class="headerlink" title="SwitchHosts"></a>SwitchHosts</h3><blockquote><p>指南：<a href="https://github.com/oldj/SwitchHosts" target="_blank" rel="noopener">https://github.com/oldj/SwitchHosts</a></p></blockquote><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h3><blockquote><p>指南：<a href="https://github.com/wangweiX/mac-setup/tree/master/MySQL" target="_blank" rel="noopener">https://github.com/wangweiX/mac-setup/tree/master/MySQL</a></p></blockquote><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><h5 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install redis</span><br></pre></td></tr></table></figure><h5 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/etc/redis.conf</span><br></pre></td></tr></table></figure><h5 id="管理-1"><a href="#管理-1" class="headerlink" title="管理"></a>管理</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew services start|stop redis</span><br></pre></td></tr></table></figure><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><ul><li>redis：<a href="https://github.com/uglide/RedisDesktopManager" target="_blank" rel="noopener">https://github.com/uglide/RedisDesktopManager</a></li><li>mysql：[<strong>推荐</strong>]DataGrip: 使用<code>Jetbrains toolbox</code>进行安装</li></ul><h1 id="网络分析"><a href="#网络分析" class="headerlink" title="网络分析"></a>网络分析</h1><ul><li><a href="https://www.charlesproxy.com/" target="_blank" rel="noopener">charles</a></li><li><a href="https://www.wireshark.org/" target="_blank" rel="noopener">wireshark</a></li><li><a href="https://github.com/trimstray/htrace.sh" target="_blank" rel="noopener">htrace.sh</a></li></ul><h2 id="文本编辑器"><a href="#文本编辑器" class="headerlink" title="文本编辑器"></a>文本编辑器</h2><h3 id="SublimeText"><a href="#SublimeText" class="headerlink" title="SublimeText"></a>SublimeText</h3><blockquote><p>指南：<a href="https://github.com/wangweiX/mac-setup/tree/master/SublimeText" target="_blank" rel="noopener">https://github.com/wangweiX/mac-setup/tree/master/SublimeText</a></p></blockquote><h3 id="MarkDown"><a href="#MarkDown" class="headerlink" title="MarkDown"></a>MarkDown</h3><ol><li>工具<ul><li>免费：<a href="http://typora.io" target="_blank" rel="noopener">typora</a></li><li>付费：<a href="https://itunes.apple.com/us/app/bear/id1016366447?mt=8" target="_blank" rel="noopener">Bear</a></li></ul></li><li><p>语法教学</p><ul><li><a href="http://wowubuntu.com/markdown/basic.html" target="_blank" rel="noopener">http://wowubuntu.com/markdown/basic.html</a></li><li><a href="http://www.maxiang.info/" target="_blank" rel="noopener">http://www.maxiang.info/</a></li></ul></li></ol><h3 id="Atom"><a href="#Atom" class="headerlink" title="Atom"></a>Atom</h3><ul><li>下载地址：<a href="https://atom.io/" target="_blank" rel="noopener">https://atom.io/</a></li></ul><h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><ul><li>杜绝使用任何国产浏览器（前端|测试小伙伴除外）</li><li>务必使用这个星球上最好的浏览器——Google浏览器</li><li>插件推荐：<a href="https://wangwei.one/posts/4c3b6bcb.html">https://wangwei.one/posts/4c3b6bcb.html</a></li></ul><h2 id="Popular-macOS-cli"><a href="#Popular-macOS-cli" class="headerlink" title="Popular macOS cli"></a>Popular macOS cli</h2><table><thead><tr><th>软件</th><th>说明</th><th>安装</th></tr></thead><tbody><tr><td><a href="https://www.gnu.org/software/wget/" target="_blank" rel="noopener">wget</a></td><td>下载</td><td><code>brew install wget</code></td></tr><tr><td><a href="https://hisham.hm/htop/" target="_blank" rel="noopener">htop</a></td><td>进程查看管理</td><td><code>brew install htop</code></td></tr><tr><td><a href="https://ytdl-org.github.io/youtube-dl/index.html" target="_blank" rel="noopener">youtube-dl</a></td><td>youtube下载</td><td><code>brew install youtube-dl</code></td></tr><tr><td><a href="https://github.com/BurntSushi/ripgrep" target="_blank" rel="noopener">ripgrep</a></td><td>文件检索</td><td><code>brew install ripgrep</code></td></tr><tr><td><a href="https://www.imagemagick.org/" target="_blank" rel="noopener">imagemagisk</a></td><td>图片处理</td><td><code>brew install imagemagisk</code></td></tr><tr><td><a href="https://www.vim.org/" target="_blank" rel="noopener">vim</a></td><td>编辑器</td><td><code>brew install vim</code></td></tr><tr><td><a href="https://ohmyz.sh/" target="_blank" rel="noopener">zsh</a></td><td>命令终端</td><td><code>brew install zsh</code></td></tr><tr><td><a href="https://www.rarlab.com/rar_add.htm" target="_blank" rel="noopener">unrar</a></td><td>压缩/解压</td><td><code>brew install unrar</code></td></tr><tr><td><a href="https://www.jduck.net/blog/2014/09/30/gnu-paralell/" target="_blank" rel="noopener">parallel</a></td><td>并行处理</td><td><code>brew install parallel</code></td></tr><tr><td><a href="https://github.com/sivel/speedtest-cli" target="_blank" rel="noopener">speedtest-cli</a></td><td>速度测试</td><td><code>brew install speedtest-cli</code></td></tr></tbody></table><blockquote><p><a href="https://picocoder.io/best-homebrew-packages-for-mac/" target="_blank" rel="noopener">https://picocoder.io/best-homebrew-packages-for-mac/</a></p></blockquote>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java NIO Channel]]></title>
      <url>/posts/java-nio-channel.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>Java NIO（New IO）是Java的替代IO API（来自Java 1.4），意味着替代标准Java IO和Java Networking API。 Java NIO提供了与标准IO API不同的使用IO的方式。</p><a id="more"></a><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Java NIO 主要有以下三个核心组件：</p><ul><li>Channels</li><li>Buffers</li><li>Selectors</li></ul><p>除此之外，Java NIO还有许多类和组件，但是NIO的核心API主要还是由 <code>channel</code>,<code>buffer</code>和<code>selector</code> 构成。其余的组件，如<code>Pipe</code>和<code>FileLock</code>，只是与这三个核心组件一起使用的实用程序类，本篇文章先来来介绍Channel。</p><p>通常，NIO中的所有IO都以Channel开始，Channel（通道）有点像Stream（流），但是它又有一些区别：</p><ul><li>你既可以从Channle中读取数据，也可以向其写入数据。而Stream通常只能单向操作，要么读，要么写；</li><li>Channel支持异步读取或写入数据；</li><li>数据从Channel中读取到Buffer中，从Buffer写入到Channel中。</li></ul><p>示意图如下：</p><p><img src="https://img.i7years.com/blog/channels-buffers.png" alt="channels-buffers"></p><h3 id="Channel-实现类"><a href="#Channel-实现类" class="headerlink" title="Channel 实现类"></a>Channel 实现类</h3><p>以下是Java NIO中最重要的Channel实现类：</p><ul><li>FileChannel：从文件中读取数据，或写入数据到文件中</li><li>DatagramChannel：可以通过UDP协议在网络上读写数据。</li><li>SocketChannel：可以通过TCP协议在网络上读写数据。</li><li>ServerSocketChannel：监听传入的TCP连接，就像Web服务器一样。 对于每个传入连接，都会创建一个SocketChannel。</li></ul><p>本篇文章先来介绍FileChannel，其余的后面再来介绍。</p><h2 id="FileChannel"><a href="#FileChannel" class="headerlink" title="FileChannel"></a>FileChannel</h2><p>Java NIO FileChannel 是一个与文件相连接的通道。通过FileChannel你可以从文件中读取数据，以及写入数据到文件中。FileChannel可以看作是标准Java IO API的替代方案。</p><p>FileChannel只能以阻塞模式来使用，不能使用非阻塞模式。</p><h4 id="Opening-a-FileChannel"><a href="#Opening-a-FileChannel" class="headerlink" title="Opening a FileChannel"></a>Opening a FileChannel</h4><p>在使用FileChannel之前，你必须先打开它。你不能直接打开一个FileChannel，你需要通过InputStream,OutputStream或RandomAccessFile来获取FileChannel，调用 <code>getChannel()</code>。</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">FileOutputStream outputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">"file.txt"</span>);</span><br><span class="line">FileChannel fileChannel = outputStream.getChannel();</span><br><span class="line"></span><br><span class="line">FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(<span class="string">"file.txt"</span>);</span><br><span class="line">FileChannel fileChannel = inputStream.getChannel();</span><br><span class="line"></span><br><span class="line">RandomAccessFile accessFile = <span class="keyword">new</span> RandomAccessFile(<span class="string">"file.txt"</span>, <span class="string">"rw"</span>);</span><br><span class="line">FileChannel fileChannel = accessFile.getChannel();</span><br></pre></td></tr></table></figure><h4 id="Reading-Data-from-a-FileChannel"><a href="#Reading-Data-from-a-FileChannel" class="headerlink" title="Reading Data from a FileChannel"></a>Reading Data from a FileChannel</h4><p>调用 <code>read()</code> 方法可以从FileChannel中读取相应的数据。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ByteBuffer buf = ByteBuffer.allocate(<span class="number">48</span>);</span><br><span class="line"><span class="keyword">int</span> bytesRead = fileChannel.read(buf);</span><br></pre></td></tr></table></figure><p>首先需要先分配一个Buffer，然后调用 read() 方法 ，从Channel中读取数据到Buffer中。</p><p>返回的 int 数据，告诉我们有多少数据已被写入到了 buffer 中，如果返回 -1 ，则表示到达了EOF (end-of-file)。</p><h4 id="Writing-Data-to-a-FileChannel"><a href="#Writing-Data-to-a-FileChannel" class="headerlink" title="Writing Data to a FileChannel"></a>Writing Data to a FileChannel</h4><p>写入数据需要调用 FileChannel.write() 方法，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">String newData = <span class="string">"New String to wirte to file...."</span> + System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">ByteBuffer buffer = ByteBuffer.allocate(<span class="number">48</span>);</span><br><span class="line">buffer.clear();</span><br><span class="line">buffer.put(newData.getBytes());</span><br><span class="line">buffer.flip(); </span><br><span class="line"></span><br><span class="line">RandomAccessFile accessFile = <span class="keyword">new</span> RandomAccessFile(<span class="string">"file.txt"</span>, <span class="string">"rw"</span>);</span><br><span class="line">FileChannel fileChannel = accessFile.getChannel();</span><br><span class="line"><span class="keyword">while</span> (buffer.hasRemaining()) &#123;</span><br><span class="line">    fileChannel.write(buffer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于没法保证有多少bytes将会被写入到FileChannel中，因此需要将FileChannle.write() 方法在while循环中调用，指导Buffer中没有可写入的数据为止。</p><h4 id="Closing-a-FileChannel"><a href="#Closing-a-FileChannel" class="headerlink" title="Closing a FileChannel"></a>Closing a FileChannel</h4><p>用完FileChannel之后，必须将其关闭。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.close();</span><br></pre></td></tr></table></figure><h4 id="FileChannel-Position"><a href="#FileChannel-Position" class="headerlink" title="FileChannel Position"></a>FileChannel Position</h4><p>在读取或写入FileChannel时，你可以在特定位置执行此操作。</p><p>可以通过调用 <code>position()</code> 方法获取FileChannel对象的当前位置。也可以通过调用 <code>position(long pos)</code> 方法来设置FileChannel的位置。示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> pos = fileChannel.position();</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> newPos = <span class="number">12</span>;</span><br><span class="line">fileChannel.position(newPos);</span><br></pre></td></tr></table></figure><p>如果你在文件EOF之后设置position，并尝试从Channel中读取数据，将会返回 <code>-1</code> 的结束标志。</p><p>如果你在文件EOF之后设置position，并尝试写入数据到Channel中，文件将会扩展已符合设置的position，并容纳新的字节。这可能会导致“文件漏洞”，磁盘上的物理文件在写入数据中会存在间隙。</p><h4 id="FileChannel-Size"><a href="#FileChannel-Size" class="headerlink" title="FileChannel Size"></a>FileChannel Size</h4><p>方法 <code>size()</code> 返回channel所连接的文件的字节大小，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> fileSize = channel.size();</span><br></pre></td></tr></table></figure><h4 id="FileChannel-Truncate"><a href="#FileChannel-Truncate" class="headerlink" title="FileChannel Truncate"></a>FileChannel Truncate</h4><p>通过<code>FileChannel.truncate()</code>方法，你可以截取文件，例如截取某个FileChannel 1024个字节</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.truncate(<span class="number">1024</span>);</span><br></pre></td></tr></table></figure><h4 id="FileChannel-Force"><a href="#FileChannel-Force" class="headerlink" title="FileChannel Force"></a>FileChannel Force</h4><p><code>FileChannel.force()</code> 方法会将所有未写入的数据强制从channel刷到磁盘上。出于性能原因，操作系统可能会将数据缓存在内存中，因此在调用force()方法之前，无法保证写入Channel的数据是否写入到了磁盘中。</p><p><code>force()</code>有个boolean参数，表示是否需要刷新文件的mete data（元数据）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.force(<span class="keyword">true</span>)</span><br></pre></td></tr></table></figure><h3 id="Channel-to-Channel-Transfers"><a href="#Channel-to-Channel-Transfers" class="headerlink" title="Channel to Channel Transfers"></a>Channel to Channel Transfers</h3><p>你可以使用Java NIO将数据从一个Channel直接转移到另一个Channel上。假如这个Channel 是 FileChannel，那么你可以通过 transferTo() 和 transferFrom() 来实现。</p><p><img src="https://img.i7years.com/blog/channel-transfer.png" alt="channel-transfer"></p><h4 id="transferFrom"><a href="#transferFrom" class="headerlink" title="transferFrom()"></a>transferFrom()</h4><p>FileChannel.transferFrom() ：将数据从源Channel转移到目标Channel中。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">RandomAccessFile fromFile = <span class="keyword">new</span> RandomAccessFile(<span class="string">"fromFile.txt"</span>, <span class="string">"rw"</span>);</span><br><span class="line">FileChannel fromChannel = fromFile.getChannel();</span><br><span class="line"></span><br><span class="line">RandomAccessFile toFile = <span class="keyword">new</span> RandomAccessFile(<span class="string">"toFile.txt"</span>, <span class="string">"rw"</span>);</span><br><span class="line">FileChannel toChannel = toFile.getChannel();</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> position = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> count = fromChannel.size();</span><br><span class="line"></span><br><span class="line">toChannel.transferFrom(fromChannel, position, count);</span><br></pre></td></tr></table></figure><p>position：指定数据传输的起始位置。</p><p>count：指定最大的传输的字节数。</p><h4 id="transferTo"><a href="#transferTo" class="headerlink" title="transferTo()"></a>transferTo()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">RandomAccessFile fromFile = <span class="keyword">new</span> RandomAccessFile(<span class="string">"fromFile.txt"</span>, <span class="string">"rw"</span>);</span><br><span class="line">FileChannel fromChannel = fromFile.getChannel();</span><br><span class="line"></span><br><span class="line">RandomAccessFile toFile = <span class="keyword">new</span> RandomAccessFile(<span class="string">"toFile.txt"</span>, <span class="string">"rw"</span>);</span><br><span class="line">FileChannel toChannel = toFile.getChannel();</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> position = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> count = fromChannel.size();</span><br><span class="line"></span><br><span class="line">fromChannel.transferTo(position,count,toChannel);</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://tutorials.jenkov.com/java-nio/index.html" target="_blank" rel="noopener">http://tutorials.jenkov.com/java-nio/index.html</a></li><li><a href="http://tutorials.jenkov.com/java-nio/overview.html" target="_blank" rel="noopener">http://tutorials.jenkov.com/java-nio/overview.html</a></li><li><a href="http://tutorials.jenkov.com/java-nio/channels.html" target="_blank" rel="noopener">http://tutorials.jenkov.com/java-nio/channels.html</a></li><li><a href="http://tutorials.jenkov.com/java-nio/file-channel.html" target="_blank" rel="noopener">http://tutorials.jenkov.com/java-nio/file-channel.html</a></li><li><a href="http://tutorials.jenkov.com/java-nio/channel-to-channel-transfers.html" target="_blank" rel="noopener">http://tutorials.jenkov.com/java-nio/channel-to-channel-transfers.html</a></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NIO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux、Mac命令清单]]></title>
      <url>/posts/list-of-common-linux-and-mac-commands.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>整理一下自己平时用的比较多的一些工具和命令，便于后期查阅。</p><a id="more"></a><h2 id="Linux系统"><a href="#Linux系统" class="headerlink" title="Linux系统"></a>Linux系统</h2><p>强烈推荐一个网站：<a href="http://cheat.sh/，能够查询所有linux系统相关的命令。" target="_blank" rel="noopener">http://cheat.sh/，能够查询所有linux系统相关的命令。</a></p><h3 id="磁盘类"><a href="#磁盘类" class="headerlink" title="磁盘类"></a>磁盘类</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询系统磁盘剩余空间</span></span><br><span class="line">df -h</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前空间文件的大小</span></span><br><span class="line">du -h</span><br></pre></td></tr></table></figure><h3 id="文件操作类"><a href="#文件操作类" class="headerlink" title="文件操作类"></a>文件操作类</h3><h4 id="本地操作"><a href="#本地操作" class="headerlink" title="本地操作"></a>本地操作</h4><ol><li><p>查询 <code>path1</code>目录中的java文件：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ find path1 -type f -name <span class="string">"*.java"</span></span><br></pre></td></tr></table></figure></li><li><p>从 <code>path1</code> 目录同步 java 文件到 <code>path2</code> 中，并且: 1)同步目录结构;2)删除源文件;3)删除path2中的空文件夹</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rsync -arv --prune-empty-dirs --remove-source-files --include=<span class="string">'*/'</span> --include=<span class="string">'*.java'</span> --exclude=<span class="string">'*'</span> path1 path2</span><br></pre></td></tr></table></figure></li><li><p>删除 <code>path1</code> 目录中所有的空文件夹：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ find path1 -type d -depth -empty -exec rmdir <span class="string">"&#123;&#125;"</span> \;</span><br></pre></td></tr></table></figure></li></ol><h4 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h4><ol><li><p>同步远程服务器上的文件到本地</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rsync -avz --progress -e <span class="string">"ssh -p <span class="variable">$portNumber</span>"</span> user@remoteip:/path/to/files/ /local/path/</span><br></pre></td></tr></table></figure></li></ol><h3 id="进程-amp-端口"><a href="#进程-amp-端口" class="headerlink" title="进程&amp;端口"></a>进程&amp;端口</h3><ol><li><p>检查端口运行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ netstat -vanp tcp | grep <span class="variable">$port</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo lsof -i tcp:<span class="variable">$port</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="统计分析"><a href="#统计分析" class="headerlink" title="统计分析"></a>统计分析</h3><p>统计日志中的平均响应时间：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cat witness.log | grep latency | \awk '&#123;sum+=$14&#125; END &#123;print "Count: ",NR;print "Avg :",sum/NR&#125;'</span><br></pre></td></tr></table></figure><hr><h2 id="Mac系统"><a href="#Mac系统" class="headerlink" title="Mac系统"></a>Mac系统</h2><h3 id="brew"><a href="#brew" class="headerlink" title="brew"></a>brew</h3><blockquote><p>官网：<a href="https://brew.sh/" target="_blank" rel="noopener">https://brew.sh/</a></p></blockquote><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ruby -e <span class="string">"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span></span><br></pre></td></tr></table></figure><h5 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ brew update <span class="comment">#更新brew</span></span><br><span class="line">$ brew doctor <span class="comment"># 诊断</span></span><br><span class="line">$ brew upgrade <span class="comment"># 升级mac上的软件包</span></span><br><span class="line">$ brew cleanup <span class="comment"># 清除过时的就版本软件</span></span><br><span class="line">$ brew list  <span class="comment"># 列出本机通过brew安装的所有软件</span></span><br></pre></td></tr></table></figure><blockquote><p>以安装 nginx 为例</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ brew search nginx <span class="comment">#模糊搜索关键字openssl</span></span><br><span class="line">$ brew install nginx  <span class="comment">#安装openssl</span></span><br><span class="line">$ brew info nginx <span class="comment">#查询openssl的安装信息</span></span><br><span class="line">$ brew uninstall nginx <span class="comment">#卸载openssl</span></span><br><span class="line">$ brew uninstall --ignore-dependencies nginx <span class="comment">#强行卸载openssl</span></span><br><span class="line">$ brew upgrade nginx <span class="comment"># 升级openssl，如果不加软件名，就更新所有可以更新的软件</span></span><br><span class="line">$ brew service start|stop|restart nginx <span class="comment"># 启动/停止/重启 nginx服务</span></span><br></pre></td></tr></table></figure><h3 id="Jenv"><a href="#Jenv" class="headerlink" title="Jenv"></a>Jenv</h3><blockquote><p>官网：<a href="http://www.jenv.be/" target="_blank" rel="noopener">http://www.jenv.be/</a></p></blockquote><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><h5 id="清除剪切板内容"><a href="#清除剪切板内容" class="headerlink" title="清除剪切板内容"></a>清除剪切板内容</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pbcopy &lt; /dev/null</span><br></pre></td></tr></table></figure><h5 id="清理DNS缓存"><a href="#清理DNS缓存" class="headerlink" title="清理DNS缓存"></a>清理DNS缓存</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo killall -HUP mDNSResponder;sudo killall mDNSResponderHelper;sudo dscacheutil -flushcache</span><br></pre></td></tr></table></figure><h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><ul><li><a href="http://cheat.sh/" target="_blank" rel="noopener">http://cheat.sh/</a></li><li><a href="https://www.cyberciti.biz/" target="_blank" rel="noopener">https://www.cyberciti.biz/</a></li><li><a href="https://www.digitalocean.com/" target="_blank" rel="noopener">https://www.digitalocean.com/</a></li></ul>]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Mac </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[运维资料整理]]></title>
      <url>/posts/devops-article-collection.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>收集整理一些有关运维相关的操作指南</p><a id="more"></a><h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><ul><li>Linux逆向相关的学习资料：<a href="http://www.cis.syr.edu/~wedu/seed/" target="_blank" rel="noopener">SEED LABs</a></li><li><a href="https://www.cyberciti.biz/" target="_blank" rel="noopener">cyberciti</a></li><li><a href="http://linux.vbird.org/" target="_blank" rel="noopener">Linux私房菜</a></li></ul><h1 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h1><ul><li><a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-a-firewall-using-firewalld-on-centos-7" target="_blank" rel="noopener">防火墙配置</a></li><li><a href="https://www.cyberciti.biz/faq/unix-linux-check-if-port-is-in-use-command/" target="_blank" rel="noopener">端口运行检查</a></li></ul><h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><ul><li><a href="https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-centos-7" target="_blank" rel="noopener">Nginx安装</a></li><li><a href="https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-centos-7" target="_blank" rel="noopener">Let’s Encrypt 安装</a></li><li><a href="https://www.cyberciti.biz/tips/linux-unix-bsd-nginx-webserver-security.html" target="_blank" rel="noopener">Nginx安全设置</a></li><li><a href="https://github.com/denji/nginx-tuning" target="_blank" rel="noopener">Nginx性能优化</a></li></ul><h1 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h1><ul><li><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html</a></li></ul>]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> DevOps </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kindle电子书转Epub]]></title>
      <url>/posts/kindle-eBook-to-epub.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://img.i7years.com/blog/blue-background-blue-sky-close-up-1864189.jpg" alt="blue-background-blue-sky-close-up"></p><p>趁着五一小长期，把自己的电子书库整理了一番，最主要的工作是将Kindle电子书合并到了iBooks，实现了电子书的统一管理，方便Spotlight检索。用过Kindle和iBooks的同学，都应该清楚，这两者在阅读体验上没多大差别，但iBooks在做读书笔记，文字检索，终端数据同步等方面甩Kindle好几条街。</p><p>试想一下，如果没有检索功能，想要在几百本甚至是上千本书中，找到自己想要的信息，堪比大海捞针，信息检索俨然已成为我们这个时代的刚性需求，快速定位自己想要的知识和素材，将更多的注意力、更多的时间留给大脑去思考、去写作，才是最重要的事情。</p><a id="more"></a><p>今天这篇文章主要教你如何通过Calibre将Kindle for Mac中的电子书自动导入到iBooks中去。</p><blockquote><ol><li>使用 Kindle for Mac 将你在 amazon 上购买的电子书同步到本地目录（暂且命名为path）；</li><li>使用 Mac 自带的 Automator 自动 Copy 上一步path下的电子书到另外一个文件夹（暂且命名为forder）；</li><li>使用 Calibre 自动加载上一步forder中的Kindle电子书，并自动转化为ePub格式；</li><li>将上一步转化好的ePub电子书到手动导入到iBooks中去（唯一一个需要手动操作的步骤）</li></ol></blockquote><hr><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>macOS 系统</li></ul><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><ul><li>下载并安装<a href="https://mac.filehorse.com/download-kindle-for-mac/" target="_blank" rel="noopener">Kindle for Mac</a> ，下载 <code>1.17.0</code> 版本，<strong>不要安装最新版本</strong>；</li><li>下载并安装<a href="https://calibre-ebook.com/download" target="_blank" rel="noopener">Calibre</a>；</li></ul><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="Step-1-同步Kindle电子书到本地"><a href="#Step-1-同步Kindle电子书到本地" class="headerlink" title="Step 1. 同步Kindle电子书到本地"></a>Step 1. 同步Kindle电子书到本地</h4><h5 id="登录Kindle-for-Mac"><a href="#登录Kindle-for-Mac" class="headerlink" title="登录Kindle for Mac"></a>登录Kindle for Mac</h5><blockquote><p>注意：由于amazon不同国家间账号的数据互不相通，所以登录时请选择正确的登录域名，国内用户请选择amazon.cn</p></blockquote><p><img src="https://img.i7years.com/bolgReg_kindle4Mac.png" alt="register"></p><h5 id="同步电子书到本地"><a href="#同步电子书到本地" class="headerlink" title="同步电子书到本地"></a>同步电子书到本地</h5><ul><li><p>登录成功后，使用 ⌘ + R 同步电子书</p></li><li><p>在Kindle for Mac操作区外，使用 ⌘ + Shift + G 打开 Go to Folder，输入以下路劲：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/Library/Containers/com.amazon.Kindle/<span class="keyword">Data</span>/Library/Application Support/Kindle/My Kindle Content/</span><br></pre></td></tr></table></figure><p><img src="https://img.i7years.com/bolgGo2Folder.png" alt="gotofolder"></p></li><li><p>以 .azw 或 .mobi 结尾的文件就是我们要找的Kindle电子书</p><p><img src="https://img.i7years.com/bolgKindleItems.png" alt="MyKindleContent"></p></li></ul><h4 id="Step-2-设置Automator自动复制Kindle-Books"><a href="#Step-2-设置Automator自动复制Kindle-Books" class="headerlink" title="Step 2. 设置Automator自动复制Kindle Books"></a>Step 2. 设置Automator自动复制Kindle Books</h4><ul><li><p>打开Mac 自带的应用软件 Automator；</p></li><li><p>选择”Folder Action”</p><p><img src="https://img.i7years.com/bolg/automator1.png" alt=""></p></li><li><p>点击右侧下拉选框 “Choose folder”，选择other，通过 ⌘ + Shift + G 可以快速定位到前面所说的Kindle电子书目录：My Kindle Content</p><p><img src="https://img.i7years.com/bolg/automator2.png" alt=""></p></li><li><p>选择 “Files &amp; Folders” ——&gt; 选择 “Copy Finder Items” ——&gt; 指定文件Copy的目标文件夹，我的路劲为 ~/Documents/003-Books/Kindle4MacItems，这个看个人喜好</p><p><img src="https://img.i7years.com/bolg/automator3.png" alt=""></p></li><li><p>按住 ⌘ + S 保存上面设置的 folder action.</p><p><img src="https://img.i7years.com/bolg/automator4.png" alt=""></p></li></ul><p>现在我们可以做个测试看看Automator是否生效</p><ul><li><p>打开Kindle for Mac，从Downloaded Items中删除一本书</p></li><li><p>双击 Archived Items 下刚刚删被除的书籍，下载完成后，会出现Automator的提示弹框，证明Automator copy设置成功，点击Continue即可。</p><blockquote><p>在Step 2中设置的Automator脚本，会随时监听My Kindle Content目录下的变化，一旦有新增书籍， Automator会自动Copy书籍到Kindle4MacItems目录下</p></blockquote><p><img src="https://img.i7years.com/blog/automator7.png" alt=""></p></li></ul><h4 id="Step-3-安装Calibre-DeDRM插件"><a href="#Step-3-安装Calibre-DeDRM插件" class="headerlink" title="Step 3. 安装Calibre DeDRM插件"></a>Step 3. 安装Calibre DeDRM插件</h4><blockquote><p>DeDRM 可以移除Kindle电子书上的DRM保护，让Calibre自由转化Kindle电子书为你想要的格式</p></blockquote><ul><li><p>安装<a href="https://calibre-ebook.com/download" target="_blank" rel="noopener">Calibre</a>，设置工具栏上的 <code>Calibre Library</code> 地址，这个地址为Calibre的书库地址；</p></li><li><p>下载<a href="https://github.com/apprenticeharper/DeDRM_tools/archive/v6.5.3.zip" target="_blank" rel="noopener">DeDRM Tools</a>并解压，找到 DeDRM_plugin.zip 文件，相对路劲DeDRM_tools-6.5.3/DeDRM_calibre_plugin/DeDRM_plugin.zip</p></li><li><p>安装DeDRM_plugin.zip</p><p>Calibre → Preferences ——&gt; Plugins ——&gt; Load plugin from file ——&gt; 选取 DeDRM_plugin.zip ——&gt; 重启 Calibre.</p></li></ul><p><img src="https://img.i7years.com/bolg/calibre1.png" alt=""></p><p><img src="https://img.i7years.com/bolg/calibre2.png" alt=""></p><h4 id="Step-4-设置Calibre自动加载Kindle电子书并自动转化为ePub格式"><a href="#Step-4-设置Calibre自动加载Kindle电子书并自动转化为ePub格式" class="headerlink" title="Step 4. 设置Calibre自动加载Kindle电子书并自动转化为ePub格式"></a>Step 4. 设置Calibre自动加载Kindle电子书并自动转化为ePub格式</h4><h5 id="设置输出格式为ePub"><a href="#设置输出格式为ePub" class="headerlink" title="设置输出格式为ePub"></a>设置输出格式为ePub</h5><ul><li><p>Cabler ——&gt; Preferences ——&gt; Behavior</p><p><img src="https://img.i7years.com/bolg/calibre6.png" alt=""></p></li></ul><h5 id="设置自动加载Kindle电子书并自动转化"><a href="#设置自动加载Kindle电子书并自动转化" class="headerlink" title="设置自动加载Kindle电子书并自动转化"></a>设置自动加载Kindle电子书并自动转化</h5><ul><li><p>Calibre ——&gt; Preferences ——&gt; Adding books ——&gt; The Add Process</p><p><img src="https://img.i7years.com/bolg/calibre3.png" alt=""></p><p><img src="https://img.i7years.com/bolg/calibre4.png" alt=""></p></li><li><p>Calibre ——&gt; Preferences ——&gt; Adding books ——&gt; Automatic Adding</p><p>选择Calibre要自动加载Kindle电子书目录，也就是我们在 <strong>Step2</strong> 中设置的复制目录 Kindle4MacItmes</p><blockquote><p>Calibre加载Kindle电子书后会自动删除源目录下的电子书，这也是为什么我们要使用Automator将Kindle for Mac 下的电子书复制到一个新的目录 Kindle4MacItems 下的原因</p></blockquote><p><img src="https://img.i7years.com/bolg/calibre5.png" alt=""></p></li></ul><h4 id="Step-5-使用iBooks打开-Calibre-Library-下ePub电子书"><a href="#Step-5-使用iBooks打开-Calibre-Library-下ePub电子书" class="headerlink" title="Step 5. 使用iBooks打开 Calibre Library 下ePub电子书"></a>Step 5. 使用iBooks打开 Calibre Library 下ePub电子书</h4><p>只有这一步是需要我们手动去完成的，使用 iBooks 打开转化后的ePub，你会发现文字排版、图片、表格等格式都与Kindle电子书一模一样。</p><p>嗯，就这样，希望对你有所帮助。</p><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><p>DeDRM 是为了买来书后自己用的更方便，请不要传播盗版……</p><blockquote><p>参考：<a href="http://j4n.co/blog/kindle_to_ibooks" target="_blank" rel="noopener">http://j4n.co/blog/kindle_to_ibooks</a></p></blockquote>]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Kindle </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker化Java应用程序]]></title>
      <url>/posts/dockerized-your-java-application.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>当你对Java应用程序进行容器化操作时，Dockerfile 文件是你要用到的基础组件。</p><a id="more"></a><h2 id="Dockerfile指令介绍"><a href="#Dockerfile指令介绍" class="headerlink" title="Dockerfile指令介绍"></a>Dockerfile指令介绍</h2><p>这部分内容请查看官方文档：<a href="https://docs.docker.com/engine/reference/builder/" target="_blank" rel="noopener">https://docs.docker.com/engine/reference/builder/</a></p><h2 id="为简单的Java工程编写Dockerfile"><a href="#为简单的Java工程编写Dockerfile" class="headerlink" title="为简单的Java工程编写Dockerfile"></a>为简单的Java工程编写Dockerfile</h2><p>由于 <a href="https://hub.docker.com/_/openjdk/" target="_blank" rel="noopener">官方</a> 已经有了OpenJDK 镜像，因此我们不需要为 OpenJDK 再写一个Dockerfile。</p><p>我们这里来为 OracleJDK 创建一个Dockerfile，这个官方并未提供。</p><h3 id="编写Dockerfile"><a href="#编写Dockerfile" class="headerlink" title="编写Dockerfile"></a>编写Dockerfile</h3><p>新建一个文件夹，并在其中新建一个名为 Dockerfile 的文件，里面内容如下：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Dockerfile</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span>  phusion/baseimage:<span class="number">0.9</span>.<span class="number">17</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">MAINTAINER</span>  Author Name &lt;author@email.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span> echo "deb http://archive.ubuntu.com/ubuntu trusty main universe" &gt; /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line">RUN apt-get -y update</span><br><span class="line"></span><br><span class="line">RUN DEBIAN_FRONTEND=noninteractive apt-get install -y -q python-software-properties software-properties-common</span><br><span class="line"></span><br><span class="line">ENV JAVA_VER 8</span><br><span class="line">ENV JAVA_HOME /usr/lib/jvm/java-8-oracle</span><br><span class="line"></span><br><span class="line">RUN echo 'deb http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main' &gt;&gt; /etc/apt/sources.list &amp;&amp; \</span><br><span class="line">    echo 'deb-src http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main' &gt;&gt; /etc/apt/sources.list &amp;&amp; \</span><br><span class="line">    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys C2518248EEA14886 &amp;&amp; \</span><br><span class="line">    apt-get update &amp;&amp; \</span><br><span class="line">    echo oracle-java$&#123;JAVA_VER&#125;-installer shared/accepted-oracle-license-v1-1 select true | sudo /usr/bin/debconf-set-selections &amp;&amp; \</span><br><span class="line">    apt-get install -y --force-yes --no-install-recommends oracle-java$&#123;JAVA_VER&#125;-installer oracle-java$&#123;JAVA_VER&#125;-set-default &amp;&amp; \</span><br><span class="line">    apt-get clean &amp;&amp; \</span><br><span class="line">    rm -rf /var/cache/oracle-jdk$&#123;JAVA_VER&#125;-installer</span><br><span class="line"></span><br><span class="line">RUN update-java-alternatives -s java-8-oracle</span><br><span class="line"></span><br><span class="line">RUN echo "export JAVA_HOME=/usr/lib/jvm/java-8-oracle" &gt;&gt; ~/.bashrc</span><br><span class="line"></span><br><span class="line">RUN apt-get clean &amp;&amp; rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*</span><br><span class="line"></span><br><span class="line">CMD ["/sbin/my_init"]</span><br></pre></td></tr></table></figure><h4 id="设置基础镜像与作者"><a href="#设置基础镜像与作者" class="headerlink" title="设置基础镜像与作者"></a>设置基础镜像与作者</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Dockerfile</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span>  phusion/baseimage:<span class="number">0.9</span>.<span class="number">17</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">MAINTAINER</span>  Author Name &lt;author@email.com&gt;</span><br></pre></td></tr></table></figure><h4 id="更新Ubuntu源地址"><a href="#更新Ubuntu源地址" class="headerlink" title="更新Ubuntu源地址"></a>更新Ubuntu源地址</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span> echo "deb http://archive.ubuntu.com/ubuntu trusty main universe" &gt; /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line">RUN apt-get -y update</span><br></pre></td></tr></table></figure><h4 id="安装python-software-properties"><a href="#安装python-software-properties" class="headerlink" title="安装python-software-properties"></a>安装python-software-properties</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span> DEBIAN_FRONTEND=noninteractive apt-get install -y -q python-software-properties software-properties-common</span><br></pre></td></tr></table></figure><h5 id="安装Oracle-Java-8"><a href="#安装Oracle-Java-8" class="headerlink" title="安装Oracle Java 8"></a>安装Oracle Java 8</h5><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENV</span> JAVA_VER <span class="number">8</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME /usr/lib/jvm/java-<span class="number">8</span>-oracle</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span> echo 'deb http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main' &gt;&gt; /etc/apt/sources.list &amp;&amp; \</span><br><span class="line">    echo 'deb-src http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main' &gt;&gt; /etc/apt/sources.list &amp;&amp; \</span><br><span class="line">    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys C2518248EEA14886 &amp;&amp; \</span><br><span class="line">    apt-get update &amp;&amp; \</span><br><span class="line">    echo oracle-java$&#123;JAVA_VER&#125;-installer shared/accepted-oracle-license-v1-1 select true | sudo /usr/bin/debconf-set-selections &amp;&amp; \</span><br><span class="line">    apt-get install -y --force-yes --no-install-recommends oracle-java$&#123;JAVA_VER&#125;-installer oracle-java$&#123;JAVA_VER&#125;-set-default &amp;&amp; \</span><br><span class="line">    apt-get clean &amp;&amp; \</span><br><span class="line">    rm -rf /var/cache/oracle-jdk$&#123;JAVA_VER&#125;-installer</span><br></pre></td></tr></table></figure><h4 id="设置Oracle-Java为默认"><a href="#设置Oracle-Java为默认" class="headerlink" title="设置Oracle Java为默认"></a>设置Oracle Java为默认</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span> update-java-alternatives -s java-8-oracle</span><br><span class="line"></span><br><span class="line">RUN echo "export JAVA_HOME=/usr/lib/jvm/java-8-oracle" &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure><h4 id="清除APT"><a href="#清除APT" class="headerlink" title="清除APT"></a>清除APT</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span> apt-get clean &amp;&amp; rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*</span><br></pre></td></tr></table></figure><h5 id="使用初始化系统"><a href="#使用初始化系统" class="headerlink" title="使用初始化系统"></a>使用初始化系统</h5><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CMD</span> ["/sbin/my_init"]</span><br></pre></td></tr></table></figure><h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -f Dockerfile -t demo/oracle-java:<span class="number">8</span> .</span><br></pre></td></tr></table></figure><blockquote><p><code>-f</code>: 指定Dockerfile</p><p><code>-t</code>: 指定镜像名称。<code>demo/oracle-java</code>为名称，冒号后面的 <code>8</code> 为标签或版本</p><p><code>.</code>: 指定为当前目录。当前目录的文件和目录将作为构建工件发送到Docker守护程序中去。</p></blockquote><h3 id="测试镜像"><a href="#测试镜像" class="headerlink" title="测试镜像"></a>测试镜像</h3><p>在前面的目录中，新增一个java文件 <code>Main.java</code>，内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello, World"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --rm -v <span class="variable">$PWD:</span>/app -w /app demo/oracle-java:<span class="number">8</span> javac Main.java</span><br></pre></td></tr></table></figure><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --rm -v <span class="variable">$PWD:</span>/app -w /app demo/oracle-java:<span class="number">8</span> java Main</span><br></pre></td></tr></table></figure><p>出现 <code>Hello, World</code> 则表示成功。</p><p>如果你想使用官方的 OpenJDK 来运行你的代码，并不需要重新编写一个Dockerfile，只需要指定一下即可：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --rm -v <span class="variable">$PWD:</span>/app -w /app java:<span class="number">8</span> javac Main.java</span><br><span class="line"></span><br><span class="line">$ docker run --rm -v <span class="variable">$PWD:</span>/app -w /app java:<span class="number">8</span> java Main</span><br></pre></td></tr></table></figure><h2 id="为Maven工程编写Dockerfile"><a href="#为Maven工程编写Dockerfile" class="headerlink" title="为Maven工程编写Dockerfile"></a>为Maven工程编写Dockerfile</h2><p>如果您将OpenJDK与Maven一起使用，则不一定需要编写Dockerfile，因为您可以使用官方Docker Hub存储库的Maven版本。 但是，如果您将Oracle JDK与Maven一起使用，则需要编写自己的Dockerfile。</p><p>我们使用上面构建好的 <code>demo/oracle-jdk:8</code> 镜像作为我们这一步的基础镜像。</p><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Dockerfile</span></span><br><span class="line"><span class="keyword">FROM</span> demo/oracle-java:<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> MAVEN_VERSION <span class="number">3.5</span>.<span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span> mkdir -p /usr/share/maven \</span><br><span class="line">  &amp;&amp; curl -fsSL http://apache.osuosl.org/maven/maven-3/$MAVEN_VERSION/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz \</span><br><span class="line">    | tar -xzC /usr/share/maven --strip-components=1 \</span><br><span class="line">  &amp;&amp; ln -s /usr/share/maven/bin/mvn /usr/bin/mvn</span><br><span class="line"></span><br><span class="line">ENV MAVEN_HOME /usr/share/maven</span><br><span class="line"></span><br><span class="line">VOLUME /root/.m2</span><br><span class="line"></span><br><span class="line">CMD ["mvn"]</span><br></pre></td></tr></table></figure><h3 id="构建Docker镜像"><a href="#构建Docker镜像" class="headerlink" title="构建Docker镜像"></a>构建Docker镜像</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -f Dockerfile -t demo/maven:<span class="number">3.5</span>-jdk-<span class="number">8</span> .</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it --rm -v <span class="string">"<span class="variable">$PWD</span>"</span>:/app -w /app demo/maven:<span class="number">3.5</span>-jdk-<span class="number">8</span> mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart -Dinte</span><br></pre></td></tr></table></figure><p>当前目录下将会创建一个 my-app 目录，里面会有一个我们创建的maven工程</p><h3 id="构建Maven工程"><a href="#构建Maven工程" class="headerlink" title="构建Maven工程"></a>构建Maven工程</h3><p>进入工程目录:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd  my-app</span><br></pre></td></tr></table></figure><p>构建工程:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it --rm -v <span class="string">"<span class="variable">$PWD</span>"</span>:/app -w /app demo/maven:<span class="number">3.5</span>-jdk-<span class="number">8</span> mvn package</span><br></pre></td></tr></table></figure><p>测试JAR包:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it --rm -v <span class="string">"<span class="variable">$PWD</span>"</span>:/app -w /app demo/maven:<span class="number">3.5</span>-jdk-<span class="number">8</span> java -cp target/my-app-<span class="number">1.0</span>-SNAPSHOT.jar com.mycompany.app.App</span><br></pre></td></tr></table></figure><p>正确输出:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><h2 id="为SpringMVC应用编写Dockerfile"><a href="#为SpringMVC应用编写Dockerfile" class="headerlink" title="为SpringMVC应用编写Dockerfile"></a>为SpringMVC应用编写Dockerfile</h2><p>基于Spring的应用程序的Docker化有两种方法：</p><ul><li>使用已经存在的Maven-base镜像作为基础镜像，并且安装Tomcat，运行web程序。</li><li>使用已经存在的Maven-base镜像来编译和打包应用程序。然后使用另一个Tomcat-base Docker容器来部署这个应用。</li></ul><p>下面我们来分别介绍一下这两种方法.</p><h3 id="基于Mave-base镜像安装Tomcat"><a href="#基于Mave-base镜像安装Tomcat" class="headerlink" title="基于Mave-base镜像安装Tomcat"></a>基于Mave-base镜像安装Tomcat</h3><p>新建一个文件夹，同时新建一个Dockerfile文件，内容如下：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Dockerfile</span></span><br><span class="line"><span class="keyword">FROM</span> demo/maven:<span class="number">3.5</span>-jdk-<span class="number">8</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> Wangwei &lt;w7years@gmail.com&gt;</span><br><span class="line"><span class="keyword">RUN</span> apt-get update &amp;&amp; \</span><br><span class="line">    apt-get install -yq --no-install-recommends wget pwgen ca-certificates &amp;&amp; \</span><br><span class="line">    apt-get clean &amp;&amp; \</span><br><span class="line">    rm -rf /var/lib/apt/lists/*</span><br><span class="line">ENV TOMCAT_MAJOR_VERSION 8</span><br><span class="line">ENV TOMCAT_MINOR_VERSION 8.5.33</span><br><span class="line">ENV CATALINA_HOME /tomcat</span><br></pre></td></tr></table></figure><h4 id="安装Tomcat"><a href="#安装Tomcat" class="headerlink" title="安装Tomcat"></a>安装Tomcat</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span> wget -q https://archive.apache.org/dist/tomcat/tomcat-$&#123;TOMCAT_MAJOR_VERSION&#125;/v$&#123;TOMCAT_MINOR_VERSION&#125;/bin/apache-tomcat-$&#123;TOMCAT_MINOR_VERSION&#125;.tar.gz &amp;&amp; \</span><br><span class="line">	wget -qO- https://archive.apache.org/dist/tomcat/tomcat-$&#123;TOMCAT_MAJOR_VERSION&#125;/v$&#123;TOMCAT_MINOR_VERSION&#125;/bin/apache-tomcat-$&#123;TOMCAT_MINOR_VERSION&#125;.tar.gz.md5 | md5sum -c - &amp;&amp; \</span><br><span class="line">	tar zxf apache-tomcat-*.tar.gz &amp;&amp; \</span><br><span class="line"> 	rm apache-tomcat-*.tar.gz &amp;&amp; \</span><br><span class="line"> 	mv apache-tomcat* tomcat</span><br><span class="line"></span><br><span class="line">ADD create_tomcat_admin_user.sh /create_tomcat_admin_user.sh</span><br><span class="line">RUN mkdir /etc/service/tomcat</span><br><span class="line">ADD run.sh /etc/service/tomcat/run</span><br><span class="line">RUN chmod +x /*.sh</span><br><span class="line">RUN chmod +x /etc/service/tomcat/run</span><br><span class="line"></span><br><span class="line">EXPOSE 8080</span><br></pre></td></tr></table></figure><h4 id="使用baseimage-docker的init系统"><a href="#使用baseimage-docker的init系统" class="headerlink" title="使用baseimage-docker的init系统"></a>使用baseimage-docker的init系统</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CMD</span> ["/sbin/my_init"]</span><br></pre></td></tr></table></figure><h4 id="创建Tomcat-管理员"><a href="#创建Tomcat-管理员" class="headerlink" title="创建Tomcat 管理员"></a>创建Tomcat 管理员</h4><p>在相同的目录下新建一个 <code>create_tomcat_admin_user.sh</code> 文件，内容如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">!/bin/bash</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -f /.tomcat_admin_created ]; then</span><br><span class="line">    echo <span class="string">"Tomcat 'admin' user already created"</span></span><br><span class="line">    <span class="keyword">exit</span> <span class="number">0</span></span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h4 id="生成密码"><a href="#生成密码" class="headerlink" title="生成密码"></a>生成密码</h4><p>添加以下脚本用于生成密码：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">PASS=$&#123;TOMCAT_PASS:-$(pwgen -s <span class="number">12</span> <span class="number">1</span>)&#125;</span><br><span class="line">_word=$( [ $&#123;TOMCAT_PASS&#125; ] &amp;&amp; echo <span class="string">"preset"</span> || echo <span class="string">"random"</span> )</span><br><span class="line"></span><br><span class="line">echo <span class="string">"=&gt; Creating an admin user with a $&#123;_word&#125; password in Tomcat"</span></span><br><span class="line">sed -i -r <span class="string">'s/&lt;\/tomcat-users&gt;//'</span> $&#123;CATALINA_HOME&#125;/conf/tomcat-users.xml</span><br><span class="line">echo <span class="string">'&lt;role rolename="manager-gui"/&gt;'</span> &gt;&gt; $&#123;CATALINA_HOME&#125;/conf/tomcat-users.xml</span><br><span class="line">echo <span class="string">'&lt;role rolename="manager-script"/&gt;'</span> &gt;&gt; $&#123;CATALINA_HOME&#125;/conf/tomcat-users.xml</span><br><span class="line">echo <span class="string">'&lt;role rolename="manager-jmx"/&gt;'</span> &gt;&gt; $&#123;CATALINA_HOME&#125;/conf/tomcat-users.xml</span><br><span class="line">echo <span class="string">'&lt;role rolename="admin-gui"/&gt;'</span> &gt;&gt; $&#123;CATALINA_HOME&#125;/conf/tomcat-users.xml</span><br><span class="line">echo <span class="string">'&lt;role rolename="admin-script"/&gt;'</span> &gt;&gt; $&#123;CATALINA_HOME&#125;/conf/tomcat-users.xml</span><br><span class="line">echo <span class="string">"&lt;user username=\"</span>admin\<span class="string">" password=\"</span>$&#123;PASS&#125;\<span class="string">" roles=\"</span>manager-gui,manager-script,manager-jmx,admin-gui, admin-script\<span class="string">"/&gt;"</span> &gt;&gt; $&#123;CATALINA_HOME&#125;/conf/tomcat-users.xml</span><br><span class="line">echo <span class="string">'&lt;/tomcat-users&gt;'</span> &gt;&gt; $&#123;CATALINA_HOME&#125;/conf/tomcat-users.xml</span><br><span class="line">echo <span class="string">"=&gt; Done!"</span></span><br><span class="line">touch /.tomcat_admin_created</span><br><span class="line"></span><br><span class="line">echo <span class="string">"========================================================================"</span></span><br><span class="line">echo <span class="string">"You can now configure to this Tomcat server using:"</span></span><br><span class="line">echo <span class="string">""</span></span><br><span class="line">echo <span class="string">"    admin:$&#123;PASS&#125;"</span></span><br><span class="line">echo <span class="string">""</span></span><br><span class="line">echo <span class="string">"========================================================================"</span></span><br></pre></td></tr></table></figure><p><code>create_tomcat_admin_user.sh</code> 用于创建Tomcat管理员。另外在创建一个 <code>run.sh</code> 文件，用于执行 <code>create_tomcat_admin_user.sh</code> 并reload Tomcat 。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">!/bin/bash</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -f /.tomcat_admin_created ]; then</span><br><span class="line">    /create_tomcat_admin_user.sh</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">exec $&#123;CATALINA_HOME&#125;/bin/catalina.sh run</span><br></pre></td></tr></table></figure><h4 id="构建Docker镜像-1"><a href="#构建Docker镜像-1" class="headerlink" title="构建Docker镜像"></a>构建Docker镜像</h4><p>使用以下命令构建docker镜像：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -f Dockerfile -t demo/spring:maven-<span class="number">3.5</span>-jdk-<span class="number">8</span> .</span><br></pre></td></tr></table></figure><p>clone测试工程</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone  https://github.com/atifsaddique211f/spring-maven-sample.git</span><br></pre></td></tr></table></figure><p>构建并打包工程</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd spring-maven-sample</span><br><span class="line">$ docker run -it --rm -v <span class="string">"<span class="variable">$PWD</span>"</span>:/app -w /app demo/spring:maven-<span class="number">3.5</span>-jdk-<span class="number">8</span> mvn clean install</span><br></pre></td></tr></table></figure><p>该步骤将会生成一个war包：<code>target/springwebapp.war</code></p><p>copy这个war包到Tomcat webapps 目录下</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it -d --name spring -p <span class="number">8080</span>:<span class="number">8080</span> -v <span class="string">"<span class="variable">$PWD</span>"</span>:/app demo/spring:maven-<span class="number">3.5</span>-jdk-<span class="number">8</span> bash -c <span class="string">"cp /app/target/springwebapp.war /tomcat/webapps/ &amp; /tomcat/bin/catalina.sh run"</span></span><br></pre></td></tr></table></figure><p>运行成功，访问：<a href="http://localhost:8080/springwebapp/car/add" target="_blank" rel="noopener">http://localhost:8080/springwebapp/car/add</a></p><p>停止Spring</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker rm -vf spring</span><br></pre></td></tr></table></figure><h3 id="在不同的Tomcat镜像中运行Spring-App程序"><a href="#在不同的Tomcat镜像中运行Spring-App程序" class="headerlink" title="在不同的Tomcat镜像中运行Spring App程序"></a>在不同的Tomcat镜像中运行Spring App程序</h3><p>clone spring工程：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone  https://github.com/atifsaddique211f/spring-maven-sample.git</span><br></pre></td></tr></table></figure><p>创建Dockerfile</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Dockerfile</span></span><br><span class="line">FROM tomcat:<span class="number">8</span></span><br><span class="line"></span><br><span class="line">ADD target/*.war /usr/local/tomcat/webapps/</span><br></pre></td></tr></table></figure><p>构建并打包工程</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it --rm -v <span class="string">"<span class="variable">$PWD</span>"</span>:/app -w /app demo/maven:<span class="number">3.5</span>-jdk-<span class="number">8</span> mvn clean install</span><br></pre></td></tr></table></figure><p>构建Dockerfile</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -f Dockerfile -t demo/tomcat:<span class="number">8</span> .</span><br></pre></td></tr></table></figure><p>运行Tomcat</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --rm -p <span class="number">8080</span>:<span class="number">8080</span> demo/tomcat:<span class="number">8</span></span><br></pre></td></tr></table></figure><p><code>Ctrl + C</code> 停止应用程序</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><p><a href="https://docs.docker.com/engine/reference/builder/" target="_blank" rel="noopener">https://docs.docker.com/engine/reference/builder/</a></p></li><li><p><a href="https://github.com/miguno/java-docker-build-tutorial" target="_blank" rel="noopener">https://github.com/miguno/java-docker-build-tutorial</a></p></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker常用命令整理]]></title>
      <url>/posts/docker-common-commands.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>收集整理常用的Docker命令。</p><a id="more"></a><h2 id="容器类"><a href="#容器类" class="headerlink" title="容器类"></a>容器类</h2><h3 id="查看Docker基础信息"><a href="#查看Docker基础信息" class="headerlink" title="查看Docker基础信息"></a>查看Docker基础信息</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看docker版本</span></span><br><span class="line">$ docker version</span><br><span class="line"><span class="comment"># 显示docker系统的信息</span></span><br><span class="line">$ docker info</span><br></pre></td></tr></table></figure><h3 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询运行中的容器</span></span><br><span class="line">$ docker ps </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有的容器</span></span><br><span class="line">$ docker ps -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动|停止|重启|杀死容器 anyesu-container</span></span><br><span class="line">$ docker start | stop | restart | kill anyesu-container</span><br><span class="line"></span><br><span class="line"><span class="comment"># - docker rm [OPTIONS] CONTAINER [CONTAINER...]</span></span><br><span class="line"><span class="comment"># 删除Id为c6e7471292e0的容器</span></span><br><span class="line">$ docker rm c6e7471292e0</span><br><span class="line"></span><br><span class="line"><span class="comment"># - docker inspect [OPTIONS] NAME|ID [NAME|ID...]</span></span><br><span class="line"><span class="comment"># 检视Id为97763bd57c69的容器</span></span><br><span class="line">$ docker inspect <span class="number">97763</span>bd57c69</span><br><span class="line"></span><br><span class="line"><span class="comment"># - docker top CONTAINER [ps OPTIONS]</span></span><br><span class="line"><span class="comment"># 查看容器中正在运行的进程</span></span><br><span class="line">$ docker top <span class="number">97763</span>bd57c69</span><br><span class="line"></span><br><span class="line"><span class="comment"># - docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</span></span><br><span class="line"><span class="comment"># 保存容器为镜像</span></span><br><span class="line">$ docker commit tomcat wangwei01/tomcat:<span class="number">1.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据Dockerfile 构建</span></span><br><span class="line">$ docker build -t [image_name] [Dockerfile_path]</span><br></pre></td></tr></table></figure><h3 id="交互式进入容器"><a href="#交互式进入容器" class="headerlink" title="交互式进入容器"></a>交互式进入容器</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker exec -it &#123;&#123;containerName or containerID&#125;&#125; bash</span><br><span class="line">$ docker exec -i  &#123;&#123;containerName or containerID&#125;&#125; bash</span><br><span class="line">$ docker exec -t  &#123;&#123;containerName or containerID&#125;&#125; bash</span><br><span class="line">$ docker exec -d  &#123;&#123;containerName or containerID&#125;&#125; bash</span><br></pre></td></tr></table></figure><blockquote><ul><li>只用 <code>-i</code> 参数，由于没有分配伪终端，看起来像pipe执行一样。但是执行结果、命令返回值都可以正确获取</li><li>只用 <code>-t</code> 参数，则可以看到一个 console 窗口，但是执行命令会发现由于没有获得stdin的输出，无法看到命令执行情况</li><li>使用 <code>-it</code> 时，则和我们平常操作 console 界面类似，而且也<code>不会像attach方式因为退出，导致整个容器退出</code></li><li>使用 <code>-d</code> 参数，在后台执行一个进程。如果一个命令需要长时间进程，会很快返回</li></ul></blockquote><h3 id="Docker-run"><a href="#Docker-run" class="headerlink" title="Docker run"></a>Docker run</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br></pre></td></tr></table></figure><h4 id="run命令选项"><a href="#run命令选项" class="headerlink" title="run命令选项"></a>run命令选项</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">Options:</span><br><span class="line">      --add-host list                  Add a custom host-to-IP mapping (host:ip)</span><br><span class="line">  -a, --attach list                    Attach to STDIN, STDOUT or STDERR</span><br><span class="line">      --blkio-weight uint16            Block IO (relative weight), between <span class="number">10</span> and <span class="number">1000</span>, or <span class="number">0</span> to disable (default <span class="number">0</span>)</span><br><span class="line">      --blkio-weight-device list       Block IO weight (relative device weight) (default [])</span><br><span class="line">      --cap-add list                   Add Linux capabilities</span><br><span class="line">      --cap-drop list                  Drop Linux capabilities</span><br><span class="line">      --cgroup-parent string           Optional parent cgroup <span class="keyword">for</span> the container</span><br><span class="line">      --cidfile string                 Write the container ID to the file</span><br><span class="line">      --cpu-period int                 Limit CPU CFS (Completely Fair Scheduler) period</span><br><span class="line">      --cpu-quota int                  Limit CPU CFS (Completely Fair Scheduler) quota</span><br><span class="line">      --cpu-rt-period int              Limit CPU real-time period <span class="keyword">in</span> microseconds</span><br><span class="line">      --cpu-rt-runtime int             Limit CPU real-time runtime <span class="keyword">in</span> microseconds</span><br><span class="line">  -c, --cpu-shares int                 CPU shares (relative weight)</span><br><span class="line">      --cpus decimal                   Number of CPUs</span><br><span class="line">      --cpuset-cpus string             CPUs <span class="keyword">in</span> which to allow execution (<span class="number">0</span>-<span class="number">3</span>, <span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">      --cpuset-mems string             MEMs <span class="keyword">in</span> which to allow execution (<span class="number">0</span>-<span class="number">3</span>, <span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">  -d, --detach                         Run container <span class="keyword">in</span> background and print container ID</span><br><span class="line">      --detach-keys string             Override the key sequence <span class="keyword">for</span> detaching a container</span><br><span class="line">      --device list                    Add a host device to the container</span><br><span class="line">      --device-cgroup-rule list        Add a rule to the cgroup allowed devices list</span><br><span class="line">      --device-read-bps list           Limit read rate (bytes per second) from a device (default [])</span><br><span class="line">      --device-read-iops list          Limit read rate (IO per second) from a device (default [])</span><br><span class="line">      --device-write-bps list          Limit write rate (bytes per second) to a device (default [])</span><br><span class="line">      --device-write-iops list         Limit write rate (IO per second) to a device (default [])</span><br><span class="line">      --disable-content-trust          Skip image verification (default true)</span><br><span class="line">      --dns list                       Set custom DNS servers</span><br><span class="line">      --dns-option list                Set DNS options</span><br><span class="line">      --dns-search list                Set custom DNS search domains</span><br><span class="line">      --entrypoint string              Overwrite the default ENTRYPOINT of the image</span><br><span class="line">  -e, --env list                       Set environment variables</span><br><span class="line">      --env-file list                  Read <span class="keyword">in</span> a file of environment variables</span><br><span class="line">      --expose list                    Expose a port or a range of ports</span><br><span class="line">      --group-add list                 Add additional groups to join</span><br><span class="line">      --health-cmd string              Command to run to check health</span><br><span class="line">      --health-interval duration       Time between running the check (ms|s|m|h) (default <span class="number">0</span>s)</span><br><span class="line">      --health-retries int             Consecutive failures needed to report unhealthy</span><br><span class="line">      --health-start-period duration   Start period <span class="keyword">for</span> the container to initialize before starting health-retries countdown (ms|s|m|h) (default <span class="number">0</span>s)</span><br><span class="line">      --health-timeout duration        Maximum time to allow one check to run (ms|s|m|h) (default <span class="number">0</span>s)</span><br><span class="line">      --help                           Print usage</span><br><span class="line">  -h, --hostname string                Container host name</span><br><span class="line">      --init                           Run an init inside the container that forwards signals and reaps processes</span><br><span class="line">  -i, --interactive                    Keep STDIN open even <span class="keyword">if</span> not attached</span><br><span class="line">      --ip string                      IPv4 address (e.g., <span class="number">172.30</span>.<span class="number">100.104</span>)</span><br><span class="line">      --ip6 string                     IPv6 address (e.g., <span class="number">2001</span>:db8::<span class="number">33</span>)</span><br><span class="line">      --ipc string                     IPC mode to use</span><br><span class="line">      --isolation string               Container isolation technology</span><br><span class="line">      --kernel-memory bytes            Kernel memory limit</span><br><span class="line">  -l, --label list                     Set meta <span class="keyword">data</span> on a container</span><br><span class="line">      --label-file list                Read <span class="keyword">in</span> a line delimited file of labels</span><br><span class="line">      --link list                      Add link to another container</span><br><span class="line">      --link-local-ip list             Container IPv4/IPv6 link-local addresses</span><br><span class="line">      --log-driver string              Logging driver <span class="keyword">for</span> the container</span><br><span class="line">      --log-opt list                   Log driver options</span><br><span class="line">      --mac-address string             Container MAC address (e.g., <span class="number">92</span>:d0:c6:<span class="number">0</span>a:<span class="number">29</span>:<span class="number">33</span>)</span><br><span class="line">  -m, --memory bytes                   Memory limit</span><br><span class="line">      --memory-reservation bytes       Memory soft limit</span><br><span class="line">      --memory-swap bytes              Swap limit equal to memory plus swap: <span class="string">'-1'</span> to enable unlimited swap</span><br><span class="line">      --memory-swappiness int          Tune container memory swappiness (<span class="number">0</span> to <span class="number">100</span>) (default -<span class="number">1</span>)</span><br><span class="line">      --mount mount                    Attach a filesystem mount to the container</span><br><span class="line">      --name string                    Assign a name to the container</span><br><span class="line">      --network string                 Connect a container to a network (default <span class="string">"default"</span>)</span><br><span class="line">      --network-alias list             Add network-scoped alias <span class="keyword">for</span> the container</span><br><span class="line">      --no-healthcheck                 Disable any container-specified HEALTHCHECK</span><br><span class="line">      --oom-kill-disable               Disable OOM Killer</span><br><span class="line">      --oom-score-adj int              Tune host<span class="string">'s OOM preferences (-1000 to 1000)</span></span><br><span class="line"><span class="string">      --pid string                     PID namespace to use</span></span><br><span class="line"><span class="string">      --pids-limit int                 Tune container pids limit (set -1 for unlimited)</span></span><br><span class="line"><span class="string">      --privileged                     Give extended privileges to this container</span></span><br><span class="line"><span class="string">  -p, --publish list                   Publish a container'</span>s port(s) to the host</span><br><span class="line">  -P, --publish-all                    Publish all exposed ports to random ports</span><br><span class="line">      --read-only                      Mount the container<span class="string">'s root filesystem as read only</span></span><br><span class="line"><span class="string">      --restart string                 Restart policy to apply when a container exits (default "no")</span></span><br><span class="line"><span class="string">      --rm                             Automatically remove the container when it exits</span></span><br><span class="line"><span class="string">      --runtime string                 Runtime to use for this container</span></span><br><span class="line"><span class="string">      --security-opt list              Security Options</span></span><br><span class="line"><span class="string">      --shm-size bytes                 Size of /dev/shm</span></span><br><span class="line"><span class="string">      --sig-proxy                      Proxy received signals to the process (default true)</span></span><br><span class="line"><span class="string">      --stop-signal string             Signal to stop a container (default "SIGTERM")</span></span><br><span class="line"><span class="string">      --stop-timeout int               Timeout (in seconds) to stop a container</span></span><br><span class="line"><span class="string">      --storage-opt list               Storage driver options for the container</span></span><br><span class="line"><span class="string">      --sysctl map                     Sysctl options (default map[])</span></span><br><span class="line"><span class="string">      --tmpfs list                     Mount a tmpfs directory</span></span><br><span class="line"><span class="string">  -t, --tty                            Allocate a pseudo-TTY</span></span><br><span class="line"><span class="string">      --ulimit ulimit                  Ulimit options (default [])</span></span><br><span class="line"><span class="string">  -u, --user string                    Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;])</span></span><br><span class="line"><span class="string">      --userns string                  User namespace to use</span></span><br><span class="line"><span class="string">      --uts string                     UTS namespace to use</span></span><br><span class="line"><span class="string">  -v, --volume list                    Bind mount a volume</span></span><br><span class="line"><span class="string">      --volume-driver string           Optional volume driver for the container</span></span><br><span class="line"><span class="string">      --volumes-from list              Mount volumes from the specified container(s)</span></span><br><span class="line"><span class="string">  -w, --workdir string                 Working directory inside the container</span></span><br></pre></td></tr></table></figure><h2 id="镜像类"><a href="#镜像类" class="headerlink" title="镜像类"></a>镜像类</h2><h3 id="远程镜像仓库"><a href="#远程镜像仓库" class="headerlink" title="远程镜像仓库"></a>远程镜像仓库</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># - docker search [OPTIONS] TERM</span></span><br><span class="line"><span class="comment"># 搜索处收藏数不小于3的alpine镜像</span></span><br><span class="line">$ docker search -f=stars=<span class="number">3</span> alpine</span><br><span class="line"></span><br><span class="line"><span class="comment"># - docker pull [OPTIONS] NAME[:TAG|@DIGEST]</span></span><br><span class="line"><span class="comment"># 拉取ubuntu最新的镜像</span></span><br><span class="line">$ docker pull ubuntu:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># - docker push NAME[:TAG]</span></span><br><span class="line"><span class="comment"># 推送本地镜像到远程仓库</span></span><br><span class="line">$ docker push alpine:<span class="number">1.1</span></span><br></pre></td></tr></table></figure><h3 id="本地镜像"><a href="#本地镜像" class="headerlink" title="本地镜像"></a>本地镜像</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出本地所有镜像</span></span><br><span class="line">$ docker images -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地镜像名为 java 的所有镜像</span></span><br><span class="line">$ docker images java </span><br><span class="line"></span><br><span class="line"><span class="comment"># - docker inspect [OPTIONS] NAME|ID [NAME|ID...]</span></span><br><span class="line"><span class="comment"># 查看镜像详情</span></span><br><span class="line">$ docker inspect java</span><br><span class="line"></span><br><span class="line"><span class="comment"># - docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]</span></span><br><span class="line"><span class="comment"># 修改镜像Tag</span></span><br><span class="line">$ docker tag java java:<span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - docker rmi [OPTIONS] IMAGE [IMAGE...]</span></span><br><span class="line"><span class="comment"># 本地移除名为 hello-world 的镜像</span></span><br><span class="line">$ docker rmi hello-world</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除本地全部镜像</span></span><br><span class="line">$ docker rmi `docker images -a -q`</span><br><span class="line"></span><br><span class="line"><span class="comment"># - docker save [OPTIONS] IMAGE [IMAGE...] </span></span><br><span class="line"><span class="comment"># 指定镜像保存成 tar 归档文件</span></span><br><span class="line"><span class="comment"># 将镜像 tomcat:8 保存为 tomcat.tar 文件</span></span><br><span class="line">$ docker save -o tomcat.tar wangwei01/tomcat:<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - docker load </span></span><br><span class="line"><span class="comment"># 将 ubuntu14.04.tar 文件载入镜像中</span></span><br><span class="line">$ docker load -i ubuntu14.<span class="number">04</span>.tar</span><br><span class="line">$ docker load &lt; /home/save.tar</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.docker.com/" target="_blank" rel="noopener">https://docs.docker.com/</a></li></ul>]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[个人博客搭建系列指南]]></title>
      <url>/posts/personal-blog-building-guide.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>本系列文章主要用来记录自己搭建博客的过程，分享出来给需要的朋友。有几点说明需要注意：</p><ul><li>如果你是开发者或者说是对编程熟悉的朋友，可以直接忽略此声明；</li><li>如果是非开发者或是对<strong>命令行</strong>毫无概念，但是又想搭建自己博客的朋友，在依照此系列文章搭建博客时，务必保证一点：<strong>不要一上来就问这些命令行是干什么的，请先直接按照文章的引导一步一步去执行，直到把目标达成，建立起成就感。之后，再回过头去Google一下这些命令行是干什么的，先模仿再深究，才是正确的学习方式，否则很容易从入门到放弃</strong>。</li><li>此文章只适用于<strong>Mac环境</strong>。</li><li>虽说网上的有了很多关于如何通过Hexo搭建博客的指南，但我还是想用更加清晰明了的方式再做一遍梳理，希望我的文章能够给你简单、清晰的感觉。</li></ul><a id="more"></a><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ul><li><p>命令行工具<strong>terminal</strong>熟悉</p><p><img src="https://img.i7years.com/terminal_1.png" alt="WX20170604-145706@2x"></p></li><li><p>前往<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>注册一个账号，后面有用</p></li><li><p>打开Terminal，下面的命令，安装后续要用到各种工具及环境。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bash &lt;(curl -s https://raw.githubusercontent.com/monfresh/laptop/master/laptop)</span><br></pre></td></tr></table></figure><p>演示视频：<a href="https://monfresh.wistia.com/medias/k8zxt0vj7w" target="_blank" rel="noopener">https://monfresh.wistia.com/medias/k8zxt0vj7w</a></p><p>参考文档：<a href="https://github.com/monfresh/laptop" target="_blank" rel="noopener">https://github.com/monfresh/laptop</a></p></li></ul><h1 id="指南"><a href="#指南" class="headerlink" title="指南"></a>指南</h1><ol><li>如何在自己电脑上搭建好博客，建立起初步的成就感。<a href="https://wangwei.one/posts/c5e43a28.html">https://wangwei.one/posts/c5e43a28.html</a></li><li>如何将自己的博客放到网上，让别人也能看到。<a href="https://wangwei.one/posts/f5f2d6f0.html">https://wangwei.one/posts/f5f2d6f0.html</a></li><li>修改博客的名称、logo、ico、slogan、主题等配置。<a href="https://wangwei.one/posts/b8ec75a2.html">https://wangwei.one/posts/b8ec75a2.html</a></li></ol>]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[个人博客搭建指南（三）]]></title>
      <url>/posts/personal-blog-building-guide-3.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote><p>本篇文章介绍Hexo博客的一些主题更换、基本配置以及一些好用的插件安装</p></blockquote><a id="more"></a><h1 id="主题更换"><a href="#主题更换" class="headerlink" title="主题更换"></a>主题更换</h1><blockquote><ul><li>这里以目前我比较喜欢的主题<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">NexT</a>为例。更多主题：<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a></li><li>NexT官方文档：<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">http://theme-next.iissnan.com/getting-started.html</a></li><li>NexT图标库：<a href="http://fontawesome.io/icons/" target="_blank" rel="noopener">http://fontawesome.io/icons/</a></li></ul></blockquote><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入博客根目录</span></span><br><span class="line">$ cd myBlog</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建新主题文件夹</span></span><br><span class="line">$ mkdir themes/next</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载</span></span><br><span class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>修改主配置文件<code>_config.yml</code>中的<code>theme</code>，设置为<code>next</code>；</li><li>执行<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code>查看效果；</li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><blockquote><p>官方文档：<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next</a></p></blockquote><h3 id="网站ico设置"><a href="#网站ico设置" class="headerlink" title="网站ico设置"></a>网站ico设置</h3><ul><li>下载icon资源：<a href="https://www.flaticon.com" target="_blank" rel="noopener">https://www.flaticon.com</a></li><li>将下载到的png转化为 <code>16 x 16</code>、<code>32 x 32</code>、<code>180 x 180</code>三个版本</li><li>将转化后的png以及下载的svg文件放到<code>myBlog/source/</code>目录下</li><li>修改<code>next/_config.yml</code>中<code>favicon</code>项的图片路劲配置<ul><li>删除<code>/images</code>前缀</li><li>更新图片名称</li></ul></li><li>执行<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code>查看效果</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Site Information Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># To get or check favicons visit: https://realfavicongenerator.net</span></span><br><span class="line"><span class="comment"># Put your favicons into `hexo-site/source/` (recommend) or `hexo-site/themes/next/source/images/` directory.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Default NexT favicons placed in `hexo-site/themes/next/source/images/` directory.</span></span><br><span class="line"><span class="comment"># And if you want to place your icons in `hexo-site/source/` root directory, you must remove `/images` prefix from pathes.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># For example, you put your favicons into `hexo-site/source/images` directory.</span></span><br><span class="line"><span class="comment"># Then need to rename &amp; redefine they on any other names, otherwise icons from Next will rewrite your custom icons in Hexo.</span></span><br><span class="line"><span class="attr">favicon:</span></span><br><span class="line"><span class="attr">  small:</span> <span class="string">/favicon-16x16-code.png</span></span><br><span class="line"><span class="attr">  medium:</span> <span class="string">/favicon-32x32-code.png</span></span><br><span class="line"><span class="attr">  apple_touch_icon:</span> <span class="string">/favicon-180x180-code.png</span></span><br><span class="line"><span class="attr">  safari_pinned_tab:</span> <span class="string">/logo.svg</span></span><br><span class="line">  <span class="comment">#android_manifest: /images/manifest.json</span></span><br><span class="line">  <span class="comment">#ms_browserconfig: /images/browserconfig.xml</span></span><br></pre></td></tr></table></figure><h3 id="菜单设置"><a href="#菜单设置" class="headerlink" title="菜单设置"></a>菜单设置</h3><h4 id="创建Tags页面"><a href="#创建Tags页面" class="headerlink" title="创建Tags页面"></a>创建Tags页面</h4><ul><li><p>新建名为<code>tags</code>的页面</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page <span class="string">"tags"</span></span><br></pre></td></tr></table></figure></li><li><p>设置页面类型为<code>tags</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">All</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2014</span><span class="bullet">-12</span><span class="bullet">-22</span> <span class="number">12</span><span class="string">:39:04</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"tags"</span></span><br></pre></td></tr></table></figure></li><li><p>添加<code>tags</code>到主题配置<code>_config.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  home:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">  archives:</span> <span class="string">/archives</span></span><br><span class="line"><span class="attr">  tags:</span> <span class="string">/tags</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="创建Categories页面"><a href="#创建Categories页面" class="headerlink" title="创建Categories页面"></a>创建Categories页面</h4><ul><li><p>新建名为<code>categories</code>的页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;categories&quot;</span><br></pre></td></tr></table></figure></li><li><p>设置页面类型为<code>categories</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">All</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2014</span><span class="bullet">-12</span><span class="bullet">-22</span> <span class="number">12</span><span class="string">:39:04</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"categories"</span></span><br></pre></td></tr></table></figure></li><li><p>添加<code>categories</code>到主题配置<code>_config.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  home:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">  archives:</span> <span class="string">/archives</span></span><br><span class="line"><span class="attr">  categories:</span> <span class="string">/categories</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="配置菜单"><a href="#配置菜单" class="headerlink" title="配置菜单"></a>配置菜单</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Menu Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash from link value (/archives -&gt; archives).</span></span><br><span class="line"><span class="comment"># Usage: `Key: /link/ || icon`</span></span><br><span class="line"><span class="comment"># Key is the name of menu item. If translate for this menu will find in languages - this translate will be loaded; if not - Key name will be used. Key is case-senstive.</span></span><br><span class="line"><span class="comment"># Value before `||` delimeter is the target link.</span></span><br><span class="line"><span class="comment"># Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, question icon will be loaded.</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line"><span class="attr">  tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">  categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line"><span class="attr">  archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line"><span class="attr">  about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">user</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line"><span class="comment">#  sitemap: /sitemap.xml || sitemap</span></span><br><span class="line"><span class="comment">#  commonweal: /404/ || heartbeat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable/Disable menu icons.</span></span><br><span class="line"><span class="attr">menu_icons:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="侧边栏设置"><a href="#侧边栏设置" class="headerlink" title="侧边栏设置"></a>侧边栏设置</h3><h4 id="设置社交链接"><a href="#设置社交链接" class="headerlink" title="设置社交链接"></a>设置社交链接</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Sidebar Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Social Links.</span></span><br><span class="line"><span class="comment"># Usage: `Key: permalink || icon`</span></span><br><span class="line"><span class="comment"># Key is the link label showing to end users.</span></span><br><span class="line"><span class="comment"># Value before `||` delimeter is the target permalink.</span></span><br><span class="line"><span class="comment"># Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, globe icon will be loaded.</span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line"><span class="attr">  GitHub:</span> <span class="attr">https://github.com/wangweiX</span> <span class="string">||</span> <span class="string">github</span></span><br><span class="line"><span class="attr">  StackOverflow:</span> <span class="attr">https://stackoverflow.com/users/8892704/wangwei</span> <span class="string">||</span> <span class="string">stack-overflow</span></span><br><span class="line"><span class="attr">  Weibo:</span> <span class="attr">http://weibo.com/wangweijava</span> <span class="string">||</span> <span class="string">weibo</span></span><br><span class="line"><span class="attr">  Twitter:</span> <span class="attr">https://twitter.com/wangwei_hz</span> <span class="string">||</span> <span class="string">twitter</span></span><br><span class="line"><span class="attr">  Douban:</span> <span class="attr">https://www.douban.com/people/wwxzwj</span> <span class="string">||</span> <span class="string">film</span></span><br><span class="line"><span class="attr">  Linkedin:</span> <span class="attr">http://www.linkedin.com/in/wangweix/</span> <span class="string">||</span> <span class="string">linkedin</span></span><br><span class="line"><span class="attr">  Podcast:</span> <span class="attr">http://www.ximalaya.com/53432374/profile</span> <span class="string">||</span> <span class="string">podcast</span></span><br><span class="line"><span class="attr">  E-Mail:</span> <span class="attr">mailto:w7years@gmail.com</span> <span class="string">||</span> <span class="string">envelope</span></span><br><span class="line">  <span class="comment"># 知乎: https://www.zhihu.com/people/Ww-1991</span></span><br><span class="line">  <span class="comment"># 简书: http://www.jianshu.com/users/a04d5c200045/timeline</span></span><br><span class="line">  <span class="comment"># Google: https://plus.google.com/yourname || google</span></span><br><span class="line">  <span class="comment"># VK Group: https://vk.com/yourname || vk</span></span><br><span class="line">  <span class="comment"># Instagram: https://instagram.com/yourname || instagram</span></span><br><span class="line">  <span class="comment"># Skype: skype:yourname?call|chat || skype</span></span><br><span class="line">  <span class="comment"># YouTube: https://youtube.com/yourname || youtube</span></span><br><span class="line">  <span class="comment"># FB Page: https://www.facebook.com/wangwei1991 || facebook</span></span><br><span class="line"></span><br><span class="line"><span class="attr">social_icons:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  icons_only:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  transition:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h4 id="设置友情链接"><a href="#设置友情链接" class="headerlink" title="设置友情链接"></a>设置友情链接</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Blog rolls</span></span><br><span class="line"><span class="attr">links_icon:</span> <span class="string">link</span></span><br><span class="line"><span class="attr">links_title:</span> <span class="string">Links</span></span><br><span class="line"><span class="comment">#links_layout: block</span></span><br><span class="line"><span class="comment">#links_layout: inline</span></span><br><span class="line"><span class="attr">links:</span></span><br><span class="line"><span class="attr">  howtodoinjava:</span> <span class="attr">https://howtodoinjava.com/</span></span><br><span class="line">  <span class="string">美团点评:</span> <span class="attr">https://tech.meituan.com/</span></span><br><span class="line">  <span class="string">阮一峰:</span> <span class="attr">http://www.ruanyifeng.com/blog/</span></span><br></pre></td></tr></table></figure><h4 id="设置侧边栏头像"><a href="#设置侧边栏头像" class="headerlink" title="设置侧边栏头像"></a>设置侧边栏头像</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="comment"># in theme directory(source/images): /images/avatar.gif</span></span><br><span class="line"><span class="comment"># in site  directory(source/uploads): /uploads/avatar.gif</span></span><br><span class="line"><span class="attr">avatar:</span> <span class="attr">https://img.i7years.com/my7year-8.jpg</span></span><br></pre></td></tr></table></figure><h4 id="设置微信订阅-amp-打赏"><a href="#设置微信订阅-amp-打赏" class="headerlink" title="设置微信订阅&amp;打赏"></a>设置微信订阅&amp;打赏</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Wechat Subscriber</span></span><br><span class="line"><span class="attr">wechat_subscriber:</span></span><br><span class="line"><span class="attr">  enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  qcode:</span> <span class="attr">https://img.i7years.com/my7year-8.jpg</span></span><br><span class="line"><span class="attr">  description:</span> <span class="string">互相学习</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Reward</span></span><br><span class="line"><span class="attr">reward_comment:</span> <span class="string">请我喝杯咖啡吧~</span></span><br><span class="line"><span class="attr">wechatpay:</span> <span class="attr">https://img.i7years.com/pay2Wechat.png</span></span><br><span class="line"><span class="attr">alipay:</span> <span class="attr">https://img.i7years.com/pay2Alipay.png</span></span><br><span class="line"><span class="attr">bitcoin:</span> <span class="attr">https://img.i7years.com/wallet/rec_bitcoin.png</span></span><br></pre></td></tr></table></figure><h3 id="第三方插件配置"><a href="#第三方插件配置" class="headerlink" title="第三方插件配置"></a>第三方插件配置</h3><h4 id="站内搜索"><a href="#站内搜索" class="headerlink" title="站内搜索"></a>站内搜索</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/flashlab/hexo-generator-search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># if auto, trigger search by changing input</span></span><br><span class="line">  <span class="comment"># if manual, trigger search by pressing enter key or search button</span></span><br><span class="line"><span class="attr">  trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># show top n results per article, show all results by setting to -1</span></span><br><span class="line"><span class="attr">  top_n_per_article:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="站点PV-UV统计"><a href="#站点PV-UV统计" class="headerlink" title="站点PV/UV统计"></a>站点PV/UV统计</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Show PV/UV of the website/page with busuanzi.</span></span><br><span class="line"><span class="comment"># Get more information on http://ibruce.info/2015/04/04/busuanzi/</span></span><br><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="comment"># count values only if the other configs are false</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># custom uv span for the whole site</span></span><br><span class="line"><span class="attr">  site_uv:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  site_uv_header:</span> <span class="string">本站访客数</span></span><br><span class="line"><span class="attr">  site_uv_footer:</span> <span class="string">人次</span></span><br><span class="line">  <span class="comment"># custom pv span for the whole site</span></span><br><span class="line"><span class="attr">  site_pv:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  site_pv_header:</span> <span class="string">本站总访问量</span></span><br><span class="line"><span class="attr">  site_pv_footer:</span> <span class="string">次</span></span><br><span class="line">  <span class="comment"># custom pv span for one page only</span></span><br><span class="line"><span class="attr">  page_pv:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  page_pv_header:</span> <span class="string">本文总阅读量</span></span><br><span class="line"><span class="attr">  page_pv_footer:</span> <span class="string">次</span></span><br></pre></td></tr></table></figure><h4 id="分享插件"><a href="#分享插件" class="headerlink" title="分享插件"></a>分享插件</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Share</span></span><br><span class="line"><span class="comment">#duoshuo_share: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># NeedMoreShare2</span></span><br><span class="line"><span class="comment"># This plugin is a pure javascript sharing lib which is useful in China.</span></span><br><span class="line"><span class="comment"># See: https://github.com/revir/need-more-share2</span></span><br><span class="line"><span class="comment"># Also see: https://github.com/DzmVasileusky/needShareButton</span></span><br><span class="line"><span class="comment"># iconStyle: default | box</span></span><br><span class="line"><span class="comment"># boxForm: horizontal | vertical</span></span><br><span class="line"><span class="comment"># position: top / middle / bottom + Left / Center / Right</span></span><br><span class="line"><span class="comment"># networks: Weibo,Wechat,Douban,QQZone,Twitter,Linkedin,Mailto,Reddit,</span></span><br><span class="line"><span class="comment">#           Delicious,StumbleUpon,Pinterest,Facebook,GooglePlus,Slashdot,</span></span><br><span class="line"><span class="comment">#           Technorati,Posterous,Tumblr,GoogleBookmarks,Newsvine,</span></span><br><span class="line"><span class="comment">#           Evernote,Friendfeed,Vkontakte,Odnoklassniki,Mailru</span></span><br><span class="line"><span class="attr">needmoreshare2:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  postbottom:</span></span><br><span class="line"><span class="attr">    enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    options:</span></span><br><span class="line"><span class="attr">      iconStyle:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">      boxForm:</span> <span class="string">horizontal</span></span><br><span class="line"><span class="attr">      position:</span> <span class="string">bottomCenter</span></span><br><span class="line"><span class="attr">      networks:</span> <span class="string">Mailto,Wechat,Weibo,QQZone,Twitter,Facebook,Linkedin,Evernote,Douban,GooglePlus,Reddit</span></span><br><span class="line"><span class="attr">  float:</span></span><br><span class="line"><span class="attr">    enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    options:</span></span><br><span class="line"><span class="attr">      iconStyle:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">      boxForm:</span> <span class="string">horizontal</span></span><br><span class="line"><span class="attr">      position:</span> <span class="string">middleRight</span></span><br><span class="line"><span class="attr">      networks:</span> <span class="string">Mailto,Wechat,Weibo,QQZone,Twitter,Facebook,Linkedin,Evernote,Douban,GooglePlus,Reddit</span></span><br></pre></td></tr></table></figure><h4 id="评论插件"><a href="#评论插件" class="headerlink" title="评论插件"></a>评论插件</h4><h5 id="disqus"><a href="#disqus" class="headerlink" title="disqus"></a>disqus</h5><ol><li><p>注册账号：<a href="https://disqus.com/" target="_blank" rel="noopener">https://disqus.com/</a></p></li><li><p>添加站点——&gt; 获取<code>shortname</code>，请参考：<a href="http://www.jianshu.com/p/c4f65ebe23ad" target="_blank" rel="noopener">http://www.jianshu.com/p/c4f65ebe23ad</a></p></li><li><p>修改主题配置文件<code>_config.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Disqus</span></span><br><span class="line"><span class="attr">disqus:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  shortname:</span> <span class="string">xxxxxx</span></span><br><span class="line"><span class="attr">  count:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>注意：disqus需要翻墙才能使用，解决方案：<a href="https://github.com/ciqulover/disqus-proxy" target="_blank" rel="noopener">https://github.com/ciqulover/disqus-proxy</a></p></li></ol><h5 id="gitment"><a href="#gitment" class="headerlink" title="gitment"></a>gitment</h5><ol><li><p>安装插件<a href="https://github.com/imsun/gitment" target="_blank" rel="noopener">gitment</a></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save gitment</span><br></pre></td></tr></table></figure></li><li><p>注册OAuth Application</p><p><a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">点击此处</a> 来注册一个新的 OAuth Application。其他内容可以随意填写，但要确保填入正确的 callback URL（一般是评论页面对应的域名，如 <code>https://imsun.net</code>）。</p><p>你会得到一个 client ID 和一个 client secret，这个将被用于之后的用户登录。</p></li><li><p>修改主题配置文件<code>_config.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gitment</span></span><br><span class="line"><span class="comment"># Introduction: https://imsun.net/posts/gitment-introduction/</span></span><br><span class="line"><span class="comment"># You can get your Github ID from https://api.github.com/users/&lt;Github username&gt;</span></span><br><span class="line"><span class="attr">gitment:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  mint:</span> <span class="literal">true</span> <span class="comment"># RECOMMEND, A mint on Gitment, to support count, language and proxy_gateway</span></span><br><span class="line"><span class="attr">  count:</span> <span class="literal">true</span> <span class="comment"># Show comments count in post meta area</span></span><br><span class="line"><span class="attr">  lazy:</span> <span class="literal">false</span> <span class="comment"># Comments lazy loading with a button</span></span><br><span class="line"><span class="attr">  cleanly:</span> <span class="literal">false</span> <span class="comment"># Hide 'Powered by ...' on footer, and more</span></span><br><span class="line"><span class="attr">  language:</span> <span class="comment"># Force language, or auto switch by theme</span></span><br><span class="line"><span class="attr">  github_user:</span> <span class="string">xxx</span></span><br><span class="line"><span class="attr">  github_repo:</span> <span class="string">xxx</span></span><br><span class="line"><span class="attr">  client_id:</span> <span class="string">xx</span></span><br><span class="line"><span class="attr">  client_secret:</span> <span class="string">xxx</span></span><br><span class="line"><span class="attr">  proxy_gateway:</span> <span class="comment"># Address of api proxy, See: https://github.com/aimingoo/intersect</span></span><br><span class="line"><span class="attr">  redirect_protocol:</span> <span class="comment"># Protocol of redirect_uri with force_redirect_protocol when mint enabled</span></span><br></pre></td></tr></table></figure></li><li><p>初始化评论</p><p>页面发布后，你需要访问页面并使用你的 GitHub 账号登录（请确保你的账号是第三步所填 repo 的 owner），点击初始化按钮。</p><p>之后其他用户即可在该页面发表评论。</p><p>​</p></li></ol><h4 id="统计分析"><a href="#统计分析" class="headerlink" title="统计分析"></a>统计分析</h4><h5 id="Google统计"><a href="#Google统计" class="headerlink" title="Google统计"></a>Google统计</h5><ol><li><p>注册账号：<a href="https://analytics.google.com" target="_blank" rel="noopener">https://analytics.google.com</a></p></li><li><p>新增账号信息及网站信息，获取 Google Analytics ID，形如：UA-xxxxxxxxx-1</p></li><li><p>修改主题配置文件，设置Google Analytics ID</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Google Analytics</span></span><br><span class="line"><span class="attr">google_analytics:</span> <span class="string">UA-xxxxxxxxx-1</span></span><br></pre></td></tr></table></figure></li></ol><h5 id="tencent统计"><a href="#tencent统计" class="headerlink" title="tencent统计"></a>tencent统计</h5><ol><li><p>注册账号：<a href="http://mta.qq.com/" target="_blank" rel="noopener">http://mta.qq.com/</a></p></li><li><p>创建H5应用，获得AppId</p></li><li><p>修改主题配置文件，设置Tencent MTA ID</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Tencent MTA ID</span></span><br><span class="line"><span class="attr">tencent_mta:</span></span><br></pre></td></tr></table></figure></li></ol><h5 id="cnzz-统计"><a href="#cnzz-统计" class="headerlink" title="cnzz 统计"></a>cnzz 统计</h5><ol><li><p>注册账号：<a href="http://www.umeng.com/" target="_blank" rel="noopener">http://www.umeng.com/</a></p></li><li><p>添加站点：<a href="http://web.umeng.com/main.php?c=site&amp;a=show" target="_blank" rel="noopener">http://web.umeng.com/main.php?c=site&amp;a=show</a></p></li><li><p>获取统计代码中的站点ID</p></li><li><p>修改主题配置文件，设置cnzz_siteid</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CNZZ count</span></span><br><span class="line"><span class="comment">#cnzz_siteid:</span></span><br></pre></td></tr></table></figure><p>​</p></li></ol><h5 id="baidu-统计"><a href="#baidu-统计" class="headerlink" title="baidu 统计"></a>baidu 统计</h5><ol><li><p>注册账号：<a href="https://tongji.baidu.com/web/welcome/login" target="_blank" rel="noopener">https://tongji.baidu.com/web/welcome/login</a></p></li><li><p>添加站点</p></li><li><p>获取统计代码中的站点ID</p></li><li><p>修改主题配置文件，设置Baidu Analytics ID</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Baidu Analytics ID</span></span><br><span class="line"><span class="attr">baidu_analytics:</span> <span class="string">xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span></span><br></pre></td></tr></table></figure><p>​</p></li></ol><h4 id="SEO优化"><a href="#SEO优化" class="headerlink" title="SEO优化"></a>SEO优化</h4><h5 id="安装站点地图"><a href="#安装站点地图" class="headerlink" title="安装站点地图"></a>安装站点地图</h5><ol><li><p>站点地图</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># google</span></span><br><span class="line">$ npm install hexo-generator-sitemap --save</span><br><span class="line"></span><br><span class="line"><span class="comment"># baidu</span></span><br><span class="line">$ npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure></li><li><p>修改站点配置</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自动生成sitemap</span></span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">  path: baidusitemap.xml</span><br></pre></td></tr></table></figure><p>​</p></li></ol><h5 id="Google"><a href="#Google" class="headerlink" title="Google"></a>Google</h5><ol><li><p>使用Google账号登录：<a href="https://www.google.com/webmasters" target="_blank" rel="noopener">https://www.google.com/webmasters</a></p></li><li><p>添加属性 ——&gt; 输入网站地址</p></li><li><p>google验证网页所有权，选择HTML Tag验证方式，获取<code>content</code>的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;google-site-verification&quot; content=&quot;XXXXXXXXXXXXXXXXXXXXXXX&quot; /&gt;</span><br></pre></td></tr></table></figure></li><li><p>修改主题配置，设置<code>google_site_verification</code>，构建站点并发布</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Google Webmaster tools verification setting</span></span><br><span class="line"><span class="comment"># See: https://www.google.com/webmasters/</span></span><br><span class="line"><span class="attr">google_site_verification:</span> <span class="string">XXXXXXXXXXXXXXXXXXXXXXX</span></span><br></pre></td></tr></table></figure></li><li><p>验证通过，进入控制台——&gt; 抓取 ——&gt; 站点地图 ——提交站点网址 sitemap.xml</p></li></ol><h5 id="百度"><a href="#百度" class="headerlink" title="百度"></a>百度</h5><ol><li><p>注册百度资源平台账号：<a href="http://ziyuan.baidu.com/" target="_blank" rel="noopener">http://ziyuan.baidu.com/</a></p></li><li><p>网站支持 —&gt; 数据引入 —&gt; MIP引入 —&gt; 数据提交，获取<code>token</code></p><p><img src="https://img.i7years.com/blog/hexo_setting_1.png" alt="hexo_setting_1"></p></li><li><p>到Hexo根目录下，安装插件：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-baidu-url-submit --save</span><br></pre></td></tr></table></figure></li><li><p>修改主题配置文件<code>_config.yml</code>，开启百度自动推送：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEO</span><br><span class="line">baidu_push: true</span><br></pre></td></tr></table></figure></li><li><p>修改hexo主配置文件<code>_config.yml</code>，在文末添加以下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">baidu_url_submit:</span></span><br><span class="line"><span class="attr">  count:</span> <span class="number">1</span> <span class="comment">## 提交最新的一个链接</span></span><br><span class="line"><span class="attr">  host:</span> <span class="string">www.hui-wang.info</span> <span class="comment">## 在百度站长平台中注册的域名</span></span><br><span class="line"><span class="attr">  token:</span> <span class="string">your_token</span> <span class="comment">## 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">baidu_urls.txt</span> <span class="comment">## 文本文档的地址， 新链接会保存在此文本文档里</span></span><br></pre></td></tr></table></figure></li><li><p>修改hexo主配置文件<code>_config.yml</code>，修改<code>deploy</code>项配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">- type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">git@github.com:wangweiX/tech.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">- type:</span> <span class="string">baidu_url_submitter</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="其他插件配置"><a href="#其他插件配置" class="headerlink" title="其他插件配置"></a>其他插件配置</h4><h5 id="文件压缩"><a href="#文件压缩" class="headerlink" title="文件压缩"></a>文件压缩</h5><ol><li><p>安装插件<a href="https://github.com/chenzhutian/hexo-all-minifier" target="_blank" rel="noopener">hexo-all-minifier</a></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-all-minifier --save</span><br></pre></td></tr></table></figure></li><li><p>修改hexo配置文件<code>_config.yml</code>，添加如下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">all_minifier:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ol><h5 id="文章路径优化"><a href="#文章路径优化" class="headerlink" title="文章路径优化"></a>文章路径优化</h5><ol><li><p>安装插件<a href="https://github.com/rozbo/hexo-abbrlink" target="_blank" rel="noopener">hexo-abbrlink</a></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure></li><li><p>修改hexo配置文件<code>_config.yml</code>，添加如下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># abbrlink config</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line"><span class="attr">  alg:</span> <span class="string">crc32</span>  <span class="comment">#support crc16(default) and crc32</span></span><br><span class="line"><span class="attr">  rep:</span> <span class="string">hex</span>    <span class="comment">#support dec(default) and hex</span></span><br></pre></td></tr></table></figure></li><li><p>修改hexo配置文件<code>_config.yml</code>，更新<code>permalink</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:abbrlink.html</span></span><br></pre></td></tr></table></figure></li></ol><h5 id="字数统计"><a href="#字数统计" class="headerlink" title="字数统计"></a>字数统计</h5><ol><li><p>安装插件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># # Node 版本7.6.0之后</span></span><br><span class="line">npm i --save hexo-wordcount</span><br><span class="line"></span><br><span class="line"><span class="comment"># Node 版本7.6.0之前,请安装 2.x 版本 (Node.js v7.6.0 and previous)</span></span><br><span class="line">npm install hexo-wordcount@<span class="number">2</span> --save</span><br></pre></td></tr></table></figure></li><li><p>修改NexT配置文件<code>_config.yml</code>，添加如下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/willin/hexo-wordcount</span></span><br><span class="line"><span class="attr">post_wordcount:</span></span><br><span class="line"><span class="attr">  item_text:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  wordcount:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  min2read:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  totalcount:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  separated_meta:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ol><h5 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h5><ul><li>UML：<a href="https://github.com/bubkoo/hexo-filter-sequence" target="_blank" rel="noopener">https://github.com/bubkoo/hexo-filter-sequence</a></li><li>Flowchat：<a href="https://github.com/bubkoo/hexo-filter-flowchart" target="_blank" rel="noopener">https://github.com/bubkoo/hexo-filter-flowchart</a></li></ul><h5 id="其他插件"><a href="#其他插件" class="headerlink" title="其他插件"></a>其他插件</h5><blockquote><p>官方：<a href="https://github.com/hexojs/hexo/wiki/Plugins" target="_blank" rel="noopener">https://github.com/hexojs/hexo/wiki/Plugins</a></p></blockquote><ul><li>豆瓣：<a href="https://github.com/mythsman/hexo-douban" target="_blank" rel="noopener">https://github.com/mythsman/hexo-douban</a></li><li>音乐：<a href="https://github.com/MoePlayer/hexo-tag-aplayer" target="_blank" rel="noopener">https://github.com/MoePlayer/hexo-tag-aplayer</a></li><li>disqus代理：<a href="https://github.com/ciqulover/disqus-proxy" target="_blank" rel="noopener">https://github.com/ciqulover/disqus-proxy</a></li><li>路径跳转：<a href="https://github.com/hexojs/hexo-generator-alias" target="_blank" rel="noopener">https://github.com/hexojs/hexo-generator-alias</a></li><li>导航目录生成：<a href="https://github.com/bubkoo/hexo-toc" target="_blank" rel="noopener">https://github.com/bubkoo/hexo-toc</a></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://segmentfault.com/a/1190000009009697" target="_blank" rel="noopener">https://segmentfault.com/a/1190000009009697</a></li></ul>]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[个人博客搭建指南（二）]]></title>
      <url>/posts/personal-blog-building-guide-2.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>在 <a href="http://t.cn/RSSaqp7" target="_blank" rel="noopener">上篇</a> 文章中我们学会了</p><ul><li>如何在自己的电脑搭建博客</li><li>如何使用Markdown语法写博文</li></ul><p>接下来，我们学习如何让别人也能访问你的博客，这就需要我们将博客放到一个全世界人民都能访问的地方去——<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>。</p><a id="more"></a><p><img src="https://img.i7years.com/bolg/hexo_public.png" alt="Untitled"></p><blockquote><p>注意：在进行下面的步骤前，请确保你已经按照 <a href="http://t.cn/RSSaUQt" target="_blank" rel="noopener">http://t.cn/RSSaUQt</a> 安装好了环境。否则，你将无法完成后续的步骤。</p></blockquote><h2 id="了解GitHub-Pages"><a href="#了解GitHub-Pages" class="headerlink" title="了解GitHub Pages"></a>了解GitHub Pages</h2><blockquote><p>GitHub Pages is a static site hosting service.（静态站点托管服务）</p><p>GitHub Pages is designed to host your personal, organization, or project pages directly from a GitHub repository.</p><p>详见：</p><ul><li><a href="http://t.cn/RI9hsVm" target="_blank" rel="noopener">http://t.cn/RI9hsVm</a></li><li><a href="http://t.cn/zjkgDLe" target="_blank" rel="noopener">http://t.cn/zjkgDLe</a></li></ul></blockquote><h2 id="创建GitHub仓库"><a href="#创建GitHub仓库" class="headerlink" title="创建GitHub仓库"></a>创建GitHub仓库</h2><blockquote><p>创建GitHug仓库，用于存放自己电脑上的博客站点文件，供他人访问。</p></blockquote><h5 id="登录GitHub"><a href="#登录GitHub" class="headerlink" title="登录GitHub"></a>登录GitHub</h5><ul><li>账号准备，见 <a href="http://t.cn/RSSaUQt" target="_blank" rel="noopener">http://t.cn/RSSaUQt</a></li><li>登录地址：<a href="https://github.com" target="_blank" rel="noopener">https://github.com</a></li></ul><h5 id="创建GitHub-Pages仓库"><a href="#创建GitHub-Pages仓库" class="headerlink" title="创建GitHub Pages仓库"></a>创建GitHub Pages仓库</h5><ul><li><p>访问 <a href="https://github.com/new" target="_blank" rel="noopener">https://github.com/new</a></p><p><img src="https://img.i7years.com/blog/newGitHug.png" alt="newGitHug"></p></li></ul><ul><li><p>创建仓库(Repository name)</p><p><strong>注意</strong>：Repository name 的命名格式：<code>username.github.io</code>，其中username为你的github登录的用户名。例如：我的github的登录名为BorderTravelerX，那么我的GitHub Pages仓库名称为<code>BorderTravelerX.github.io</code>，如图（*为必填）：</p><p><img src="https://img.i7years.com/bolg/createRep.png" alt=""></p></li><li><p>获取GitHub Pages仓库地址，后面有用。</p><blockquote><p>地址形式：<a href="mailto:`git@github.com" target="_blank" rel="noopener">`git@github.com</a>:usernam/username.github.io.git`</p></blockquote><p><img src="https://img.i7years.com/bolg/copyadress.png" alt="copyadress"></p></li></ul><p>​</p><h5 id="添加SSH公钥"><a href="#添加SSH公钥" class="headerlink" title="添加SSH公钥"></a>添加SSH公钥</h5><ul><li><p>查询本地ssh公钥</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat  ~/.ssh/id_rsa.pub    <span class="comment"># 查询用户主目录下的</span></span><br><span class="line">$ ssh-rsa AAAAB3NzaC1yc2EA4RKxvgPztikVj/YaBXR+AiZPDCpJGh752kw3NMH+lrNhAR5ld919lC4RKxvgPztikip3tbKdFuBgL0CT15JqNB7VIN+kGEN7ggczSAF12PncUVj/YaBXR+AiZPDCpJGhuBK6B3MDIwRpZZWtKcaStJ2Y4CwbsTGFy0WRdyeCWXfXZbyvLw3gMJy9XvB01uPpLcrrm79nDKFkqz5h2DTj7f7h294FtR9XQJH5HoO9bDZdMiEckkBBHaPz4cV8kvjqFxy== wangwei@gmail.com  		    <span class="comment"># 这是一个示例公钥</span></span><br></pre></td></tr></table></figure></li><li><p>登录Github ——&gt; 点击头像 ——&gt; Setting ——&gt; SSH and GPG keys ——&gt; New SSH Key ——&gt; 将上一步查询到的公钥复制到Key文本框中，并填好Title(标题，按照自己喜好)——&gt; Add SSH Key</p><p><img src="https://img.i7years.com/blog/sshkey.png" alt="sshkey"></p></li></ul><h2 id="上传博客文件"><a href="#上传博客文件" class="headerlink" title="上传博客文件"></a>上传博客文件</h2><ol><li>修改<code>hexo</code>配置<code>_config.yml</code>文件</li></ol><ul><li><p>打开 <code>myBlog</code>文件夹下的<code>_config.yml</code>文件。</p><blockquote><p>myBlog 为你的hexo目录地址</p></blockquote></li><li><p>配置<code>deploy</code>项，替换 <code>repo</code>为你的实际仓库地址。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">...</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">- type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">git@github.com:usernam/username.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br><span class="line">  </span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li><p>安装git插件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>上传博客文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ cd myBlog							<span class="comment"># 进入博客目录</span></span><br><span class="line">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d	  <span class="comment"># 重新生成博客文件并上传至GitHub</span></span><br><span class="line"></span><br><span class="line">等待出现如下信息，说明上传成功</span><br><span class="line">INFO  Deploying: git</span><br><span class="line">INFO  Clearing .deploy_git folder...</span><br><span class="line">INFO  Copying files from public folder...</span><br><span class="line">[master <span class="number">8</span>af93cc] Site updated: <span class="number">2017</span>-<span class="number">06</span>-<span class="number">08</span> <span class="number">18</span>:<span class="number">14</span>:<span class="number">59</span></span><br><span class="line"> <span class="number">11</span> files changed, <span class="number">95</span> insertions(+), <span class="number">87</span> deletions(-)</span><br><span class="line"> rewrite content.json (<span class="number">88</span>%)</span><br><span class="line"> rewrite index.html (<span class="number">61</span>%)</span><br><span class="line"> rewrite <span class="string">"\344\270\252\344\272\272\345\215\232\345\256\242\346\220\255\345\273\272\346\214\207\345\215\227\357\274\210\344\272\214\357\274\211.html"</span> (<span class="number">95</span>%)</span><br><span class="line">To https://github.com/BorderTravelerX/bordertravelerx.github.io.git</span><br><span class="line"> + c9d2efe...<span class="number">8</span>af93cc HEAD -&gt; master (forced update)</span><br><span class="line">Branch master set up to track remote branch master from https://github.com/BorderTravelerX/bordertravelerx.github.io.git.</span><br><span class="line">INFO  Deploy done: git</span><br></pre></td></tr></table></figure></li><li><p>浏览器访问新的博客地址：username.github.io，如果能看到和你本地一样的页面，恭喜你，上传成功。</p><blockquote><p>注意：username.github.io 为你的实际仓库地址</p></blockquote></li></ol><h2 id="同步Github仓库"><a href="#同步Github仓库" class="headerlink" title="同步Github仓库"></a>同步Github仓库</h2><p>如果你的博客最终是部署到服务器上的，并且希望 <code>username.github.io</code> 仓库有代码更新时，服务器上会自动执行<code>git pull</code> 命令来同步代码。请参考：</p><ul><li><a href="https://github.com/olipo186/Git-Auto-Deploy" target="_blank" rel="noopener">https://github.com/olipo186/Git-Auto-Deploy</a></li></ul>]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[个人博客搭建指南（一）]]></title>
      <url>/posts/personal-blog-building-guide-1.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote><p>本文主要介绍如何在自己的电脑上搭建博客系统，先建立小小的成就感</p><p>系列文章：<a href="http://t.cn/RSSaUQt" target="_blank" rel="noopener">http://t.cn/RSSaUQt</a></p></blockquote><a id="more"></a><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3><blockquote><p>官网地址：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></p></blockquote><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install node</span><br></pre></td></tr></table></figure><h4 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ node -v</span><br><span class="line">v6.<span class="number">10.0</span></span><br><span class="line"></span><br><span class="line">$ npm -v</span><br><span class="line"><span class="number">3.10</span>.<span class="number">10</span></span><br></pre></td></tr></table></figure><h4 id="切换镜像源"><a href="#切换镜像源" class="headerlink" title="切换镜像源"></a>切换镜像源</h4><blockquote><p>由于某些原因，直接从官网安装模块比较慢，经常性地安装失败，最好切换到国内的<a href="http://npm.taobao.org/" target="_blank" rel="noopener">淘宝镜像源</a>来，</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><blockquote><p>搭建博客的核心框架，通过它就可以让我们在不需要编码的情况下搭建好自己的博客，官网地址：<a href="https://hexo.io/" target="_blank" rel="noopener">https://hexo.io/</a></p></blockquote><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h4 id="检测-1"><a href="#检测-1" class="headerlink" title="检测"></a>检测</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ hexo -v</span><br><span class="line">os: Darwin <span class="number">16.6</span>.<span class="number">0</span> darwin x64</span><br><span class="line">http_parser: <span class="number">2.7</span>.<span class="number">0</span></span><br><span class="line">node: <span class="number">6.10</span>.<span class="number">0</span></span><br><span class="line">v8: <span class="number">5.1</span>.<span class="number">281.93</span></span><br><span class="line">uv: <span class="number">1.9</span>.<span class="number">1</span></span><br><span class="line">zlib: <span class="number">1.2</span>.<span class="number">8</span></span><br><span class="line">ares: <span class="number">1.10</span>.<span class="number">1</span>-DEV</span><br><span class="line">icu: <span class="number">58.2</span></span><br><span class="line">modules: <span class="number">48</span></span><br><span class="line">openssl: <span class="number">1.0</span>.<span class="number">2</span>k</span><br></pre></td></tr></table></figure><h2 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h2><h3 id="创建博客目录"><a href="#创建博客目录" class="headerlink" title="创建博客目录"></a>创建博客目录</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init myBlog  <span class="comment"># myBlog 为博客目录名称，名称可依据自己喜好自行定义</span></span><br><span class="line">$ cd myBlog         <span class="comment"># 进入到 myBlog 目录</span></span><br><span class="line">$ npm install       <span class="comment"># 安装模块</span></span><br></pre></td></tr></table></figure><h3 id="生成默认网页"><a href="#生成默认网页" class="headerlink" title="生成默认网页"></a>生成默认网页</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo g</span><br></pre></td></tr></table></figure><h3 id="浏览器访问"><a href="#浏览器访问" class="headerlink" title="浏览器访问"></a>浏览器访问</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br><span class="line"></span><br><span class="line">INFO  Hexo is running at http://localhost:<span class="number">4000</span>/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><blockquote><p>浏览器访问 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></p></blockquote><p>如若看到如下效果，恭喜搭建成功！</p><p><img src="https://img.i7years.com/hexo-default.PNG" alt=""></p><h3 id="发表你的第一篇文章"><a href="#发表你的第一篇文章" class="headerlink" title="发表你的第一篇文章"></a>发表你的第一篇文章</h3><h4 id="创建博文"><a href="#创建博文" class="headerlink" title="创建博文"></a>创建博文</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd myBlog 				 <span class="comment"># 进入的之前创建的博客目录下</span></span><br><span class="line">$ hexo new <span class="string">"我的第一篇博文"</span>	<span class="comment"># 创建博文</span></span><br></pre></td></tr></table></figure><h4 id="编辑博文内容"><a href="#编辑博文内容" class="headerlink" title="编辑博文内容"></a>编辑博文内容</h4><ul><li><p>学习前置技能——<strong>Markdown语法</strong></p><blockquote><ul><li>Markdown 是一种<em>书写</em>的格式，用Markdown编辑文档，不仅简单，而且排版清晰明了</li><li>Markdown 语法学习地址，推荐：<a href="https://maxiang.io/" target="_blank" rel="noopener">https://maxiang.io/</a></li><li>Markdown 文档编辑器，推荐：<a href="http://typora.io" target="_blank" rel="noopener">http://typora.io</a></li></ul></blockquote></li><li><p>使用 typora 打开上一步创建文档 <code>我的第一篇博文.md</code>，目录地址： <code>myBlog/source/_posts</code></p></li><li><p>按照你掌握的Markdown语法，开始写文档吧</p></li></ul><h4 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd myBlog</span><br><span class="line">$ hexo clean &amp;&amp; hexo g  <span class="comment"># 重新构建，生成静态文件</span></span><br><span class="line">$ hexo s                <span class="comment"># 启动博客服务</span></span><br></pre></td></tr></table></figure><blockquote><p>再次访问 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></p></blockquote><h2 id="hexo-常用命令学习"><a href="#hexo-常用命令学习" class="headerlink" title="hexo 常用命令学习"></a>hexo 常用命令学习</h2><blockquote><p>详见：<a href="http://t.cn/R5x40qE" target="_blank" rel="noopener">http://t.cn/R5x40qE</a></p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init [folder]    <span class="comment"># 新建一个网站</span></span><br><span class="line">$ hexo clean            <span class="comment"># 删除本地静态文件</span></span><br><span class="line">$ hexo g            	<span class="comment"># 生成静态文件</span></span><br><span class="line">$ hexo s            	<span class="comment"># 本机运行博客系统</span></span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于写作]]></title>
      <url>/posts/why-we-need-writing.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="关于写作"><a href="#关于写作" class="headerlink" title="关于写作"></a>关于写作</h1><p>知乎上有这样一个问答：</p><blockquote><p>哪个瞬间让你突然觉得读书真有用？</p><blockquote><p>开始真实地感受到输出的每一句话都在暴露输入的时候</p></blockquote></blockquote><a id="more"></a><p>对这句回答，我感同身受，可以说这是我的真实写照，每当想要去给别人讲述一个观点的时候，要么说出去的话不能准确表达自己的意思，要么就是说着说着就卡壳了，最后不得不以”反正就是那样”来草草收场，这种尴尬的场面不知遇到了多少回。</p><p>除了<strong>输入</strong>之外，还有一个不可或缺的部分——<strong>处理</strong>，也就是思考。</p><p><strong>写作，是输入处理后的输出</strong>，是锻炼输入质量及处理质量最直接最有效的方式，没有之一。</p><p>公众号『我的七年』，这里将用来记录自己成长过程中的所思所想，内容主要涉及以下几个方面：</p><ul><li>有关一本好书或者一篇好文的阅读思考笔记；</li><li>自己学到新知识、新观念、新方法论及亲身践行的一些感悟；</li><li>对日常生活中所观察到的表象及背后逻辑与原因的思考；</li></ul><p>同时，希望通过写作来达到以下几个目的：</p><ul><li><p><strong>倒逼自己的输入质量以及思考质量</strong>。而我自己在独立思考、深入思考方面是非常非常非常欠缺的一个人，过去常常表现为，看完一篇好文章，心想：”哇！写的不错！有道理！” 然后点击”分享到朋友圈”或者”保存到印象笔记”，又如，在看一本书的过程中，我会去摘录书中觉得有道理的句子和段落，表示自己已经”认真”地看过这本书了。但是极少会主动去思考以下几个问题：</p><blockquote><p>作者主要讲了些什么？作者的观点是否有道理？哪些观点不同意，你的原因或论据是什么？</p><p>作者是如何论证自己的观点的？论证的思路又是如何？</p><p>论证的过程中用到了哪些素材？这些素材还可以用到其它什么地方去？</p><p>从中我能学到些什么？如何能跟我已有的知识结合起来？</p><p>如何将文中的观点和道理内化到自己的行动中来，进而去改变自己的生活？</p></blockquote><p>​</p><p>在接下来的几年里，我将会系统性地学习概率论与数理统计、历史方法论、逻辑学、心理学(尤其是认知心理 学)、经济学等知识，给自己的操作系统做几次重大的升级，为自己建立一个完整的知识体系框架，去帮助自己突破思考质量上的局限。一个人的思考质量几乎决定着他的生活质量，思考决定选择，选择决定命运。只有思考上的进步，才是根本上的进步。​</p></li><li><p><strong>更加清醒地认识自己</strong>。写作是一个不断探索自己，不断与自己对话的过程，通过写作去发掘内心最真实的想法，去了解自己真正的刚需是什么，知道什么是好的，什么是更好的，什么是是最好的，知道什么事情绝对不能做，什么事情一定要做到底，让自己在面临生活中各种各样的选择时，能够自然而然地做出符合自己<strong>价值观</strong>的选择，而不至于走上违心的岔路。</p></li></ul><ul><li><strong>提升自己的表达能力与沟通能力</strong>。写作并不只是作者的单向输出， 更多的是作者与读者之间双向沟通的过程，作者需要站在读者的角度去审视自己的文章，反思自己有没有将自己的观点清晰地表达给对方，而对方是不是能够清楚且正确地理解自己所表达的意思。在表达能力和沟通能力方面我也是非常欠缺的一个人，希望通过持续不断的写作来提升自己的语言组织能力，让自己的想法和观点能够清晰且正确地表达出来。同时，通过我的文章可以让身边的朋友、同事以及家人更好地了解我。</li></ul><ul><li><strong>更好地消化所学的东西</strong>。通过写作可以梳理自己的知识体系，将各个知识点串联起来，有助于大脑内部形成更加稳固的记忆组块，便于我更好地理解所学的东西。另外，我也很乐意将自己所学到知识、观点和技能整理分享出来，一方面因为<strong>教是最好的学习方法</strong>，另一方面通过大家的反馈可以发现自身思维上的局限和认知的不足，这一点尤为重要，最怕的就是，不知道自己不知道。</li></ul><p>千里之行始于足下。在今后的岁月里，我愿倾注我大部分闲暇时间在自己的一亩三分地上辛勤地耕作，以<strong>持续学习、不断积累</strong>为宗旨，以输出带动输入，以行动驱动梦想，种出自己想要的硕果。</p>]]></content>
      
        <categories>
            
            <category> writing </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 写作 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
